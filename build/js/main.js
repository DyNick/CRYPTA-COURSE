function myMap(){myCenter=new google.maps.LatLng(41.878114,-87.629798);var t={center:myCenter,zoom:12,scrollwheel:!1,draggable:!1,mapTypeId:google.maps.MapTypeId.ROADMAP},e=new google.maps.Map(document.getElementById("googleMap"),t);new google.maps.Marker({position:myCenter}).setMap(e)}!function(t,e,i,s){function n(e,i){this.settings=null,this.options=t.extend({},n.Defaults,i),this.$element=t(e),this._handlers={},this._plugins={},this._supress={},this._current=null,this._speed=null,this._coordinates=[],this._breakpoint=null,this._width=null,this._items=[],this._clones=[],this._mergers=[],this._widths=[],this._invalidated={},this._pipe=[],this._drag={time:null,target:null,pointer:null,stage:{start:null,current:null},direction:null},this._states={current:{},tags:{initializing:["busy"],animating:["busy"],dragging:["interacting"]}},t.each(["onResize","onThrottledResize"],t.proxy(function(e,i){this._handlers[i]=t.proxy(this[i],this)},this)),t.each(n.Plugins,t.proxy(function(t,e){this._plugins[t.charAt(0).toLowerCase()+t.slice(1)]=new e(this)},this)),t.each(n.Workers,t.proxy(function(e,i){this._pipe.push({filter:i.filter,run:t.proxy(i.run,this)})},this)),this.setup(),this.initialize()}n.Defaults={items:3,loop:!1,center:!1,rewind:!1,mouseDrag:!0,touchDrag:!0,pullDrag:!0,freeDrag:!1,margin:0,stagePadding:0,merge:!1,mergeFit:!0,autoWidth:!1,startPosition:0,rtl:!1,smartSpeed:250,fluidSpeed:!1,dragEndSpeed:!1,responsive:{},responsiveRefreshRate:200,responsiveBaseElement:e,fallbackEasing:"swing",info:!1,nestedItemSelector:!1,itemElement:"div",stageElement:"div",refreshClass:"owl-refresh",loadedClass:"owl-loaded",loadingClass:"owl-loading",rtlClass:"owl-rtl",responsiveClass:"owl-responsive",dragClass:"owl-drag",itemClass:"owl-item",stageClass:"owl-stage",stageOuterClass:"owl-stage-outer",grabClass:"owl-grab"},n.Width={Default:"default",Inner:"inner",Outer:"outer"},n.Type={Event:"event",State:"state"},n.Plugins={},n.Workers=[{filter:["width","settings"],run:function(){this._width=this.$element.width()}},{filter:["width","items","settings"],run:function(t){t.current=this._items&&this._items[this.relative(this._current)]}},{filter:["items","settings"],run:function(){this.$stage.children(".cloned").remove()}},{filter:["width","items","settings"],run:function(t){var e=this.settings.margin||"",i=!this.settings.autoWidth,s=this.settings.rtl,n={width:"auto","margin-left":s?e:"","margin-right":s?"":e};!i&&this.$stage.children().css(n),t.css=n}},{filter:["width","items","settings"],run:function(t){var e=(this.width()/this.settings.items).toFixed(3)-this.settings.margin,i=null,s=this._items.length,n=!this.settings.autoWidth,o=[];for(t.items={merge:!1,width:e};s--;)i=this._mergers[s],i=this.settings.mergeFit&&Math.min(i,this.settings.items)||i,t.items.merge=i>1||t.items.merge,o[s]=n?e*i:this._items[s].width();this._widths=o}},{filter:["items","settings"],run:function(){var e=[],i=this._items,s=this.settings,n=Math.max(2*s.items,4),o=2*Math.ceil(i.length/2),r=s.loop&&i.length?s.rewind?n:Math.max(n,o):0,a="",h="";for(r/=2;r--;)e.push(this.normalize(e.length/2,!0)),a+=i[e[e.length-1]][0].outerHTML,e.push(this.normalize(i.length-1-(e.length-1)/2,!0)),h=i[e[e.length-1]][0].outerHTML+h;this._clones=e,t(a).addClass("cloned").appendTo(this.$stage),t(h).addClass("cloned").prependTo(this.$stage)}},{filter:["width","items","settings"],run:function(){for(var t=this.settings.rtl?1:-1,e=this._clones.length+this._items.length,i=-1,s=0,n=0,o=[];++i<e;)s=o[i-1]||0,n=this._widths[this.relative(i)]+this.settings.margin,o.push(s+n*t);this._coordinates=o}},{filter:["width","items","settings"],run:function(){var t=this.settings.stagePadding,e=this._coordinates,i={width:Math.ceil(Math.abs(e[e.length-1]))+2*t,"padding-left":t||"","padding-right":t||""};this.$stage.css(i)}},{filter:["width","items","settings"],run:function(t){var e=this._coordinates.length,i=!this.settings.autoWidth,s=this.$stage.children();if(i&&t.items.merge)for(;e--;)t.css.width=this._widths[this.relative(e)],s.eq(e).css(t.css);else i&&(t.css.width=t.items.width,s.css(t.css))}},{filter:["items"],run:function(){this._coordinates.length<1&&this.$stage.removeAttr("style")}},{filter:["width","items","settings"],run:function(t){t.current=t.current?this.$stage.children().index(t.current):0,t.current=Math.max(this.minimum(),Math.min(this.maximum(),t.current)),this.reset(t.current)}},{filter:["position"],run:function(){this.animate(this.coordinates(this._current))}},{filter:["width","position","items","settings"],run:function(){var t,e,i,s,n=this.settings.rtl?1:-1,o=2*this.settings.stagePadding,r=this.coordinates(this.current())+o,a=r+this.width()*n,h=[];for(i=0,s=this._coordinates.length;i<s;i++)t=this._coordinates[i-1]||0,e=Math.abs(this._coordinates[i])+o*n,(this.op(t,"<=",r)&&this.op(t,">",a)||this.op(e,"<",r)&&this.op(e,">",a))&&h.push(i);this.$stage.children(".active").removeClass("active"),this.$stage.children(":eq("+h.join("), :eq(")+")").addClass("active"),this.settings.center&&(this.$stage.children(".center").removeClass("center"),this.$stage.children().eq(this.current()).addClass("center"))}}],n.prototype.initialize=function(){if(this.enter("initializing"),this.trigger("initialize"),this.$element.toggleClass(this.settings.rtlClass,this.settings.rtl),this.settings.autoWidth&&!this.is("pre-loading")){var e,i,n;e=this.$element.find("img"),i=this.settings.nestedItemSelector?"."+this.settings.nestedItemSelector:s,n=this.$element.children(i).width(),e.length&&n<=0&&this.preloadAutoWidthImages(e)}this.$element.addClass(this.options.loadingClass),this.$stage=t("<"+this.settings.stageElement+' class="'+this.settings.stageClass+'"/>').wrap('<div class="'+this.settings.stageOuterClass+'"/>'),this.$element.append(this.$stage.parent()),this.replace(this.$element.children().not(this.$stage.parent())),this.$element.is(":visible")?this.refresh():this.invalidate("width"),this.$element.removeClass(this.options.loadingClass).addClass(this.options.loadedClass),this.registerEventHandlers(),this.leave("initializing"),this.trigger("initialized")},n.prototype.setup=function(){var e=this.viewport(),i=this.options.responsive,s=-1,n=null;i?(t.each(i,function(t){t<=e&&t>s&&(s=Number(t))}),"function"==typeof(n=t.extend({},this.options,i[s])).stagePadding&&(n.stagePadding=n.stagePadding()),delete n.responsive,n.responsiveClass&&this.$element.attr("class",this.$element.attr("class").replace(new RegExp("("+this.options.responsiveClass+"-)\\S+\\s","g"),"$1"+s))):n=t.extend({},this.options),this.trigger("change",{property:{name:"settings",value:n}}),this._breakpoint=s,this.settings=n,this.invalidate("settings"),this.trigger("changed",{property:{name:"settings",value:this.settings}})},n.prototype.optionsLogic=function(){this.settings.autoWidth&&(this.settings.stagePadding=!1,this.settings.merge=!1)},n.prototype.prepare=function(e){var i=this.trigger("prepare",{content:e});return i.data||(i.data=t("<"+this.settings.itemElement+"/>").addClass(this.options.itemClass).append(e)),this.trigger("prepared",{content:i.data}),i.data},n.prototype.update=function(){for(var e=0,i=this._pipe.length,s=t.proxy(function(t){return this[t]},this._invalidated),n={};e<i;)(this._invalidated.all||t.grep(this._pipe[e].filter,s).length>0)&&this._pipe[e].run(n),e++;this._invalidated={},!this.is("valid")&&this.enter("valid")},n.prototype.width=function(t){switch(t=t||n.Width.Default){case n.Width.Inner:case n.Width.Outer:return this._width;default:return this._width-2*this.settings.stagePadding+this.settings.margin}},n.prototype.refresh=function(){this.enter("refreshing"),this.trigger("refresh"),this.setup(),this.optionsLogic(),this.$element.addClass(this.options.refreshClass),this.update(),this.$element.removeClass(this.options.refreshClass),this.leave("refreshing"),this.trigger("refreshed")},n.prototype.onThrottledResize=function(){e.clearTimeout(this.resizeTimer),this.resizeTimer=e.setTimeout(this._handlers.onResize,this.settings.responsiveRefreshRate)},n.prototype.onResize=function(){return!!this._items.length&&(this._width!==this.$element.width()&&(!!this.$element.is(":visible")&&(this.enter("resizing"),this.trigger("resize").isDefaultPrevented()?(this.leave("resizing"),!1):(this.invalidate("width"),this.refresh(),this.leave("resizing"),void this.trigger("resized")))))},n.prototype.registerEventHandlers=function(){t.support.transition&&this.$stage.on(t.support.transition.end+".owl.core",t.proxy(this.onTransitionEnd,this)),!1!==this.settings.responsive&&this.on(e,"resize",this._handlers.onThrottledResize),this.settings.mouseDrag&&(this.$element.addClass(this.options.dragClass),this.$stage.on("mousedown.owl.core",t.proxy(this.onDragStart,this)),this.$stage.on("dragstart.owl.core selectstart.owl.core",function(){return!1})),this.settings.touchDrag&&(this.$stage.on("touchstart.owl.core",t.proxy(this.onDragStart,this)),this.$stage.on("touchcancel.owl.core",t.proxy(this.onDragEnd,this)))},n.prototype.onDragStart=function(e){var s=null;3!==e.which&&(t.support.transform?s={x:(s=this.$stage.css("transform").replace(/.*\(|\)| /g,"").split(","))[16===s.length?12:4],y:s[16===s.length?13:5]}:(s=this.$stage.position(),s={x:this.settings.rtl?s.left+this.$stage.width()-this.width()+this.settings.margin:s.left,y:s.top}),this.is("animating")&&(t.support.transform?this.animate(s.x):this.$stage.stop(),this.invalidate("position")),this.$element.toggleClass(this.options.grabClass,"mousedown"===e.type),this.speed(0),this._drag.time=(new Date).getTime(),this._drag.target=t(e.target),this._drag.stage.start=s,this._drag.stage.current=s,this._drag.pointer=this.pointer(e),t(i).on("mouseup.owl.core touchend.owl.core",t.proxy(this.onDragEnd,this)),t(i).one("mousemove.owl.core touchmove.owl.core",t.proxy(function(e){var s=this.difference(this._drag.pointer,this.pointer(e));t(i).on("mousemove.owl.core touchmove.owl.core",t.proxy(this.onDragMove,this)),Math.abs(s.x)<Math.abs(s.y)&&this.is("valid")||(e.preventDefault(),this.enter("dragging"),this.trigger("drag"))},this)))},n.prototype.onDragMove=function(t){var e=null,i=null,s=null,n=this.difference(this._drag.pointer,this.pointer(t)),o=this.difference(this._drag.stage.start,n);this.is("dragging")&&(t.preventDefault(),this.settings.loop?(e=this.coordinates(this.minimum()),i=this.coordinates(this.maximum()+1)-e,o.x=((o.x-e)%i+i)%i+e):(e=this.settings.rtl?this.coordinates(this.maximum()):this.coordinates(this.minimum()),i=this.settings.rtl?this.coordinates(this.minimum()):this.coordinates(this.maximum()),s=this.settings.pullDrag?-1*n.x/5:0,o.x=Math.max(Math.min(o.x,e+s),i+s)),this._drag.stage.current=o,this.animate(o.x))},n.prototype.onDragEnd=function(e){var s=this.difference(this._drag.pointer,this.pointer(e)),n=this._drag.stage.current,o=s.x>0^this.settings.rtl?"left":"right";t(i).off(".owl.core"),this.$element.removeClass(this.options.grabClass),(0!==s.x&&this.is("dragging")||!this.is("valid"))&&(this.speed(this.settings.dragEndSpeed||this.settings.smartSpeed),this.current(this.closest(n.x,0!==s.x?o:this._drag.direction)),this.invalidate("position"),this.update(),this._drag.direction=o,(Math.abs(s.x)>3||(new Date).getTime()-this._drag.time>300)&&this._drag.target.one("click.owl.core",function(){return!1})),this.is("dragging")&&(this.leave("dragging"),this.trigger("dragged"))},n.prototype.closest=function(e,i){var s=-1,n=this.width(),o=this.coordinates();return this.settings.freeDrag||t.each(o,t.proxy(function(t,r){return"left"===i&&e>r-30&&e<r+30?s=t:"right"===i&&e>r-n-30&&e<r-n+30?s=t+1:this.op(e,"<",r)&&this.op(e,">",o[t+1]||r-n)&&(s="left"===i?t+1:t),-1===s},this)),this.settings.loop||(this.op(e,">",o[this.minimum()])?s=e=this.minimum():this.op(e,"<",o[this.maximum()])&&(s=e=this.maximum())),s},n.prototype.animate=function(e){var i=this.speed()>0;this.is("animating")&&this.onTransitionEnd(),i&&(this.enter("animating"),this.trigger("translate")),t.support.transform3d&&t.support.transition?this.$stage.css({transform:"translate3d("+e+"px,0px,0px)",transition:this.speed()/1e3+"s"}):i?this.$stage.animate({left:e+"px"},this.speed(),this.settings.fallbackEasing,t.proxy(this.onTransitionEnd,this)):this.$stage.css({left:e+"px"})},n.prototype.is=function(t){return this._states.current[t]&&this._states.current[t]>0},n.prototype.current=function(t){if(t===s)return this._current;if(0===this._items.length)return s;if(t=this.normalize(t),this._current!==t){var e=this.trigger("change",{property:{name:"position",value:t}});e.data!==s&&(t=this.normalize(e.data)),this._current=t,this.invalidate("position"),this.trigger("changed",{property:{name:"position",value:this._current}})}return this._current},n.prototype.invalidate=function(e){return"string"===t.type(e)&&(this._invalidated[e]=!0,this.is("valid")&&this.leave("valid")),t.map(this._invalidated,function(t,e){return e})},n.prototype.reset=function(t){(t=this.normalize(t))!==s&&(this._speed=0,this._current=t,this.suppress(["translate","translated"]),this.animate(this.coordinates(t)),this.release(["translate","translated"]))},n.prototype.normalize=function(t,e){var i=this._items.length,n=e?0:this._clones.length;return!this.isNumeric(t)||i<1?t=s:(t<0||t>=i+n)&&(t=((t-n/2)%i+i)%i+n/2),t},n.prototype.relative=function(t){return t-=this._clones.length/2,this.normalize(t,!0)},n.prototype.maximum=function(t){var e,i,s,n=this.settings,o=this._coordinates.length;if(n.loop)o=this._clones.length/2+this._items.length-1;else if(n.autoWidth||n.merge){for(e=this._items.length,i=this._items[--e].width(),s=this.$element.width();e--&&!((i+=this._items[e].width()+this.settings.margin)>s););o=e+1}else o=n.center?this._items.length-1:this._items.length-n.items;return t&&(o-=this._clones.length/2),Math.max(o,0)},n.prototype.minimum=function(t){return t?0:this._clones.length/2},n.prototype.items=function(t){return t===s?this._items.slice():(t=this.normalize(t,!0),this._items[t])},n.prototype.mergers=function(t){return t===s?this._mergers.slice():(t=this.normalize(t,!0),this._mergers[t])},n.prototype.clones=function(e){var i=this._clones.length/2,n=i+this._items.length,o=function(t){return t%2==0?n+t/2:i-(t+1)/2};return e===s?t.map(this._clones,function(t,e){return o(e)}):t.map(this._clones,function(t,i){return t===e?o(i):null})},n.prototype.speed=function(t){return t!==s&&(this._speed=t),this._speed},n.prototype.coordinates=function(e){var i,n=1,o=e-1;return e===s?t.map(this._coordinates,t.proxy(function(t,e){return this.coordinates(e)},this)):(this.settings.center?(this.settings.rtl&&(n=-1,o=e+1),i=this._coordinates[e],i+=(this.width()-i+(this._coordinates[o]||0))/2*n):i=this._coordinates[o]||0,i=Math.ceil(i))},n.prototype.duration=function(t,e,i){return 0===i?0:Math.min(Math.max(Math.abs(e-t),1),6)*Math.abs(i||this.settings.smartSpeed)},n.prototype.to=function(t,e){var i=this.current(),s=null,n=t-this.relative(i),o=(n>0)-(n<0),r=this._items.length,a=this.minimum(),h=this.maximum();this.settings.loop?(!this.settings.rewind&&Math.abs(n)>r/2&&(n+=-1*o*r),(s=(((t=i+n)-a)%r+r)%r+a)!==t&&s-n<=h&&s-n>0&&(i=s-n,t=s,this.reset(i))):t=this.settings.rewind?(t%(h+=1)+h)%h:Math.max(a,Math.min(h,t)),this.speed(this.duration(i,t,e)),this.current(t),this.$element.is(":visible")&&this.update()},n.prototype.next=function(t){t=t||!1,this.to(this.relative(this.current())+1,t)},n.prototype.prev=function(t){t=t||!1,this.to(this.relative(this.current())-1,t)},n.prototype.onTransitionEnd=function(t){if(t!==s&&(t.stopPropagation(),(t.target||t.srcElement||t.originalTarget)!==this.$stage.get(0)))return!1;this.leave("animating"),this.trigger("translated")},n.prototype.viewport=function(){var s;return this.options.responsiveBaseElement!==e?s=t(this.options.responsiveBaseElement).width():e.innerWidth?s=e.innerWidth:i.documentElement&&i.documentElement.clientWidth?s=i.documentElement.clientWidth:console.warn("Can not detect viewport width."),s},n.prototype.replace=function(e){this.$stage.empty(),this._items=[],e&&(e=e instanceof jQuery?e:t(e)),this.settings.nestedItemSelector&&(e=e.find("."+this.settings.nestedItemSelector)),e.filter(function(){return 1===this.nodeType}).each(t.proxy(function(t,e){e=this.prepare(e),this.$stage.append(e),this._items.push(e),this._mergers.push(1*e.find("[data-merge]").addBack("[data-merge]").attr("data-merge")||1)},this)),this.reset(this.isNumeric(this.settings.startPosition)?this.settings.startPosition:0),this.invalidate("items")},n.prototype.add=function(e,i){var n=this.relative(this._current);i=i===s?this._items.length:this.normalize(i,!0),e=e instanceof jQuery?e:t(e),this.trigger("add",{content:e,position:i}),e=this.prepare(e),0===this._items.length||i===this._items.length?(0===this._items.length&&this.$stage.append(e),0!==this._items.length&&this._items[i-1].after(e),this._items.push(e),this._mergers.push(1*e.find("[data-merge]").addBack("[data-merge]").attr("data-merge")||1)):(this._items[i].before(e),this._items.splice(i,0,e),this._mergers.splice(i,0,1*e.find("[data-merge]").addBack("[data-merge]").attr("data-merge")||1)),this._items[n]&&this.reset(this._items[n].index()),this.invalidate("items"),this.trigger("added",{content:e,position:i})},n.prototype.remove=function(t){(t=this.normalize(t,!0))!==s&&(this.trigger("remove",{content:this._items[t],position:t}),this._items[t].remove(),this._items.splice(t,1),this._mergers.splice(t,1),this.invalidate("items"),this.trigger("removed",{content:null,position:t}))},n.prototype.preloadAutoWidthImages=function(e){e.each(t.proxy(function(e,i){this.enter("pre-loading"),i=t(i),t(new Image).one("load",t.proxy(function(t){i.attr("src",t.target.src),i.css("opacity",1),this.leave("pre-loading"),!this.is("pre-loading")&&!this.is("initializing")&&this.refresh()},this)).attr("src",i.attr("src")||i.attr("data-src")||i.attr("data-src-retina"))},this))},n.prototype.destroy=function(){this.$element.off(".owl.core"),this.$stage.off(".owl.core"),t(i).off(".owl.core"),!1!==this.settings.responsive&&(e.clearTimeout(this.resizeTimer),this.off(e,"resize",this._handlers.onThrottledResize));for(var s in this._plugins)this._plugins[s].destroy();this.$stage.children(".cloned").remove(),this.$stage.unwrap(),this.$stage.children().contents().unwrap(),this.$stage.children().unwrap(),this.$element.removeClass(this.options.refreshClass).removeClass(this.options.loadingClass).removeClass(this.options.loadedClass).removeClass(this.options.rtlClass).removeClass(this.options.dragClass).removeClass(this.options.grabClass).attr("class",this.$element.attr("class").replace(new RegExp(this.options.responsiveClass+"-\\S+\\s","g"),"")).removeData("owl.carousel")},n.prototype.op=function(t,e,i){var s=this.settings.rtl;switch(e){case"<":return s?t>i:t<i;case">":return s?t<i:t>i;case">=":return s?t<=i:t>=i;case"<=":return s?t>=i:t<=i}},n.prototype.on=function(t,e,i,s){t.addEventListener?t.addEventListener(e,i,s):t.attachEvent&&t.attachEvent("on"+e,i)},n.prototype.off=function(t,e,i,s){t.removeEventListener?t.removeEventListener(e,i,s):t.detachEvent&&t.detachEvent("on"+e,i)},n.prototype.trigger=function(e,i,s,o,r){var a={item:{count:this._items.length,index:this.current()}},h=t.camelCase(t.grep(["on",e,s],function(t){return t}).join("-").toLowerCase()),l=t.Event([e,"owl",s||"carousel"].join(".").toLowerCase(),t.extend({relatedTarget:this},a,i));return this._supress[e]||(t.each(this._plugins,function(t,e){e.onTrigger&&e.onTrigger(l)}),this.register({type:n.Type.Event,name:e}),this.$element.trigger(l),this.settings&&"function"==typeof this.settings[h]&&this.settings[h].call(this,l)),l},n.prototype.enter=function(e){t.each([e].concat(this._states.tags[e]||[]),t.proxy(function(t,e){this._states.current[e]===s&&(this._states.current[e]=0),this._states.current[e]++},this))},n.prototype.leave=function(e){t.each([e].concat(this._states.tags[e]||[]),t.proxy(function(t,e){this._states.current[e]--},this))},n.prototype.register=function(e){if(e.type===n.Type.Event){if(t.event.special[e.name]||(t.event.special[e.name]={}),!t.event.special[e.name].owl){var i=t.event.special[e.name]._default;t.event.special[e.name]._default=function(t){return!i||!i.apply||t.namespace&&-1!==t.namespace.indexOf("owl")?t.namespace&&t.namespace.indexOf("owl")>-1:i.apply(this,arguments)},t.event.special[e.name].owl=!0}}else e.type===n.Type.State&&(this._states.tags[e.name]?this._states.tags[e.name]=this._states.tags[e.name].concat(e.tags):this._states.tags[e.name]=e.tags,this._states.tags[e.name]=t.grep(this._states.tags[e.name],t.proxy(function(i,s){return t.inArray(i,this._states.tags[e.name])===s},this)))},n.prototype.suppress=function(e){t.each(e,t.proxy(function(t,e){this._supress[e]=!0},this))},n.prototype.release=function(e){t.each(e,t.proxy(function(t,e){delete this._supress[e]},this))},n.prototype.pointer=function(t){var i={x:null,y:null};return t=t.originalEvent||t||e.event,(t=t.touches&&t.touches.length?t.touches[0]:t.changedTouches&&t.changedTouches.length?t.changedTouches[0]:t).pageX?(i.x=t.pageX,i.y=t.pageY):(i.x=t.clientX,i.y=t.clientY),i},n.prototype.isNumeric=function(t){return!isNaN(parseFloat(t))},n.prototype.difference=function(t,e){return{x:t.x-e.x,y:t.y-e.y}},t.fn.owlCarousel=function(e){var i=Array.prototype.slice.call(arguments,1);return this.each(function(){var s=t(this),o=s.data("owl.carousel");o||(o=new n(this,"object"==typeof e&&e),s.data("owl.carousel",o),t.each(["next","prev","to","destroy","refresh","replace","add","remove"],function(e,i){o.register({type:n.Type.Event,name:i}),o.$element.on(i+".owl.carousel.core",t.proxy(function(t){t.namespace&&t.relatedTarget!==this&&(this.suppress([i]),o[i].apply(this,[].slice.call(arguments,1)),this.release([i]))},o))})),"string"==typeof e&&"_"!==e.charAt(0)&&o[e].apply(o,i)})},t.fn.owlCarousel.Constructor=n}(window.Zepto||window.jQuery,window,document),function(t,e,i,s){var n=function(e){this._core=e,this._interval=null,this._visible=null,this._handlers={"initialized.owl.carousel":t.proxy(function(t){t.namespace&&this._core.settings.autoRefresh&&this.watch()},this)},this._core.options=t.extend({},n.Defaults,this._core.options),this._core.$element.on(this._handlers)};n.Defaults={autoRefresh:!0,autoRefreshInterval:500},n.prototype.watch=function(){this._interval||(this._visible=this._core.$element.is(":visible"),this._interval=e.setInterval(t.proxy(this.refresh,this),this._core.settings.autoRefreshInterval))},n.prototype.refresh=function(){this._core.$element.is(":visible")!==this._visible&&(this._visible=!this._visible,this._core.$element.toggleClass("owl-hidden",!this._visible),this._visible&&this._core.invalidate("width")&&this._core.refresh())},n.prototype.destroy=function(){var t,i;e.clearInterval(this._interval);for(t in this._handlers)this._core.$element.off(t,this._handlers[t]);for(i in Object.getOwnPropertyNames(this))"function"!=typeof this[i]&&(this[i]=null)},t.fn.owlCarousel.Constructor.Plugins.AutoRefresh=n}(window.Zepto||window.jQuery,window,document),function(t,e,i,s){var n=function(e){this._core=e,this._loaded=[],this._handlers={"initialized.owl.carousel change.owl.carousel resized.owl.carousel":t.proxy(function(e){if(e.namespace&&this._core.settings&&this._core.settings.lazyLoad&&(e.property&&"position"==e.property.name||"initialized"==e.type))for(var i=this._core.settings,s=i.center&&Math.ceil(i.items/2)||i.items,n=i.center&&-1*s||0,o=(e.property&&void 0!==e.property.value?e.property.value:this._core.current())+n,r=this._core.clones().length,a=t.proxy(function(t,e){this.load(e)},this);n++<s;)this.load(r/2+this._core.relative(o)),r&&t.each(this._core.clones(this._core.relative(o)),a),o++},this)},this._core.options=t.extend({},n.Defaults,this._core.options),this._core.$element.on(this._handlers)};n.Defaults={lazyLoad:!1},n.prototype.load=function(i){var s=this._core.$stage.children().eq(i),n=s&&s.find(".owl-lazy");!n||t.inArray(s.get(0),this._loaded)>-1||(n.each(t.proxy(function(i,s){var n,o=t(s),r=e.devicePixelRatio>1&&o.attr("data-src-retina")||o.attr("data-src");this._core.trigger("load",{element:o,url:r},"lazy"),o.is("img")?o.one("load.owl.lazy",t.proxy(function(){o.css("opacity",1),this._core.trigger("loaded",{element:o,url:r},"lazy")},this)).attr("src",r):((n=new Image).onload=t.proxy(function(){o.css({"background-image":'url("'+r+'")',opacity:"1"}),this._core.trigger("loaded",{element:o,url:r},"lazy")},this),n.src=r)},this)),this._loaded.push(s.get(0)))},n.prototype.destroy=function(){var t,e;for(t in this.handlers)this._core.$element.off(t,this.handlers[t]);for(e in Object.getOwnPropertyNames(this))"function"!=typeof this[e]&&(this[e]=null)},t.fn.owlCarousel.Constructor.Plugins.Lazy=n}(window.Zepto||window.jQuery,window,document),function(t,e,i,s){var n=function(e){this._core=e,this._handlers={"initialized.owl.carousel refreshed.owl.carousel":t.proxy(function(t){t.namespace&&this._core.settings.autoHeight&&this.update()},this),"changed.owl.carousel":t.proxy(function(t){t.namespace&&this._core.settings.autoHeight&&"position"==t.property.name&&this.update()},this),"loaded.owl.lazy":t.proxy(function(t){t.namespace&&this._core.settings.autoHeight&&t.element.closest("."+this._core.settings.itemClass).index()===this._core.current()&&this.update()},this)},this._core.options=t.extend({},n.Defaults,this._core.options),this._core.$element.on(this._handlers)};n.Defaults={autoHeight:!1,autoHeightClass:"owl-height"},n.prototype.update=function(){var e=this._core._current,i=e+this._core.settings.items,s=this._core.$stage.children().toArray().slice(e,i),n=[],o=0;t.each(s,function(e,i){n.push(t(i).height())}),o=Math.max.apply(null,n),this._core.$stage.parent().height(o).addClass(this._core.settings.autoHeightClass)},n.prototype.destroy=function(){var t,e;for(t in this._handlers)this._core.$element.off(t,this._handlers[t]);for(e in Object.getOwnPropertyNames(this))"function"!=typeof this[e]&&(this[e]=null)},t.fn.owlCarousel.Constructor.Plugins.AutoHeight=n}(window.Zepto||window.jQuery,window,document),function(t,e,i,s){var n=function(e){this._core=e,this._videos={},this._playing=null,this._handlers={"initialized.owl.carousel":t.proxy(function(t){t.namespace&&this._core.register({type:"state",name:"playing",tags:["interacting"]})},this),"resize.owl.carousel":t.proxy(function(t){t.namespace&&this._core.settings.video&&this.isInFullScreen()&&t.preventDefault()},this),"refreshed.owl.carousel":t.proxy(function(t){t.namespace&&this._core.is("resizing")&&this._core.$stage.find(".cloned .owl-video-frame").remove()},this),"changed.owl.carousel":t.proxy(function(t){t.namespace&&"position"===t.property.name&&this._playing&&this.stop()},this),"prepared.owl.carousel":t.proxy(function(e){if(e.namespace){var i=t(e.content).find(".owl-video");i.length&&(i.css("display","none"),this.fetch(i,t(e.content)))}},this)},this._core.options=t.extend({},n.Defaults,this._core.options),this._core.$element.on(this._handlers),this._core.$element.on("click.owl.video",".owl-video-play-icon",t.proxy(function(t){this.play(t)},this))};n.Defaults={video:!1,videoHeight:!1,videoWidth:!1},n.prototype.fetch=function(t,e){var i=t.attr("data-vimeo-id")?"vimeo":t.attr("data-vzaar-id")?"vzaar":"youtube",s=t.attr("data-vimeo-id")||t.attr("data-youtube-id")||t.attr("data-vzaar-id"),n=t.attr("data-width")||this._core.settings.videoWidth,o=t.attr("data-height")||this._core.settings.videoHeight,r=t.attr("href");if(!r)throw new Error("Missing video URL.");if((s=r.match(/(http:|https:|)\/\/(player.|www.|app.)?(vimeo\.com|youtu(be\.com|\.be|be\.googleapis\.com)|vzaar\.com)\/(video\/|videos\/|embed\/|channels\/.+\/|groups\/.+\/|watch\?v=|v\/)?([A-Za-z0-9._%-]*)(\&\S+)?/))[3].indexOf("youtu")>-1)i="youtube";else if(s[3].indexOf("vimeo")>-1)i="vimeo";else{if(!(s[3].indexOf("vzaar")>-1))throw new Error("Video URL not supported.");i="vzaar"}s=s[6],this._videos[r]={type:i,id:s,width:n,height:o},e.attr("data-video",r),this.thumbnail(t,this._videos[r])},n.prototype.thumbnail=function(e,i){var s,n,o,r=i.width&&i.height?'style="width:'+i.width+"px;height:"+i.height+'px;"':"",a=e.find("img"),h="src",l="",c=this._core.settings,d=function(t){n='<div class="owl-video-play-icon"></div>',s=c.lazyLoad?'<div class="owl-video-tn '+l+'" '+h+'="'+t+'"></div>':'<div class="owl-video-tn" style="opacity:1;background-image:url('+t+')"></div>',e.after(s),e.after(n)};if(e.wrap('<div class="owl-video-wrapper"'+r+"></div>"),this._core.settings.lazyLoad&&(h="data-src",l="owl-lazy"),a.length)return d(a.attr(h)),a.remove(),!1;"youtube"===i.type?(o="//img.youtube.com/vi/"+i.id+"/hqdefault.jpg",d(o)):"vimeo"===i.type?t.ajax({type:"GET",url:"//vimeo.com/api/v2/video/"+i.id+".json",jsonp:"callback",dataType:"jsonp",success:function(t){o=t[0].thumbnail_large,d(o)}}):"vzaar"===i.type&&t.ajax({type:"GET",url:"//vzaar.com/api/videos/"+i.id+".json",jsonp:"callback",dataType:"jsonp",success:function(t){o=t.framegrab_url,d(o)}})},n.prototype.stop=function(){this._core.trigger("stop",null,"video"),this._playing.find(".owl-video-frame").remove(),this._playing.removeClass("owl-video-playing"),this._playing=null,this._core.leave("playing"),this._core.trigger("stopped",null,"video")},n.prototype.play=function(e){var i,s=t(e.target).closest("."+this._core.settings.itemClass),n=this._videos[s.attr("data-video")],o=n.width||"100%",r=n.height||this._core.$stage.height();this._playing||(this._core.enter("playing"),this._core.trigger("play",null,"video"),s=this._core.items(this._core.relative(s.index())),this._core.reset(s.index()),"youtube"===n.type?i='<iframe width="'+o+'" height="'+r+'" src="//www.youtube.com/embed/'+n.id+"?autoplay=1&rel=0&v="+n.id+'" frameborder="0" allowfullscreen></iframe>':"vimeo"===n.type?i='<iframe src="//player.vimeo.com/video/'+n.id+'?autoplay=1" width="'+o+'" height="'+r+'" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen></iframe>':"vzaar"===n.type&&(i='<iframe frameborder="0"height="'+r+'"width="'+o+'" allowfullscreen mozallowfullscreen webkitAllowFullScreen src="//view.vzaar.com/'+n.id+'/player?autoplay=true"></iframe>'),t('<div class="owl-video-frame">'+i+"</div>").insertAfter(s.find(".owl-video")),this._playing=s.addClass("owl-video-playing"))},n.prototype.isInFullScreen=function(){var e=i.fullscreenElement||i.mozFullScreenElement||i.webkitFullscreenElement;return e&&t(e).parent().hasClass("owl-video-frame")},n.prototype.destroy=function(){var t,e;this._core.$element.off("click.owl.video");for(t in this._handlers)this._core.$element.off(t,this._handlers[t]);for(e in Object.getOwnPropertyNames(this))"function"!=typeof this[e]&&(this[e]=null)},t.fn.owlCarousel.Constructor.Plugins.Video=n}(window.Zepto||window.jQuery,window,document),function(t,e,i,s){var n=function(e){this.core=e,this.core.options=t.extend({},n.Defaults,this.core.options),this.swapping=!0,this.previous=void 0,this.next=void 0,this.handlers={"change.owl.carousel":t.proxy(function(t){t.namespace&&"position"==t.property.name&&(this.previous=this.core.current(),this.next=t.property.value)},this),"drag.owl.carousel dragged.owl.carousel translated.owl.carousel":t.proxy(function(t){t.namespace&&(this.swapping="translated"==t.type)},this),"translate.owl.carousel":t.proxy(function(t){t.namespace&&this.swapping&&(this.core.options.animateOut||this.core.options.animateIn)&&this.swap()},this)},this.core.$element.on(this.handlers)};n.Defaults={animateOut:!1,animateIn:!1},n.prototype.swap=function(){if(1===this.core.settings.items&&t.support.animation&&t.support.transition){this.core.speed(0);var e,i=t.proxy(this.clear,this),s=this.core.$stage.children().eq(this.previous),n=this.core.$stage.children().eq(this.next),o=this.core.settings.animateIn,r=this.core.settings.animateOut;this.core.current()!==this.previous&&(r&&(e=this.core.coordinates(this.previous)-this.core.coordinates(this.next),s.one(t.support.animation.end,i).css({left:e+"px"}).addClass("animated owl-animated-out").addClass(r)),o&&n.one(t.support.animation.end,i).addClass("animated owl-animated-in").addClass(o))}},n.prototype.clear=function(e){t(e.target).css({left:""}).removeClass("animated owl-animated-out owl-animated-in").removeClass(this.core.settings.animateIn).removeClass(this.core.settings.animateOut),this.core.onTransitionEnd()},n.prototype.destroy=function(){var t,e;for(t in this.handlers)this.core.$element.off(t,this.handlers[t]);for(e in Object.getOwnPropertyNames(this))"function"!=typeof this[e]&&(this[e]=null)},t.fn.owlCarousel.Constructor.Plugins.Animate=n}(window.Zepto||window.jQuery,window,document),function(t,e,i,s){var n=function(e){this._core=e,this._timeout=null,this._paused=!1,this._handlers={"changed.owl.carousel":t.proxy(function(t){t.namespace&&"settings"===t.property.name?this._core.settings.autoplay?this.play():this.stop():t.namespace&&"position"===t.property.name&&this._core.settings.autoplay&&this._setAutoPlayInterval()},this),"initialized.owl.carousel":t.proxy(function(t){t.namespace&&this._core.settings.autoplay&&this.play()},this),"play.owl.autoplay":t.proxy(function(t,e,i){t.namespace&&this.play(e,i)},this),"stop.owl.autoplay":t.proxy(function(t){t.namespace&&this.stop()},this),"mouseover.owl.autoplay":t.proxy(function(){this._core.settings.autoplayHoverPause&&this._core.is("rotating")&&this.pause()},this),"mouseleave.owl.autoplay":t.proxy(function(){this._core.settings.autoplayHoverPause&&this._core.is("rotating")&&this.play()},this),"touchstart.owl.core":t.proxy(function(){this._core.settings.autoplayHoverPause&&this._core.is("rotating")&&this.pause()},this),"touchend.owl.core":t.proxy(function(){this._core.settings.autoplayHoverPause&&this.play()},this)},this._core.$element.on(this._handlers),this._core.options=t.extend({},n.Defaults,this._core.options)};n.Defaults={autoplay:!1,autoplayTimeout:5e3,autoplayHoverPause:!1,autoplaySpeed:!1},n.prototype.play=function(t,e){this._paused=!1,this._core.is("rotating")||(this._core.enter("rotating"),this._setAutoPlayInterval())},n.prototype._getNextTimeout=function(s,n){return this._timeout&&e.clearTimeout(this._timeout),e.setTimeout(t.proxy(function(){this._paused||this._core.is("busy")||this._core.is("interacting")||i.hidden||this._core.next(n||this._core.settings.autoplaySpeed)},this),s||this._core.settings.autoplayTimeout)},n.prototype._setAutoPlayInterval=function(){this._timeout=this._getNextTimeout()},n.prototype.stop=function(){this._core.is("rotating")&&(e.clearTimeout(this._timeout),this._core.leave("rotating"))},n.prototype.pause=function(){this._core.is("rotating")&&(this._paused=!0)},n.prototype.destroy=function(){var t,e;this.stop();for(t in this._handlers)this._core.$element.off(t,this._handlers[t]);for(e in Object.getOwnPropertyNames(this))"function"!=typeof this[e]&&(this[e]=null)},t.fn.owlCarousel.Constructor.Plugins.autoplay=n}(window.Zepto||window.jQuery,window,document),function(t,e,i,s){"use strict";var n=function(e){this._core=e,this._initialized=!1,this._pages=[],this._controls={},this._templates=[],this.$element=this._core.$element,this._overrides={next:this._core.next,prev:this._core.prev,to:this._core.to},this._handlers={"prepared.owl.carousel":t.proxy(function(e){e.namespace&&this._core.settings.dotsData&&this._templates.push('<div class="'+this._core.settings.dotClass+'">'+t(e.content).find("[data-dot]").addBack("[data-dot]").attr("data-dot")+"</div>")},this),"added.owl.carousel":t.proxy(function(t){t.namespace&&this._core.settings.dotsData&&this._templates.splice(t.position,0,this._templates.pop())},this),"remove.owl.carousel":t.proxy(function(t){t.namespace&&this._core.settings.dotsData&&this._templates.splice(t.position,1)},this),"changed.owl.carousel":t.proxy(function(t){t.namespace&&"position"==t.property.name&&this.draw()},this),"initialized.owl.carousel":t.proxy(function(t){t.namespace&&!this._initialized&&(this._core.trigger("initialize",null,"navigation"),this.initialize(),this.update(),this.draw(),this._initialized=!0,this._core.trigger("initialized",null,"navigation"))},this),"refreshed.owl.carousel":t.proxy(function(t){t.namespace&&this._initialized&&(this._core.trigger("refresh",null,"navigation"),this.update(),this.draw(),this._core.trigger("refreshed",null,"navigation"))},this)},this._core.options=t.extend({},n.Defaults,this._core.options),this.$element.on(this._handlers)};n.Defaults={nav:!1,navText:["",""],navSpeed:!1,navElement:"div",navContainer:!1,navContainerClass:"owl-nav",navClass:["owl-prev","owl-next"],slideBy:1,dotClass:"owl-dot",dotsClass:"owl-dots",dots:!0,dotsEach:!1,dotsData:!1,dotsSpeed:!1,dotsContainer:!1},n.prototype.initialize=function(){var e,i=this._core.settings;this._controls.$relative=(i.navContainer?t(i.navContainer):t("<div>").addClass(i.navContainerClass).appendTo(this.$element)).addClass("disabled"),this._controls.$previous=t("<"+i.navElement+">").addClass(i.navClass[0]).html(i.navText[0]).prependTo(this._controls.$relative).on("click",t.proxy(function(t){this.prev(i.navSpeed)},this)),this._controls.$next=t("<"+i.navElement+">").addClass(i.navClass[1]).html(i.navText[1]).appendTo(this._controls.$relative).on("click",t.proxy(function(t){this.next(i.navSpeed)},this)),i.dotsData||(this._templates=[t("<div>").addClass(i.dotClass).append(t("<span>")).prop("outerHTML")]),this._controls.$absolute=(i.dotsContainer?t(i.dotsContainer):t("<div>").addClass(i.dotsClass).appendTo(this.$element)).addClass("disabled"),this._controls.$absolute.on("click","div",t.proxy(function(e){var s=t(e.target).parent().is(this._controls.$absolute)?t(e.target).index():t(e.target).parent().index();e.preventDefault(),this.to(s,i.dotsSpeed)},this));for(e in this._overrides)this._core[e]=t.proxy(this[e],this)},n.prototype.destroy=function(){var t,e,i,s;for(t in this._handlers)this.$element.off(t,this._handlers[t]);for(e in this._controls)this._controls[e].remove();for(s in this.overides)this._core[s]=this._overrides[s];for(i in Object.getOwnPropertyNames(this))"function"!=typeof this[i]&&(this[i]=null)},n.prototype.update=function(){var t,e,i=this._core.clones().length/2,s=i+this._core.items().length,n=this._core.maximum(!0),o=this._core.settings,r=o.center||o.autoWidth||o.dotsData?1:o.dotsEach||o.items;if("page"!==o.slideBy&&(o.slideBy=Math.min(o.slideBy,o.items)),o.dots||"page"==o.slideBy)for(this._pages=[],t=i,e=0,0;t<s;t++){if(e>=r||0===e){if(this._pages.push({start:Math.min(n,t-i),end:t-i+r-1}),Math.min(n,t-i)===n)break;e=0,0}e+=this._core.mergers(this._core.relative(t))}},n.prototype.draw=function(){var e,i=this._core.settings,s=this._core.items().length<=i.items,n=this._core.relative(this._core.current()),o=i.loop||i.rewind;this._controls.$relative.toggleClass("disabled",!i.nav||s),i.nav&&(this._controls.$previous.toggleClass("disabled",!o&&n<=this._core.minimum(!0)),this._controls.$next.toggleClass("disabled",!o&&n>=this._core.maximum(!0))),this._controls.$absolute.toggleClass("disabled",!i.dots||s),i.dots&&(e=this._pages.length-this._controls.$absolute.children().length,i.dotsData&&0!==e?this._controls.$absolute.html(this._templates.join("")):e>0?this._controls.$absolute.append(new Array(e+1).join(this._templates[0])):e<0&&this._controls.$absolute.children().slice(e).remove(),this._controls.$absolute.find(".active").removeClass("active"),this._controls.$absolute.children().eq(t.inArray(this.current(),this._pages)).addClass("active"))},n.prototype.onTrigger=function(e){var i=this._core.settings;e.page={index:t.inArray(this.current(),this._pages),count:this._pages.length,size:i&&(i.center||i.autoWidth||i.dotsData?1:i.dotsEach||i.items)}},n.prototype.current=function(){var e=this._core.relative(this._core.current());return t.grep(this._pages,t.proxy(function(t,i){return t.start<=e&&t.end>=e},this)).pop()},n.prototype.getPosition=function(e){var i,s,n=this._core.settings;return"page"==n.slideBy?(i=t.inArray(this.current(),this._pages),s=this._pages.length,e?++i:--i,i=this._pages[(i%s+s)%s].start):(i=this._core.relative(this._core.current()),s=this._core.items().length,e?i+=n.slideBy:i-=n.slideBy),i},n.prototype.next=function(e){t.proxy(this._overrides.to,this._core)(this.getPosition(!0),e)},n.prototype.prev=function(e){t.proxy(this._overrides.to,this._core)(this.getPosition(!1),e)},n.prototype.to=function(e,i,s){var n;!s&&this._pages.length?(n=this._pages.length,t.proxy(this._overrides.to,this._core)(this._pages[(e%n+n)%n].start,i)):t.proxy(this._overrides.to,this._core)(e,i)},t.fn.owlCarousel.Constructor.Plugins.Navigation=n}(window.Zepto||window.jQuery,window,document),function(t,e,i,s){"use strict";var n=function(i){this._core=i,this._hashes={},this.$element=this._core.$element,this._handlers={"initialized.owl.carousel":t.proxy(function(i){i.namespace&&"URLHash"===this._core.settings.startPosition&&t(e).trigger("hashchange.owl.navigation")},this),"prepared.owl.carousel":t.proxy(function(e){if(e.namespace){var i=t(e.content).find("[data-hash]").addBack("[data-hash]").attr("data-hash");if(!i)return;this._hashes[i]=e.content}},this),"changed.owl.carousel":t.proxy(function(i){if(i.namespace&&"position"===i.property.name){var s=this._core.items(this._core.relative(this._core.current())),n=t.map(this._hashes,function(t,e){return t===s?e:null}).join();if(!n||e.location.hash.slice(1)===n)return;e.location.hash=n}},this)},this._core.options=t.extend({},n.Defaults,this._core.options),this.$element.on(this._handlers),t(e).on("hashchange.owl.navigation",t.proxy(function(t){var i=e.location.hash.substring(1),s=this._core.$stage.children(),n=this._hashes[i]&&s.index(this._hashes[i]);void 0!==n&&n!==this._core.current()&&this._core.to(this._core.relative(n),!1,!0)},this))};n.Defaults={URLhashListener:!1},n.prototype.destroy=function(){var i,s;t(e).off("hashchange.owl.navigation");for(i in this._handlers)this._core.$element.off(i,this._handlers[i]);for(s in Object.getOwnPropertyNames(this))"function"!=typeof this[s]&&(this[s]=null)},t.fn.owlCarousel.Constructor.Plugins.Hash=n}(window.Zepto||window.jQuery,window,document),function(t,e,i,s){function n(e,i){var n=!1,o=e.charAt(0).toUpperCase()+e.slice(1);return t.each((e+" "+a.join(o+" ")+o).split(" "),function(t,e){if(r[e]!==s)return n=!i||e,!1}),n}function o(t){return n(t,!0)}var r=t("<support>").get(0).style,a="Webkit Moz O ms".split(" "),h={end:{WebkitTransition:"webkitTransitionEnd",MozTransition:"transitionend",OTransition:"oTransitionEnd",transition:"transitionend"}},l={end:{WebkitAnimation:"webkitAnimationEnd",MozAnimation:"animationend",OAnimation:"oAnimationEnd",animation:"animationend"}},c=function(){return!!n("transform")},d=function(){return!!n("perspective")},p=function(){return!!n("animation")};(function(){return!!n("transition")})()&&(t.support.transition=new String(o("transition")),t.support.transition.end=h.end[t.support.transition]),p()&&(t.support.animation=new String(o("animation")),t.support.animation.end=l.end[t.support.animation]),c()&&(t.support.transform=new String(o("transform")),t.support.transform3d=d())}(window.Zepto||window.jQuery,window,document),$(document).ready(function(){$.support.placeholder="placeholder"in document.createElement("input"),$.support.placeholder&&($(".form-label").each(function(){$(this).addClass("js-hide-label")}),$(".form-group").find("input, textarea").on("keyup blur focus",function(t){var e=$(this),i=e.parent().find("label");"keyup"==t.type?""==e.val()?i.addClass("js-hide-label"):i.removeClass("js-hide-label"):"blur"==t.type?""==e.val()?i.addClass("js-hide-label"):i.removeClass("js-hide-label").addClass("js-unhighlight-label"):"focus"==t.type&&""!==e.val()&&i.removeClass("js-unhighlight-label")}))}),$(".toggle").on("click",function(){$(".container").stop().addClass("active")}),$(".close").on("click",function(){$(".container").stop().removeClass("active")}),$(document).ready(function(){$(".owl-carousel").owlCarousel({loop:!0,margin:0,navSpeed:500,nav:!0,items:1})}),function(){var t=function(t,e){var i=(e=e||document).querySelectorAll(t);return[].slice.call(i)};window.fncSlider=function(e,i){t(e).forEach(function(e){!function(e,i){function s(){e.querySelector(".m--previous-slide").classList.remove("m--active-slide","m--previous-slide"),e.querySelector(".m--previous-nav-bg").classList.remove("m--active-nav-bg","m--previous-nav-bg"),h.classList.remove("m--before-sliding"),l.classList.remove("m--nav-bg-before"),c.classList.remove("m--prev-control"),c.classList.add("m--reset-progress"),c.offsetTop,c.classList.remove("m--reset-progress"),y=!1,e.offsetTop,C&&!b&&r()}function n(t){y||(y=!0,window.clearTimeout(a),_=t,(c=e.querySelector(".m--active-control")).classList.remove("m--active-control"),c.classList.add("m--prev-control"),e.querySelector(d+"nav__control-"+t).classList.add("m--active-control"),h=e.querySelector(d+"slide-"+t),l=e.querySelector(d+"nav__bg-"+t),e.querySelector(".m--active-slide").classList.add("m--previous-slide"),e.querySelector(".m--active-nav-bg").classList.add("m--previous-nav-bg"),h.classList.add("m--before-sliding"),l.classList.add("m--nav-bg-before"),h.offsetTop,h.classList.add("m--active-slide"),l.classList.add("m--active-nav-bg"),setTimeout(s,w+x))}function o(){y||this.classList.contains("m--active-control")||(i.blockASafterClick&&(b=!0,e.classList.add("m--autosliding-blocked")),n(+this.getAttribute("data-slide")))}function r(){window.clearTimeout(a);var t=+i.autoSlidingDelay||$;++_>v&&(_=1),a=setTimeout(function(){n(_)},t)}var a,h,l,c,d=".fnc-",p=(e=e).querySelector(d+"slider__slides"),u=t(d+"slide",e),g=t(d+"nav__control",e),m=t(d+"nav__bg",e),f=t(d+"nav__control-progress",e),v=u.length,_=1,y=!1,w=1e3*+parseFloat(getComputedStyle(p)["transition-duration"]),x=1e3*+parseFloat(getComputedStyle(p)["transition-delay"]),C=!1,$=5e3,b=!1;if(u.forEach(function(t,e){t.classList.add("fnc-slide-"+(e+1))}),g.forEach(function(t,e){t.setAttribute("data-slide",e+1),t.classList.add("fnc-nav__control-"+(e+1))}),m.forEach(function(t,e){t.classList.add("fnc-nav__bg-"+(e+1))}),g.forEach(function(t){t.addEventListener("click",o)}),i.autoSliding||+i.autoSlidingDelay>0){if(!1===i.autoSliding)return;C=!0,r(),e.classList.add("m--with-autosliding"),e.offsetTop;var z=+i.autoSlidingDelay||$;z+=x+w,f.forEach(function(t){t.style.transition="transform "+z/1e3+"s"})}e.querySelector(".fnc-nav__control:first-child").classList.add("m--active-control")}(e,i)})}}(),fncSlider(".example-slider",{autoSlidingDelay:4e3});var $demoCont=document.querySelector(".demo-cont");[].slice.call(document.querySelectorAll(".fnc-slide__action-btn")).forEach(function(t){t.addEventListener("click",function(){$demoCont.classList.toggle("credits-active")})}),document.querySelector(".demo-cont__credits-close").addEventListener("click",function(){$demoCont.classList.remove("credits-active")}),document.querySelector(".js-activate-global-blending").addEventListener("click",function(){document.querySelector(".example-slider").classList.toggle("m--global-blending-active")});
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1haW4uanMiXSwibmFtZXMiOlsibXlNYXAiLCJteUNlbnRlciIsImdvb2dsZSIsIm1hcHMiLCJMYXRMbmciLCJtYXBPcHRpb25zIiwiY2VudGVyIiwiem9vbSIsInNjcm9sbHdoZWVsIiwiZHJhZ2dhYmxlIiwibWFwVHlwZUlkIiwiTWFwVHlwZUlkIiwiUk9BRE1BUCIsIm1hcCIsIk1hcCIsImRvY3VtZW50IiwiZ2V0RWxlbWVudEJ5SWQiLCJNYXJrZXIiLCJwb3NpdGlvbiIsInNldE1hcCIsIiQiLCJ3aW5kb3ciLCJ1bmRlZmluZWQiLCJPd2wiLCJlbGVtZW50Iiwib3B0aW9ucyIsInRoaXMiLCJzZXR0aW5ncyIsImV4dGVuZCIsIkRlZmF1bHRzIiwiJGVsZW1lbnQiLCJfaGFuZGxlcnMiLCJfcGx1Z2lucyIsIl9zdXByZXNzIiwiX2N1cnJlbnQiLCJfc3BlZWQiLCJfY29vcmRpbmF0ZXMiLCJfYnJlYWtwb2ludCIsIl93aWR0aCIsIl9pdGVtcyIsIl9jbG9uZXMiLCJfbWVyZ2VycyIsIl93aWR0aHMiLCJfaW52YWxpZGF0ZWQiLCJfcGlwZSIsIl9kcmFnIiwidGltZSIsInRhcmdldCIsInBvaW50ZXIiLCJzdGFnZSIsInN0YXJ0IiwiY3VycmVudCIsImRpcmVjdGlvbiIsIl9zdGF0ZXMiLCJ0YWdzIiwiaW5pdGlhbGl6aW5nIiwiYW5pbWF0aW5nIiwiZHJhZ2dpbmciLCJlYWNoIiwicHJveHkiLCJpIiwiaGFuZGxlciIsIlBsdWdpbnMiLCJrZXkiLCJwbHVnaW4iLCJjaGFyQXQiLCJ0b0xvd2VyQ2FzZSIsInNsaWNlIiwiV29ya2VycyIsInByaW9yaXR5Iiwid29ya2VyIiwicHVzaCIsImZpbHRlciIsInJ1biIsInNldHVwIiwiaW5pdGlhbGl6ZSIsIml0ZW1zIiwibG9vcCIsInJld2luZCIsIm1vdXNlRHJhZyIsInRvdWNoRHJhZyIsInB1bGxEcmFnIiwiZnJlZURyYWciLCJtYXJnaW4iLCJzdGFnZVBhZGRpbmciLCJtZXJnZSIsIm1lcmdlRml0IiwiYXV0b1dpZHRoIiwic3RhcnRQb3NpdGlvbiIsInJ0bCIsInNtYXJ0U3BlZWQiLCJmbHVpZFNwZWVkIiwiZHJhZ0VuZFNwZWVkIiwicmVzcG9uc2l2ZSIsInJlc3BvbnNpdmVSZWZyZXNoUmF0ZSIsInJlc3BvbnNpdmVCYXNlRWxlbWVudCIsImZhbGxiYWNrRWFzaW5nIiwiaW5mbyIsIm5lc3RlZEl0ZW1TZWxlY3RvciIsIml0ZW1FbGVtZW50Iiwic3RhZ2VFbGVtZW50IiwicmVmcmVzaENsYXNzIiwibG9hZGVkQ2xhc3MiLCJsb2FkaW5nQ2xhc3MiLCJydGxDbGFzcyIsInJlc3BvbnNpdmVDbGFzcyIsImRyYWdDbGFzcyIsIml0ZW1DbGFzcyIsInN0YWdlQ2xhc3MiLCJzdGFnZU91dGVyQ2xhc3MiLCJncmFiQ2xhc3MiLCJXaWR0aCIsIkRlZmF1bHQiLCJJbm5lciIsIk91dGVyIiwiVHlwZSIsIkV2ZW50IiwiU3RhdGUiLCJ3aWR0aCIsImNhY2hlIiwicmVsYXRpdmUiLCIkc3RhZ2UiLCJjaGlsZHJlbiIsInJlbW92ZSIsImdyaWQiLCJjc3MiLCJtYXJnaW4tbGVmdCIsIm1hcmdpbi1yaWdodCIsInRvRml4ZWQiLCJpdGVyYXRvciIsImxlbmd0aCIsIndpZHRocyIsIk1hdGgiLCJtaW4iLCJjbG9uZXMiLCJ2aWV3IiwibWF4Iiwic2l6ZSIsImNlaWwiLCJyZXBlYXQiLCJhcHBlbmQiLCJwcmVwZW5kIiwibm9ybWFsaXplIiwib3V0ZXJIVE1MIiwiYWRkQ2xhc3MiLCJhcHBlbmRUbyIsInByZXBlbmRUbyIsInByZXZpb3VzIiwiY29vcmRpbmF0ZXMiLCJwYWRkaW5nIiwiYWJzIiwicGFkZGluZy1sZWZ0IiwicGFkZGluZy1yaWdodCIsImVxIiwicmVtb3ZlQXR0ciIsImluZGV4IiwibWluaW11bSIsIm1heGltdW0iLCJyZXNldCIsImFuaW1hdGUiLCJpbm5lciIsIm91dGVyIiwibiIsImJlZ2luIiwiZW5kIiwibWF0Y2hlcyIsIm9wIiwicmVtb3ZlQ2xhc3MiLCJqb2luIiwicHJvdG90eXBlIiwiZW50ZXIiLCJ0cmlnZ2VyIiwidG9nZ2xlQ2xhc3MiLCJpcyIsImltZ3MiLCJuZXN0ZWRTZWxlY3RvciIsImZpbmQiLCJwcmVsb2FkQXV0b1dpZHRoSW1hZ2VzIiwid3JhcCIsInBhcmVudCIsInJlcGxhY2UiLCJub3QiLCJyZWZyZXNoIiwiaW52YWxpZGF0ZSIsInJlZ2lzdGVyRXZlbnRIYW5kbGVycyIsImxlYXZlIiwidmlld3BvcnQiLCJvdmVyd3JpdGVzIiwibWF0Y2giLCJicmVha3BvaW50IiwiTnVtYmVyIiwiYXR0ciIsIlJlZ0V4cCIsInByb3BlcnR5IiwibmFtZSIsInZhbHVlIiwib3B0aW9uc0xvZ2ljIiwicHJlcGFyZSIsIml0ZW0iLCJldmVudCIsImNvbnRlbnQiLCJkYXRhIiwidXBkYXRlIiwicCIsImFsbCIsImdyZXAiLCJkaW1lbnNpb24iLCJvblRocm90dGxlZFJlc2l6ZSIsImNsZWFyVGltZW91dCIsInJlc2l6ZVRpbWVyIiwic2V0VGltZW91dCIsIm9uUmVzaXplIiwiaXNEZWZhdWx0UHJldmVudGVkIiwic3VwcG9ydCIsInRyYW5zaXRpb24iLCJvbiIsIm9uVHJhbnNpdGlvbkVuZCIsIm9uRHJhZ1N0YXJ0Iiwib25EcmFnRW5kIiwid2hpY2giLCJ0cmFuc2Zvcm0iLCJ4Iiwic3BsaXQiLCJ5IiwibGVmdCIsInRvcCIsInN0b3AiLCJ0eXBlIiwic3BlZWQiLCJEYXRlIiwiZ2V0VGltZSIsIm9uZSIsImRlbHRhIiwiZGlmZmVyZW5jZSIsIm9uRHJhZ01vdmUiLCJwcmV2ZW50RGVmYXVsdCIsInB1bGwiLCJvZmYiLCJjbG9zZXN0IiwiY29vcmRpbmF0ZSIsInRyYW5zZm9ybTNkIiwic3RhdGUiLCJwYXJ0IiwidiIsInN1cHByZXNzIiwicmVsZWFzZSIsIm0iLCJpc051bWVyaWMiLCJyZWNpcHJvY2FsSXRlbXNXaWR0aCIsImVsZW1lbnRXaWR0aCIsIm1lcmdlcnMiLCJvZGQiLCJldmVuIiwibXVsdGlwbGllciIsIm5ld1Bvc2l0aW9uIiwiZHVyYXRpb24iLCJmcm9tIiwidG8iLCJmYWN0b3IiLCJyZXZlcnQiLCJkaXN0YW5jZSIsIm5leHQiLCJwcmV2Iiwic3RvcFByb3BhZ2F0aW9uIiwic3JjRWxlbWVudCIsIm9yaWdpbmFsVGFyZ2V0IiwiZ2V0IiwiaW5uZXJXaWR0aCIsImRvY3VtZW50RWxlbWVudCIsImNsaWVudFdpZHRoIiwiY29uc29sZSIsIndhcm4iLCJlbXB0eSIsImpRdWVyeSIsIm5vZGVUeXBlIiwiYWRkQmFjayIsImFkZCIsImFmdGVyIiwiYmVmb3JlIiwic3BsaWNlIiwiaW1hZ2VzIiwiSW1hZ2UiLCJlIiwic3JjIiwiZGVzdHJveSIsInVud3JhcCIsImNvbnRlbnRzIiwicmVtb3ZlRGF0YSIsImEiLCJvIiwiYiIsImxpc3RlbmVyIiwiY2FwdHVyZSIsImFkZEV2ZW50TGlzdGVuZXIiLCJhdHRhY2hFdmVudCIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJkZXRhY2hFdmVudCIsIm5hbWVzcGFjZSIsInN0YXR1cyIsImNvdW50IiwiY2FtZWxDYXNlIiwicmVsYXRlZFRhcmdldCIsIm9uVHJpZ2dlciIsInJlZ2lzdGVyIiwiY2FsbCIsImNvbmNhdCIsIm9iamVjdCIsInNwZWNpYWwiLCJvd2wiLCJfZGVmYXVsdCIsImFwcGx5IiwiaW5kZXhPZiIsImFyZ3VtZW50cyIsInRhZyIsImluQXJyYXkiLCJldmVudHMiLCJyZXN1bHQiLCJvcmlnaW5hbEV2ZW50IiwidG91Y2hlcyIsImNoYW5nZWRUb3VjaGVzIiwicGFnZVgiLCJwYWdlWSIsImNsaWVudFgiLCJjbGllbnRZIiwibnVtYmVyIiwiaXNOYU4iLCJwYXJzZUZsb2F0IiwiZmlyc3QiLCJzZWNvbmQiLCJmbiIsIm93bENhcm91c2VsIiwib3B0aW9uIiwiYXJncyIsIkFycmF5IiwiJHRoaXMiLCJDb25zdHJ1Y3RvciIsIlplcHRvIiwiQXV0b1JlZnJlc2giLCJjYXJvdXNlbCIsIl9jb3JlIiwiX2ludGVydmFsIiwiX3Zpc2libGUiLCJpbml0aWFsaXplZC5vd2wuY2Fyb3VzZWwiLCJhdXRvUmVmcmVzaCIsIndhdGNoIiwiYXV0b1JlZnJlc2hJbnRlcnZhbCIsInNldEludGVydmFsIiwiY2xlYXJJbnRlcnZhbCIsIk9iamVjdCIsImdldE93blByb3BlcnR5TmFtZXMiLCJMYXp5IiwiX2xvYWRlZCIsImluaXRpYWxpemVkLm93bC5jYXJvdXNlbCBjaGFuZ2Uub3dsLmNhcm91c2VsIHJlc2l6ZWQub3dsLmNhcm91c2VsIiwibGF6eUxvYWQiLCJsb2FkIiwiJGl0ZW0iLCIkZWxlbWVudHMiLCJpbWFnZSIsInVybCIsImRldmljZVBpeGVsUmF0aW8iLCJvbmxvYWQiLCJiYWNrZ3JvdW5kLWltYWdlIiwib3BhY2l0eSIsImhhbmRsZXJzIiwiQXV0b0hlaWdodCIsImluaXRpYWxpemVkLm93bC5jYXJvdXNlbCByZWZyZXNoZWQub3dsLmNhcm91c2VsIiwiYXV0b0hlaWdodCIsImNoYW5nZWQub3dsLmNhcm91c2VsIiwibG9hZGVkLm93bC5sYXp5IiwiYXV0b0hlaWdodENsYXNzIiwidmlzaWJsZSIsInRvQXJyYXkiLCJoZWlnaHRzIiwibWF4aGVpZ2h0IiwiaGVpZ2h0IiwiVmlkZW8iLCJfdmlkZW9zIiwiX3BsYXlpbmciLCJyZXNpemUub3dsLmNhcm91c2VsIiwidmlkZW8iLCJpc0luRnVsbFNjcmVlbiIsInJlZnJlc2hlZC5vd2wuY2Fyb3VzZWwiLCJwcmVwYXJlZC5vd2wuY2Fyb3VzZWwiLCJmZXRjaCIsInBsYXkiLCJ2aWRlb0hlaWdodCIsInZpZGVvV2lkdGgiLCJpZCIsIkVycm9yIiwidGh1bWJuYWlsIiwidG5MaW5rIiwiaWNvbiIsInBhdGgiLCJkaW1lbnNpb25zIiwiY3VzdG9tVG4iLCJzcmNUeXBlIiwibGF6eUNsYXNzIiwiY3JlYXRlIiwiYWpheCIsImpzb25wIiwiZGF0YVR5cGUiLCJzdWNjZXNzIiwidGh1bWJuYWlsX2xhcmdlIiwiZnJhbWVncmFiX3VybCIsImh0bWwiLCJpbnNlcnRBZnRlciIsImZ1bGxzY3JlZW5FbGVtZW50IiwibW96RnVsbFNjcmVlbkVsZW1lbnQiLCJ3ZWJraXRGdWxsc2NyZWVuRWxlbWVudCIsImhhc0NsYXNzIiwiQW5pbWF0ZSIsInNjb3BlIiwiY29yZSIsInN3YXBwaW5nIiwiY2hhbmdlLm93bC5jYXJvdXNlbCIsImRyYWcub3dsLmNhcm91c2VsIGRyYWdnZWQub3dsLmNhcm91c2VsIHRyYW5zbGF0ZWQub3dsLmNhcm91c2VsIiwidHJhbnNsYXRlLm93bC5jYXJvdXNlbCIsImFuaW1hdGVPdXQiLCJhbmltYXRlSW4iLCJzd2FwIiwiYW5pbWF0aW9uIiwiY2xlYXIiLCJpbmNvbWluZyIsIm91dGdvaW5nIiwiQXV0b3BsYXkiLCJfdGltZW91dCIsIl9wYXVzZWQiLCJhdXRvcGxheSIsIl9zZXRBdXRvUGxheUludGVydmFsIiwicGxheS5vd2wuYXV0b3BsYXkiLCJ0IiwicyIsInN0b3Aub3dsLmF1dG9wbGF5IiwibW91c2VvdmVyLm93bC5hdXRvcGxheSIsImF1dG9wbGF5SG92ZXJQYXVzZSIsInBhdXNlIiwibW91c2VsZWF2ZS5vd2wuYXV0b3BsYXkiLCJ0b3VjaHN0YXJ0Lm93bC5jb3JlIiwidG91Y2hlbmQub3dsLmNvcmUiLCJhdXRvcGxheVRpbWVvdXQiLCJhdXRvcGxheVNwZWVkIiwidGltZW91dCIsIl9nZXROZXh0VGltZW91dCIsImhpZGRlbiIsIk5hdmlnYXRpb24iLCJfaW5pdGlhbGl6ZWQiLCJfcGFnZXMiLCJfY29udHJvbHMiLCJfdGVtcGxhdGVzIiwiX292ZXJyaWRlcyIsImRvdHNEYXRhIiwiZG90Q2xhc3MiLCJhZGRlZC5vd2wuY2Fyb3VzZWwiLCJwb3AiLCJyZW1vdmUub3dsLmNhcm91c2VsIiwiZHJhdyIsIm5hdiIsIm5hdlRleHQiLCJuYXZTcGVlZCIsIm5hdkVsZW1lbnQiLCJuYXZDb250YWluZXIiLCJuYXZDb250YWluZXJDbGFzcyIsIm5hdkNsYXNzIiwic2xpZGVCeSIsImRvdHNDbGFzcyIsImRvdHMiLCJkb3RzRWFjaCIsImRvdHNTcGVlZCIsImRvdHNDb250YWluZXIiLCJvdmVycmlkZSIsIiRyZWxhdGl2ZSIsIiRwcmV2aW91cyIsIiRuZXh0IiwicHJvcCIsIiRhYnNvbHV0ZSIsImNvbnRyb2wiLCJvdmVyaWRlcyIsImoiLCJsb3dlciIsInVwcGVyIiwiZGlzYWJsZWQiLCJwYWdlIiwiZ2V0UG9zaXRpb24iLCJzdWNjZXNzb3IiLCJzdGFuZGFyZCIsIkhhc2giLCJfaGFzaGVzIiwiaGFzaCIsImxvY2F0aW9uIiwic3Vic3RyaW5nIiwiVVJMaGFzaExpc3RlbmVyIiwidGVzdCIsInByZWZpeGVkIiwidG9VcHBlckNhc2UiLCJwcmVmaXhlcyIsInN0eWxlIiwiV2Via2l0VHJhbnNpdGlvbiIsIk1velRyYW5zaXRpb24iLCJPVHJhbnNpdGlvbiIsIldlYmtpdEFuaW1hdGlvbiIsIk1vekFuaW1hdGlvbiIsIk9BbmltYXRpb24iLCJ0ZXN0cyIsIlN0cmluZyIsInJlYWR5IiwicGxhY2Vob2xkZXIiLCJjcmVhdGVFbGVtZW50IiwiJHBhcmVudCIsInZhbCIsIiQkIiwic2VsZWN0b3IiLCJjb250ZXh0IiwiZWxlbWVudHMiLCJxdWVyeVNlbGVjdG9yQWxsIiwiZm5jU2xpZGVyIiwic2xpZGVyU2VsZWN0b3IiLCJmb3JFYWNoIiwiJHNsaWRlciIsImFmdGVyU2xpZGluZ0hhbmRsZXIiLCJxdWVyeVNlbGVjdG9yIiwiY2xhc3NMaXN0IiwiJGFjdGl2ZVNsaWRlIiwiJGFjdGl2ZUNvbnRyb2xzQmciLCIkcHJldkNvbnRyb2wiLCJvZmZzZXRUb3AiLCJzbGlkaW5nIiwiYXV0b1NsaWRpbmdBY3RpdmUiLCJhdXRvU2xpZGluZ0Jsb2NrZWQiLCJzZXRBdXRvc2xpZGluZ1RPIiwicGVyZm9ybVNsaWRpbmciLCJzbGlkZUlEIiwiYXV0b1NsaWRpbmdUTyIsImN1clNsaWRlIiwicHJlZml4Iiwic2xpZGluZ0FUIiwic2xpZGluZ0RlbGF5IiwiY29udHJvbENsaWNrSGFuZGxlciIsImNvbnRhaW5zIiwiYmxvY2tBU2FmdGVyQ2xpY2siLCJnZXRBdHRyaWJ1dGUiLCJkZWxheSIsImF1dG9TbGlkaW5nRGVsYXkiLCJudW1PZlNsaWRlcyIsIiRzbGlkZXNDb250IiwiJHNsaWRlcyIsIiRjb250cm9scyIsIiRjb250cm9sc0JncyIsIiRwcm9ncmVzc0FTIiwiZ2V0Q29tcHV0ZWRTdHlsZSIsIiRzbGlkZSIsIiRjb250cm9sIiwic2V0QXR0cmlidXRlIiwiJGJnIiwiYXV0b1NsaWRpbmciLCIkcHJvZ3Jlc3MiLCJfZm5jU2xpZGVySW5pdCIsIiRkZW1vQ29udCIsIiRidG4iLCJ0b2dnbGUiXSwibWFwcGluZ3MiOiJBQTZ2R0EsU0FBU0EsUUFFTEMsU0FBUyxJQUFJQyxPQUFPQyxLQUFLQyxPQUFPLFdBQVksV0FDNUMsSUFBSUMsR0FDQUMsT0FBT0wsU0FDUE0sS0FBSyxHQUFJQyxhQUFhLEVBQU9DLFdBQVcsRUFDeENDLFVBQVVSLE9BQU9DLEtBQUtRLFVBQVVDLFNBRWhDQyxFQUFJLElBQUlYLE9BQU9DLEtBQUtXLElBQUlDLFNBQVNDLGVBQWUsYUFBYVgsR0FFcEQsSUFBSUgsT0FBT0MsS0FBS2MsUUFDekJDLFNBQVVqQixXQUVQa0IsT0FBT04sSUFwdkdqQixTQUFVTyxFQUFHQyxFQUFRTixFQUFVTyxHQVM1QixTQUFTQyxFQUFJQyxFQUFTQyxHQU1sQkMsS0FBS0MsU0FBVyxLQU1oQkQsS0FBS0QsUUFBVUwsRUFBRVEsVUFBV0wsRUFBSU0sU0FBVUosR0FNMUNDLEtBQUtJLFNBQVdWLEVBQUVJLEdBTWxCRSxLQUFLSyxhQU1MTCxLQUFLTSxZQU1MTixLQUFLTyxZQU1MUCxLQUFLUSxTQUFXLEtBTWhCUixLQUFLUyxPQUFTLEtBT2RULEtBQUtVLGdCQU9MVixLQUFLVyxZQUFjLEtBS25CWCxLQUFLWSxPQUFTLEtBTWRaLEtBQUthLFVBTUxiLEtBQUtjLFdBT0xkLEtBQUtlLFlBS0xmLEtBQUtnQixXQU1MaEIsS0FBS2lCLGdCQU1MakIsS0FBS2tCLFNBT0xsQixLQUFLbUIsT0FDREMsS0FBTSxLQUNOQyxPQUFRLEtBQ1JDLFFBQVMsS0FDVEMsT0FDSUMsTUFBTyxLQUNQQyxRQUFTLE1BRWJDLFVBQVcsTUFRZjFCLEtBQUsyQixTQUNERixXQUNBRyxNQUNJQyxjQUFrQixRQUNsQkMsV0FBZSxRQUNmQyxVQUFjLGlCQUl0QnJDLEVBQUVzQyxNQUFPLFdBQVkscUJBQXVCdEMsRUFBRXVDLE1BQU0sU0FBU0MsRUFBR0MsR0FDNURuQyxLQUFLSyxVQUFVOEIsR0FBV3pDLEVBQUV1QyxNQUFNakMsS0FBS21DLEdBQVVuQyxPQUNsREEsT0FFSE4sRUFBRXNDLEtBQUtuQyxFQUFJdUMsUUFBUzFDLEVBQUV1QyxNQUFNLFNBQVNJLEVBQUtDLEdBQ3RDdEMsS0FBS00sU0FBUytCLEVBQUlFLE9BQU8sR0FBR0MsY0FBZ0JILEVBQUlJLE1BQU0sSUFDaEQsSUFBSUgsRUFBT3RDLE9BQ2xCQSxPQUVITixFQUFFc0MsS0FBS25DLEVBQUk2QyxRQUFTaEQsRUFBRXVDLE1BQU0sU0FBU1UsRUFBVUMsR0FDM0M1QyxLQUFLa0IsTUFBTTJCLE1BQ1BDLE9BQVVGLEVBQU9FLE9BQ2pCQyxJQUFPckQsRUFBRXVDLE1BQU1XLEVBQU9HLElBQUsvQyxTQUVoQ0EsT0FFSEEsS0FBS2dELFFBQ0xoRCxLQUFLaUQsYUFPVHBELEVBQUlNLFVBQ0ErQyxNQUFPLEVBQ1BDLE1BQU0sRUFDTnZFLFFBQVEsRUFDUndFLFFBQVEsRUFFUkMsV0FBVyxFQUNYQyxXQUFXLEVBQ1hDLFVBQVUsRUFDVkMsVUFBVSxFQUVWQyxPQUFRLEVBQ1JDLGFBQWMsRUFFZEMsT0FBTyxFQUNQQyxVQUFVLEVBQ1ZDLFdBQVcsRUFFWEMsY0FBZSxFQUNmQyxLQUFLLEVBRUxDLFdBQVksSUFDWkMsWUFBWSxFQUNaQyxjQUFjLEVBRWRDLGNBQ0FDLHNCQUF1QixJQUN2QkMsc0JBQXVCMUUsRUFFdkIyRSxlQUFnQixRQUVoQkMsTUFBTSxFQUVOQyxvQkFBb0IsRUFDcEJDLFlBQWEsTUFDYkMsYUFBYyxNQUVkQyxhQUFjLGNBQ2RDLFlBQWEsYUFDYkMsYUFBYyxjQUNkQyxTQUFVLFVBQ1ZDLGdCQUFpQixpQkFDakJDLFVBQVcsV0FDWEMsVUFBVyxXQUNYQyxXQUFZLFlBQ1pDLGdCQUFpQixrQkFDakJDLFVBQVcsWUFTZnZGLEVBQUl3RixPQUNBQyxRQUFTLFVBQ1RDLE1BQU8sUUFDUEMsTUFBTyxTQVNYM0YsRUFBSTRGLE1BQ0FDLE1BQU8sUUFDUEMsTUFBTyxTQU9YOUYsRUFBSXVDLFdBS0p2QyxFQUFJNkMsVUFDQUksUUFBVSxRQUFTLFlBQ25CQyxJQUFLLFdBQ0QvQyxLQUFLWSxPQUFTWixLQUFLSSxTQUFTd0YsV0FHaEM5QyxRQUFVLFFBQVMsUUFBUyxZQUM1QkMsSUFBSyxTQUFTOEMsR0FDVkEsRUFBTXBFLFFBQVV6QixLQUFLYSxRQUFVYixLQUFLYSxPQUFPYixLQUFLOEYsU0FBUzlGLEtBQUtRLGNBR2xFc0MsUUFBVSxRQUFTLFlBQ25CQyxJQUFLLFdBQ0QvQyxLQUFLK0YsT0FBT0MsU0FBUyxXQUFXQyxZQUdwQ25ELFFBQVUsUUFBUyxRQUFTLFlBQzVCQyxJQUFLLFNBQVM4QyxHQUNWLElBQUlwQyxFQUFTekQsS0FBS0MsU0FBU3dELFFBQVUsR0FDakN5QyxHQUFRbEcsS0FBS0MsU0FBUzRELFVBQ3RCRSxFQUFNL0QsS0FBS0MsU0FBUzhELElBQ3BCb0MsR0FDSVAsTUFBUyxPQUNUUSxjQUFlckMsRUFBTU4sRUFBUyxHQUM5QjRDLGVBQWdCdEMsRUFBTSxHQUFLTixJQUdsQ3lDLEdBQVFsRyxLQUFLK0YsT0FBT0MsV0FBV0csSUFBSUEsR0FFcENOLEVBQU1NLElBQU1BLEtBR2hCckQsUUFBVSxRQUFTLFFBQVMsWUFDNUJDLElBQUssU0FBUzhDLEdBQ1YsSUFBSUQsR0FBUzVGLEtBQUs0RixRQUFVNUYsS0FBS0MsU0FBU2lELE9BQU9vRCxRQUFRLEdBQUt0RyxLQUFLQyxTQUFTd0QsT0FDeEVFLEVBQVEsS0FDUjRDLEVBQVd2RyxLQUFLYSxPQUFPMkYsT0FDdkJOLEdBQVFsRyxLQUFLQyxTQUFTNEQsVUFDdEI0QyxLQU9KLElBTEFaLEVBQU0zQyxPQUNGUyxPQUFPLEVBQ1BpQyxNQUFPQSxHQUdKVyxLQUNINUMsRUFBUTNELEtBQUtlLFNBQVN3RixHQUN0QjVDLEVBQVEzRCxLQUFLQyxTQUFTMkQsVUFBWThDLEtBQUtDLElBQUloRCxFQUFPM0QsS0FBS0MsU0FBU2lELFFBQVVTLEVBRTFFa0MsRUFBTTNDLE1BQU1TLE1BQVFBLEVBQVEsR0FBS2tDLEVBQU0zQyxNQUFNUyxNQUU3QzhDLEVBQU9GLEdBQWFMLEVBQXVDTixFQUFRakMsRUFBeEMzRCxLQUFLYSxPQUFPMEYsR0FBVVgsUUFHckQ1RixLQUFLZ0IsUUFBVXlGLEtBR25CM0QsUUFBVSxRQUFTLFlBQ25CQyxJQUFLLFdBQ0QsSUFBSTZELEtBQ0ExRCxFQUFRbEQsS0FBS2EsT0FDYlosRUFBV0QsS0FBS0MsU0FFaEI0RyxFQUFPSCxLQUFLSSxJQUFxQixFQUFqQjdHLEVBQVNpRCxNQUFXLEdBQ3BDNkQsRUFBcUMsRUFBOUJMLEtBQUtNLEtBQUs5RCxFQUFNc0QsT0FBUyxHQUNoQ1MsRUFBU2hILEVBQVNrRCxNQUFRRCxFQUFNc0QsT0FBU3ZHLEVBQVNtRCxPQUFTeUQsRUFBT0gsS0FBS0ksSUFBSUQsRUFBTUUsR0FBUSxFQUN6RkcsRUFBUyxHQUNUQyxFQUFVLEdBSWQsSUFGQUYsR0FBVSxFQUVIQSxLQUVITCxFQUFPL0QsS0FBSzdDLEtBQUtvSCxVQUFVUixFQUFPSixPQUFTLEdBQUcsSUFDOUNVLEdBQWtCaEUsRUFBTTBELEVBQU9BLEVBQU9KLE9BQVMsSUFBSSxHQUFHYSxVQUN0RFQsRUFBTy9ELEtBQUs3QyxLQUFLb0gsVUFBVWxFLEVBQU1zRCxPQUFTLEdBQUtJLEVBQU9KLE9BQVMsR0FBSyxHQUFHLElBQ3ZFVyxFQUFVakUsRUFBTTBELEVBQU9BLEVBQU9KLE9BQVMsSUFBSSxHQUFHYSxVQUFZRixFQUc5RG5ILEtBQUtjLFFBQVU4RixFQUVmbEgsRUFBRXdILEdBQVFJLFNBQVMsVUFBVUMsU0FBU3ZILEtBQUsrRixRQUMzQ3JHLEVBQUV5SCxHQUFTRyxTQUFTLFVBQVVFLFVBQVV4SCxLQUFLK0YsV0FHakRqRCxRQUFVLFFBQVMsUUFBUyxZQUM1QkMsSUFBSyxXQVFELElBUEEsSUFBSWdCLEVBQU0vRCxLQUFLQyxTQUFTOEQsSUFBTSxHQUFLLEVBQy9CZ0QsRUFBTy9HLEtBQUtjLFFBQVEwRixPQUFTeEcsS0FBS2EsT0FBTzJGLE9BQ3pDRCxHQUFZLEVBQ1prQixFQUFXLEVBQ1hoRyxFQUFVLEVBQ1ZpRyxPQUVLbkIsRUFBV1EsR0FDaEJVLEVBQVdDLEVBQVluQixFQUFXLElBQU0sRUFDeEM5RSxFQUFVekIsS0FBS2dCLFFBQVFoQixLQUFLOEYsU0FBU1MsSUFBYXZHLEtBQUtDLFNBQVN3RCxPQUNoRWlFLEVBQVk3RSxLQUFLNEUsRUFBV2hHLEVBQVVzQyxHQUcxQy9ELEtBQUtVLGFBQWVnSCxLQUd4QjVFLFFBQVUsUUFBUyxRQUFTLFlBQzVCQyxJQUFLLFdBQ0QsSUFBSTRFLEVBQVUzSCxLQUFLQyxTQUFTeUQsYUFDeEJnRSxFQUFjMUgsS0FBS1UsYUFDbkJ5RixHQUNJUCxNQUFTYyxLQUFLTSxLQUFLTixLQUFLa0IsSUFBSUYsRUFBWUEsRUFBWWxCLE9BQVMsS0FBaUIsRUFBVm1CLEVBQ3BFRSxlQUFnQkYsR0FBVyxHQUMzQkcsZ0JBQWlCSCxHQUFXLElBR3BDM0gsS0FBSytGLE9BQU9JLElBQUlBLE1BR3BCckQsUUFBVSxRQUFTLFFBQVMsWUFDNUJDLElBQUssU0FBUzhDLEdBQ1YsSUFBSVUsRUFBV3ZHLEtBQUtVLGFBQWE4RixPQUM3Qk4sR0FBUWxHLEtBQUtDLFNBQVM0RCxVQUN0QlgsRUFBUWxELEtBQUsrRixPQUFPQyxXQUV4QixHQUFJRSxHQUFRTCxFQUFNM0MsTUFBTVMsTUFDcEIsS0FBTzRDLEtBQ0hWLEVBQU1NLElBQUlQLE1BQVE1RixLQUFLZ0IsUUFBUWhCLEtBQUs4RixTQUFTUyxJQUM3Q3JELEVBQU02RSxHQUFHeEIsR0FBVUosSUFBSU4sRUFBTU0sVUFFMUJELElBQ1BMLEVBQU1NLElBQUlQLE1BQVFDLEVBQU0zQyxNQUFNMEMsTUFDOUIxQyxFQUFNaUQsSUFBSU4sRUFBTU0sU0FJeEJyRCxRQUFVLFNBQ1ZDLElBQUssV0FDRC9DLEtBQUtVLGFBQWE4RixPQUFTLEdBQUt4RyxLQUFLK0YsT0FBT2lDLFdBQVcsWUFHM0RsRixRQUFVLFFBQVMsUUFBUyxZQUM1QkMsSUFBSyxTQUFTOEMsR0FDVkEsRUFBTXBFLFFBQVVvRSxFQUFNcEUsUUFBVXpCLEtBQUsrRixPQUFPQyxXQUFXaUMsTUFBTXBDLEVBQU1wRSxTQUFXLEVBQzlFb0UsRUFBTXBFLFFBQVVpRixLQUFLSSxJQUFJOUcsS0FBS2tJLFVBQVd4QixLQUFLQyxJQUFJM0csS0FBS21JLFVBQVd0QyxFQUFNcEUsVUFDeEV6QixLQUFLb0ksTUFBTXZDLEVBQU1wRSxZQUdyQnFCLFFBQVUsWUFDVkMsSUFBSyxXQUNEL0MsS0FBS3FJLFFBQVFySSxLQUFLMEgsWUFBWTFILEtBQUtRLGNBR3ZDc0MsUUFBVSxRQUFTLFdBQVksUUFBUyxZQUN4Q0MsSUFBSyxXQUNELElBSUl1RixFQUFPQyxFQUFxQnJHLEVBQUdzRyxFQUovQnpFLEVBQU0vRCxLQUFLQyxTQUFTOEQsSUFBTSxHQUFLLEVBQy9CNEQsRUFBdUMsRUFBN0IzSCxLQUFLQyxTQUFTeUQsYUFDeEIrRSxFQUFRekksS0FBSzBILFlBQVkxSCxLQUFLeUIsV0FBYWtHLEVBQzNDZSxFQUFNRCxFQUFRekksS0FBSzRGLFFBQVU3QixFQUNmNEUsS0FFbEIsSUFBS3pHLEVBQUksRUFBR3NHLEVBQUl4SSxLQUFLVSxhQUFhOEYsT0FBUXRFLEVBQUlzRyxFQUFHdEcsSUFDN0NvRyxFQUFRdEksS0FBS1UsYUFBYXdCLEVBQUksSUFBTSxFQUNwQ3FHLEVBQVE3QixLQUFLa0IsSUFBSTVILEtBQUtVLGFBQWF3QixJQUFNeUYsRUFBVTVELEdBRTlDL0QsS0FBSzRJLEdBQUdOLEVBQU8sS0FBTUcsSUFBV3pJLEtBQUs0SSxHQUFHTixFQUFPLElBQUtJLElBQ2pEMUksS0FBSzRJLEdBQUdMLEVBQU8sSUFBS0UsSUFBVXpJLEtBQUs0SSxHQUFHTCxFQUFPLElBQUtHLEtBQ3REQyxFQUFROUYsS0FBS1gsR0FJckJsQyxLQUFLK0YsT0FBT0MsU0FBUyxXQUFXNkMsWUFBWSxVQUM1QzdJLEtBQUsrRixPQUFPQyxTQUFTLE9BQVMyQyxFQUFRRyxLQUFLLFdBQWEsS0FBS3hCLFNBQVMsVUFFbEV0SCxLQUFLQyxTQUFTckIsU0FDZG9CLEtBQUsrRixPQUFPQyxTQUFTLFdBQVc2QyxZQUFZLFVBQzVDN0ksS0FBSytGLE9BQU9DLFdBQVcrQixHQUFHL0gsS0FBS3lCLFdBQVc2RixTQUFTLGNBUy9EekgsRUFBSWtKLFVBQVU5RixXQUFhLFdBTXZCLEdBTEFqRCxLQUFLZ0osTUFBTSxnQkFDWGhKLEtBQUtpSixRQUFRLGNBRWJqSixLQUFLSSxTQUFTOEksWUFBWWxKLEtBQUtDLFNBQVM2RSxTQUFVOUUsS0FBS0MsU0FBUzhELEtBRTVEL0QsS0FBS0MsU0FBUzRELFlBQWM3RCxLQUFLbUosR0FBRyxlQUFnQixDQUNwRCxJQUFJQyxFQUFNQyxFQUFnQnpELEVBQzFCd0QsRUFBT3BKLEtBQUtJLFNBQVNrSixLQUFLLE9BQzFCRCxFQUFpQnJKLEtBQUtDLFNBQVN1RSxtQkFBcUIsSUFBTXhFLEtBQUtDLFNBQVN1RSxtQkFBcUI1RSxFQUM3RmdHLEVBQVE1RixLQUFLSSxTQUFTNEYsU0FBU3FELEdBQWdCekQsUUFFM0N3RCxFQUFLNUMsUUFBVVosR0FBUyxHQUN4QjVGLEtBQUt1Six1QkFBdUJILEdBSXBDcEosS0FBS0ksU0FBU2tILFNBQVN0SCxLQUFLRCxRQUFROEUsY0FHcEM3RSxLQUFLK0YsT0FBU3JHLEVBQUUsSUFBTU0sS0FBS0MsU0FBU3lFLGFBQWUsV0FBYTFFLEtBQUtDLFNBQVNpRixXQUFhLE9BQ3RGc0UsS0FBSyxlQUFpQnhKLEtBQUtDLFNBQVNrRixnQkFBa0IsT0FHM0RuRixLQUFLSSxTQUFTOEcsT0FBT2xILEtBQUsrRixPQUFPMEQsVUFHakN6SixLQUFLMEosUUFBUTFKLEtBQUtJLFNBQVM0RixXQUFXMkQsSUFBSTNKLEtBQUsrRixPQUFPMEQsV0FHbER6SixLQUFLSSxTQUFTK0ksR0FBRyxZQUVqQm5KLEtBQUs0SixVQUdMNUosS0FBSzZKLFdBQVcsU0FHcEI3SixLQUFLSSxTQUNBeUksWUFBWTdJLEtBQUtELFFBQVE4RSxjQUN6QnlDLFNBQVN0SCxLQUFLRCxRQUFRNkUsYUFHM0I1RSxLQUFLOEosd0JBRUw5SixLQUFLK0osTUFBTSxnQkFDWC9KLEtBQUtpSixRQUFRLGdCQVNqQnBKLEVBQUlrSixVQUFVL0YsTUFBUSxXQUNsQixJQUFJZ0gsRUFBV2hLLEtBQUtnSyxXQUNoQkMsRUFBYWpLLEtBQUtELFFBQVFvRSxXQUMxQitGLEdBQVMsRUFDVGpLLEVBQVcsS0FFVmdLLEdBR0R2SyxFQUFFc0MsS0FBS2lJLEVBQVksU0FBU0UsR0FDcEJBLEdBQWNILEdBQVlHLEVBQWFELElBQ3ZDQSxFQUFRRSxPQUFPRCxNQUtjLG1CQURyQ2xLLEVBQVdQLEVBQUVRLFVBQVdGLEtBQUtELFFBQVNrSyxFQUFXQyxLQUM3QnhHLGVBQ2hCekQsRUFBU3lELGFBQWV6RCxFQUFTeUQsdUJBRTlCekQsRUFBU2tFLFdBR1psRSxFQUFTOEUsaUJBQ1QvRSxLQUFLSSxTQUFTaUssS0FBSyxRQUNmckssS0FBS0ksU0FBU2lLLEtBQUssU0FBU1gsUUFBUSxJQUFJWSxPQUFPLElBQU10SyxLQUFLRCxRQUFRZ0YsZ0JBQWtCLFlBQWEsS0FBTSxLQUFPbUYsS0FqQnRIakssRUFBV1AsRUFBRVEsVUFBV0YsS0FBS0QsU0FzQmpDQyxLQUFLaUosUUFBUSxVQUFZc0IsVUFBWUMsS0FBTSxXQUFZQyxNQUFPeEssS0FDOURELEtBQUtXLFlBQWN1SixFQUNuQmxLLEtBQUtDLFNBQVdBLEVBQ2hCRCxLQUFLNkosV0FBVyxZQUNoQjdKLEtBQUtpSixRQUFRLFdBQWFzQixVQUFZQyxLQUFNLFdBQVlDLE1BQU96SyxLQUFLQyxhQU94RUosRUFBSWtKLFVBQVUyQixhQUFlLFdBQ3JCMUssS0FBS0MsU0FBUzRELFlBQ2Q3RCxLQUFLQyxTQUFTeUQsY0FBZSxFQUM3QjFELEtBQUtDLFNBQVMwRCxPQUFRLElBVTlCOUQsRUFBSWtKLFVBQVU0QixRQUFVLFNBQVNDLEdBQzdCLElBQUlDLEVBQVE3SyxLQUFLaUosUUFBUSxXQUFhNkIsUUFBU0YsSUFTL0MsT0FQS0MsRUFBTUUsT0FDUEYsRUFBTUUsS0FBT3JMLEVBQUUsSUFBTU0sS0FBS0MsU0FBU3dFLFlBQWMsTUFDNUM2QyxTQUFTdEgsS0FBS0QsUUFBUWtGLFdBQVdpQyxPQUFPMEQsSUFHakQ1SyxLQUFLaUosUUFBUSxZQUFjNkIsUUFBU0QsRUFBTUUsT0FFbkNGLEVBQU1FLE1BT2pCbEwsRUFBSWtKLFVBQVVpQyxPQUFTLFdBTW5CLElBTEEsSUFBSTlJLEVBQUksRUFDSnNHLEVBQUl4SSxLQUFLa0IsTUFBTXNGLE9BQ2YxRCxFQUFTcEQsRUFBRXVDLE1BQU0sU0FBU2dKLEdBQUssT0FBT2pMLEtBQUtpTCxJQUFNakwsS0FBS2lCLGNBQ3RENEUsS0FFRzNELEVBQUlzRyxJQUNIeEksS0FBS2lCLGFBQWFpSyxLQUFPeEwsRUFBRXlMLEtBQUtuTCxLQUFLa0IsTUFBTWdCLEdBQUdZLE9BQVFBLEdBQVEwRCxPQUFTLElBQ3ZFeEcsS0FBS2tCLE1BQU1nQixHQUFHYSxJQUFJOEMsR0FFdEIzRCxJQUdKbEMsS0FBS2lCLGlCQUVKakIsS0FBS21KLEdBQUcsVUFBWW5KLEtBQUtnSixNQUFNLFVBU3BDbkosRUFBSWtKLFVBQVVuRCxNQUFRLFNBQVN3RixHQUUzQixPQURBQSxFQUFZQSxHQUFhdkwsRUFBSXdGLE1BQU1DLFNBRS9CLEtBQUt6RixFQUFJd0YsTUFBTUUsTUFDZixLQUFLMUYsRUFBSXdGLE1BQU1HLE1BQ1gsT0FBT3hGLEtBQUtZLE9BQ2hCLFFBQ0ksT0FBT1osS0FBS1ksT0FBc0MsRUFBN0JaLEtBQUtDLFNBQVN5RCxhQUFtQjFELEtBQUtDLFNBQVN3RCxTQVFoRjVELEVBQUlrSixVQUFVYSxRQUFVLFdBQ3BCNUosS0FBS2dKLE1BQU0sY0FDWGhKLEtBQUtpSixRQUFRLFdBRWJqSixLQUFLZ0QsUUFFTGhELEtBQUswSyxlQUVMMUssS0FBS0ksU0FBU2tILFNBQVN0SCxLQUFLRCxRQUFRNEUsY0FFcEMzRSxLQUFLZ0wsU0FFTGhMLEtBQUtJLFNBQVN5SSxZQUFZN0ksS0FBS0QsUUFBUTRFLGNBRXZDM0UsS0FBSytKLE1BQU0sY0FDWC9KLEtBQUtpSixRQUFRLGNBT2pCcEosRUFBSWtKLFVBQVVzQyxrQkFBb0IsV0FDOUIxTCxFQUFPMkwsYUFBYXRMLEtBQUt1TCxhQUN6QnZMLEtBQUt1TCxZQUFjNUwsRUFBTzZMLFdBQVd4TCxLQUFLSyxVQUFVb0wsU0FBVXpMLEtBQUtDLFNBQVNtRSx3QkFPaEZ2RSxFQUFJa0osVUFBVTBDLFNBQVcsV0FDckIsUUFBS3pMLEtBQUthLE9BQU8yRixTQUlieEcsS0FBS1ksU0FBV1osS0FBS0ksU0FBU3dGLFlBSTdCNUYsS0FBS0ksU0FBUytJLEdBQUcsY0FJdEJuSixLQUFLZ0osTUFBTSxZQUVQaEosS0FBS2lKLFFBQVEsVUFBVXlDLHNCQUN2QjFMLEtBQUsrSixNQUFNLGFBQ0osSUFHWC9KLEtBQUs2SixXQUFXLFNBRWhCN0osS0FBSzRKLFVBRUw1SixLQUFLK0osTUFBTSxpQkFDWC9KLEtBQUtpSixRQUFRLGdCQVNqQnBKLEVBQUlrSixVQUFVZSxzQkFBd0IsV0FDOUJwSyxFQUFFaU0sUUFBUUMsWUFDVjVMLEtBQUsrRixPQUFPOEYsR0FBR25NLEVBQUVpTSxRQUFRQyxXQUFXbEQsSUFBTSxZQUFhaEosRUFBRXVDLE1BQU1qQyxLQUFLOEwsZ0JBQWlCOUwsUUFHeEQsSUFBN0JBLEtBQUtDLFNBQVNrRSxZQUNkbkUsS0FBSzZMLEdBQUdsTSxFQUFRLFNBQVVLLEtBQUtLLFVBQVVnTCxtQkFHekNyTCxLQUFLQyxTQUFTb0QsWUFDZHJELEtBQUtJLFNBQVNrSCxTQUFTdEgsS0FBS0QsUUFBUWlGLFdBQ3BDaEYsS0FBSytGLE9BQU84RixHQUFHLHFCQUFzQm5NLEVBQUV1QyxNQUFNakMsS0FBSytMLFlBQWEvTCxPQUMvREEsS0FBSytGLE9BQU84RixHQUFHLDBDQUEyQyxXQUFhLE9BQU8sS0FHOUU3TCxLQUFLQyxTQUFTcUQsWUFDZHRELEtBQUsrRixPQUFPOEYsR0FBRyxzQkFBdUJuTSxFQUFFdUMsTUFBTWpDLEtBQUsrTCxZQUFhL0wsT0FDaEVBLEtBQUsrRixPQUFPOEYsR0FBRyx1QkFBd0JuTSxFQUFFdUMsTUFBTWpDLEtBQUtnTSxVQUFXaE0sU0FXdkVILEVBQUlrSixVQUFVZ0QsWUFBYyxTQUFTbEIsR0FDakMsSUFBSXRKLEVBQVEsS0FFUSxJQUFoQnNKLEVBQU1vQixRQUlOdk0sRUFBRWlNLFFBQVFPLFVBRVYzSyxHQUNJNEssR0FGSjVLLEVBQVF2QixLQUFLK0YsT0FBT0ksSUFBSSxhQUFhdUQsUUFBUSxhQUFjLElBQUkwQyxNQUFNLE1BRXZDLEtBQWpCN0ssRUFBTWlGLE9BQWdCLEdBQUssR0FDcEM2RixFQUFHOUssRUFBdUIsS0FBakJBLEVBQU1pRixPQUFnQixHQUFLLEtBR3hDakYsRUFBUXZCLEtBQUsrRixPQUFPdkcsV0FDcEIrQixHQUNJNEssRUFBR25NLEtBQUtDLFNBQVM4RCxJQUNieEMsRUFBTStLLEtBQU90TSxLQUFLK0YsT0FBT0gsUUFBVTVGLEtBQUs0RixRQUFVNUYsS0FBS0MsU0FBU3dELE9BQ2hFbEMsRUFBTStLLEtBQ1ZELEVBQUc5SyxFQUFNZ0wsTUFJYnZNLEtBQUttSixHQUFHLGVBQ1J6SixFQUFFaU0sUUFBUU8sVUFBWWxNLEtBQUtxSSxRQUFROUcsRUFBTTRLLEdBQUtuTSxLQUFLK0YsT0FBT3lHLE9BQzFEeE0sS0FBSzZKLFdBQVcsYUFHcEI3SixLQUFLSSxTQUFTOEksWUFBWWxKLEtBQUtELFFBQVFxRixVQUEwQixjQUFmeUYsRUFBTTRCLE1BRXhEek0sS0FBSzBNLE1BQU0sR0FFWDFNLEtBQUttQixNQUFNQyxNQUFPLElBQUl1TCxNQUFPQyxVQUM3QjVNLEtBQUttQixNQUFNRSxPQUFTM0IsRUFBRW1MLEVBQU14SixRQUM1QnJCLEtBQUttQixNQUFNSSxNQUFNQyxNQUFRRCxFQUN6QnZCLEtBQUttQixNQUFNSSxNQUFNRSxRQUFVRixFQUMzQnZCLEtBQUttQixNQUFNRyxRQUFVdEIsS0FBS3NCLFFBQVF1SixHQUVsQ25MLEVBQUVMLEdBQVV3TSxHQUFHLHFDQUFzQ25NLEVBQUV1QyxNQUFNakMsS0FBS2dNLFVBQVdoTSxPQUU3RU4sRUFBRUwsR0FBVXdOLElBQUksd0NBQXlDbk4sRUFBRXVDLE1BQU0sU0FBUzRJLEdBQ3RFLElBQUlpQyxFQUFROU0sS0FBSytNLFdBQVcvTSxLQUFLbUIsTUFBTUcsUUFBU3RCLEtBQUtzQixRQUFRdUosSUFFN0RuTCxFQUFFTCxHQUFVd00sR0FBRyx3Q0FBeUNuTSxFQUFFdUMsTUFBTWpDLEtBQUtnTixXQUFZaE4sT0FFN0UwRyxLQUFLa0IsSUFBSWtGLEVBQU1YLEdBQUt6RixLQUFLa0IsSUFBSWtGLEVBQU1ULElBQU1yTSxLQUFLbUosR0FBRyxXQUlyRDBCLEVBQU1vQyxpQkFFTmpOLEtBQUtnSixNQUFNLFlBQ1hoSixLQUFLaUosUUFBUSxVQUNkakosU0FTUEgsRUFBSWtKLFVBQVVpRSxXQUFhLFNBQVNuQyxHQUNoQyxJQUFJM0MsRUFBVSxLQUNWQyxFQUFVLEtBQ1YrRSxFQUFPLEtBQ1BKLEVBQVE5TSxLQUFLK00sV0FBVy9NLEtBQUttQixNQUFNRyxRQUFTdEIsS0FBS3NCLFFBQVF1SixJQUN6RHRKLEVBQVF2QixLQUFLK00sV0FBVy9NLEtBQUttQixNQUFNSSxNQUFNQyxNQUFPc0wsR0FFL0M5TSxLQUFLbUosR0FBRyxjQUliMEIsRUFBTW9DLGlCQUVGak4sS0FBS0MsU0FBU2tELE1BQ2QrRSxFQUFVbEksS0FBSzBILFlBQVkxSCxLQUFLa0ksV0FDaENDLEVBQVVuSSxLQUFLMEgsWUFBWTFILEtBQUttSSxVQUFZLEdBQUtELEVBQ2pEM0csRUFBTTRLLElBQU81SyxFQUFNNEssRUFBSWpFLEdBQVdDLEVBQVVBLEdBQVdBLEVBQVdELElBRWxFQSxFQUFVbEksS0FBS0MsU0FBUzhELElBQU0vRCxLQUFLMEgsWUFBWTFILEtBQUttSSxXQUFhbkksS0FBSzBILFlBQVkxSCxLQUFLa0ksV0FDdkZDLEVBQVVuSSxLQUFLQyxTQUFTOEQsSUFBTS9ELEtBQUswSCxZQUFZMUgsS0FBS2tJLFdBQWFsSSxLQUFLMEgsWUFBWTFILEtBQUttSSxXQUN2RitFLEVBQU9sTixLQUFLQyxTQUFTc0QsVUFBWSxFQUFJdUosRUFBTVgsRUFBSSxFQUFJLEVBQ25ENUssRUFBTTRLLEVBQUl6RixLQUFLSSxJQUFJSixLQUFLQyxJQUFJcEYsRUFBTTRLLEVBQUdqRSxFQUFVZ0YsR0FBTy9FLEVBQVUrRSxJQUdwRWxOLEtBQUttQixNQUFNSSxNQUFNRSxRQUFVRixFQUUzQnZCLEtBQUtxSSxRQUFROUcsRUFBTTRLLEtBVXZCdE0sRUFBSWtKLFVBQVVpRCxVQUFZLFNBQVNuQixHQUMvQixJQUFJaUMsRUFBUTlNLEtBQUsrTSxXQUFXL00sS0FBS21CLE1BQU1HLFFBQVN0QixLQUFLc0IsUUFBUXVKLElBQ3pEdEosRUFBUXZCLEtBQUttQixNQUFNSSxNQUFNRSxRQUN6QkMsRUFBWW9MLEVBQU1YLEVBQUksRUFBSW5NLEtBQUtDLFNBQVM4RCxJQUFNLE9BQVMsUUFFM0RyRSxFQUFFTCxHQUFVOE4sSUFBSSxhQUVoQm5OLEtBQUtJLFNBQVN5SSxZQUFZN0ksS0FBS0QsUUFBUXFGLFlBRXZCLElBQVowSCxFQUFNWCxHQUFXbk0sS0FBS21KLEdBQUcsY0FBZ0JuSixLQUFLbUosR0FBRyxZQUNqRG5KLEtBQUswTSxNQUFNMU0sS0FBS0MsU0FBU2lFLGNBQWdCbEUsS0FBS0MsU0FBUytELFlBQ3ZEaEUsS0FBS3lCLFFBQVF6QixLQUFLb04sUUFBUTdMLEVBQU00SyxFQUFlLElBQVpXLEVBQU1YLEVBQVV6SyxFQUFZMUIsS0FBS21CLE1BQU1PLFlBQzFFMUIsS0FBSzZKLFdBQVcsWUFDaEI3SixLQUFLZ0wsU0FFTGhMLEtBQUttQixNQUFNTyxVQUFZQSxHQUVuQmdGLEtBQUtrQixJQUFJa0YsRUFBTVgsR0FBSyxJQUFLLElBQUlRLE1BQU9DLFVBQVk1TSxLQUFLbUIsTUFBTUMsS0FBTyxNQUNsRXBCLEtBQUttQixNQUFNRSxPQUFPd0wsSUFBSSxpQkFBa0IsV0FBYSxPQUFPLEtBSS9EN00sS0FBS21KLEdBQUcsY0FJYm5KLEtBQUsrSixNQUFNLFlBQ1gvSixLQUFLaUosUUFBUSxhQVdqQnBKLEVBQUlrSixVQUFVcUUsUUFBVSxTQUFTQyxFQUFZM0wsR0FDekMsSUFBSWxDLEdBQVksRUFFWm9HLEVBQVE1RixLQUFLNEYsUUFDYjhCLEVBQWMxSCxLQUFLMEgsY0E2QnZCLE9BM0JLMUgsS0FBS0MsU0FBU3VELFVBRWY5RCxFQUFFc0MsS0FBSzBGLEVBQWFoSSxFQUFFdUMsTUFBTSxTQUFTZ0csRUFBT3dDLEdBWXhDLE1BVmtCLFNBQWQvSSxHQUF3QjJMLEVBQWE1QyxFQVJ0QyxJQVFzRDRDLEVBQWE1QyxFQVJuRSxHQVNDakwsRUFBV3lJLEVBR1UsVUFBZHZHLEdBQXlCMkwsRUFBYTVDLEVBQVE3RSxFQVp0RCxJQVlzRXlILEVBQWE1QyxFQUFRN0UsRUFaM0YsR0FhQ3BHLEVBQVd5SSxFQUFRLEVBQ1pqSSxLQUFLNEksR0FBR3lFLEVBQVksSUFBSzVDLElBQzdCekssS0FBSzRJLEdBQUd5RSxFQUFZLElBQUszRixFQUFZTyxFQUFRLElBQU13QyxFQUFRN0UsS0FDOURwRyxFQUF5QixTQUFka0MsRUFBdUJ1RyxFQUFRLEVBQUlBLElBRTdCLElBQWR6SSxHQUNSUSxPQUdGQSxLQUFLQyxTQUFTa0QsT0FFWG5ELEtBQUs0SSxHQUFHeUUsRUFBWSxJQUFLM0YsRUFBWTFILEtBQUtrSSxZQUMxQzFJLEVBQVc2TixFQUFhck4sS0FBS2tJLFVBQ3RCbEksS0FBSzRJLEdBQUd5RSxFQUFZLElBQUszRixFQUFZMUgsS0FBS21JLGNBQ2pEM0ksRUFBVzZOLEVBQWFyTixLQUFLbUksWUFJOUIzSSxHQVNYSyxFQUFJa0osVUFBVVYsUUFBVSxTQUFTZ0YsR0FDN0IsSUFBSWhGLEVBQVVySSxLQUFLME0sUUFBVSxFQUU3QjFNLEtBQUttSixHQUFHLGNBQWdCbkosS0FBSzhMLGtCQUV6QnpELElBQ0FySSxLQUFLZ0osTUFBTSxhQUNYaEosS0FBS2lKLFFBQVEsY0FHYnZKLEVBQUVpTSxRQUFRMkIsYUFBZTVOLEVBQUVpTSxRQUFRQyxXQUNuQzVMLEtBQUsrRixPQUFPSSxLQUNSK0YsVUFBVyxlQUFpQm1CLEVBQWEsY0FDekN6QixXQUFhNUwsS0FBSzBNLFFBQVUsSUFBUSxNQUVqQ3JFLEVBQ1BySSxLQUFLK0YsT0FBT3NDLFNBQ1JpRSxLQUFNZSxFQUFhLE1BQ3BCck4sS0FBSzBNLFFBQVMxTSxLQUFLQyxTQUFTcUUsZUFBZ0I1RSxFQUFFdUMsTUFBTWpDLEtBQUs4TCxnQkFBaUI5TCxPQUU3RUEsS0FBSytGLE9BQU9JLEtBQ1JtRyxLQUFNZSxFQUFhLFFBVS9CeE4sRUFBSWtKLFVBQVVJLEdBQUssU0FBU29FLEdBQ3hCLE9BQU92TixLQUFLMkIsUUFBUUYsUUFBUThMLElBQVV2TixLQUFLMkIsUUFBUUYsUUFBUThMLEdBQVMsR0FTeEUxTixFQUFJa0osVUFBVXRILFFBQVUsU0FBU2pDLEdBQzdCLEdBQUlBLElBQWFJLEVBQ2IsT0FBT0ksS0FBS1EsU0FHaEIsR0FBMkIsSUFBdkJSLEtBQUthLE9BQU8yRixPQUNaLE9BQU81RyxFQUtYLEdBRkFKLEVBQVdRLEtBQUtvSCxVQUFVNUgsR0FFdEJRLEtBQUtRLFdBQWFoQixFQUFVLENBQzVCLElBQUlxTCxFQUFRN0ssS0FBS2lKLFFBQVEsVUFBWXNCLFVBQVlDLEtBQU0sV0FBWUMsTUFBT2pMLEtBRXRFcUwsRUFBTUUsT0FBU25MLElBQ2ZKLEVBQVdRLEtBQUtvSCxVQUFVeUQsRUFBTUUsT0FHcEMvSyxLQUFLUSxTQUFXaEIsRUFFaEJRLEtBQUs2SixXQUFXLFlBRWhCN0osS0FBS2lKLFFBQVEsV0FBYXNCLFVBQVlDLEtBQU0sV0FBWUMsTUFBT3pLLEtBQUtRLFlBR3hFLE9BQU9SLEtBQUtRLFVBUWhCWCxFQUFJa0osVUFBVWMsV0FBYSxTQUFTMkQsR0FLaEMsTUFKcUIsV0FBakI5TixFQUFFK00sS0FBS2UsS0FDUHhOLEtBQUtpQixhQUFhdU0sSUFBUSxFQUMxQnhOLEtBQUttSixHQUFHLFVBQVluSixLQUFLK0osTUFBTSxVQUU1QnJLLEVBQUVQLElBQUlhLEtBQUtpQixhQUFjLFNBQVN3TSxFQUFHdkwsR0FBSyxPQUFPQSxLQVE1RHJDLEVBQUlrSixVQUFVWCxNQUFRLFNBQVM1SSxJQUMzQkEsRUFBV1EsS0FBS29ILFVBQVU1SCxNQUVUSSxJQUlqQkksS0FBS1MsT0FBUyxFQUNkVCxLQUFLUSxTQUFXaEIsRUFFaEJRLEtBQUswTixVQUFXLFlBQWEsZUFFN0IxTixLQUFLcUksUUFBUXJJLEtBQUswSCxZQUFZbEksSUFFOUJRLEtBQUsyTixTQUFVLFlBQWEsaUJBVWhDOU4sRUFBSWtKLFVBQVUzQixVQUFZLFNBQVM1SCxFQUFVc0csR0FDekMsSUFBSTBDLEVBQUl4SSxLQUFLYSxPQUFPMkYsT0FDaEJvSCxFQUFJOUgsRUFBVyxFQUFJOUYsS0FBS2MsUUFBUTBGLE9BUXBDLE9BTkt4RyxLQUFLNk4sVUFBVXJPLElBQWFnSixFQUFJLEVBQ2pDaEosRUFBV0ksR0FDSkosRUFBVyxHQUFLQSxHQUFZZ0osRUFBSW9GLEtBQ3ZDcE8sSUFBYUEsRUFBV29PLEVBQUksR0FBS3BGLEVBQUlBLEdBQUtBLEVBQUlvRixFQUFJLEdBRy9DcE8sR0FTWEssRUFBSWtKLFVBQVVqRCxTQUFXLFNBQVN0RyxHQUU5QixPQURBQSxHQUFZUSxLQUFLYyxRQUFRMEYsT0FBUyxFQUMzQnhHLEtBQUtvSCxVQUFVNUgsR0FBVSxJQVNwQ0ssRUFBSWtKLFVBQVVaLFFBQVUsU0FBU3JDLEdBQzdCLElBRUlTLEVBQ0F1SCxFQUNBQyxFQUpBOU4sRUFBV0QsS0FBS0MsU0FDaEJrSSxFQUFVbkksS0FBS1UsYUFBYThGLE9BS2hDLEdBQUl2RyxFQUFTa0QsS0FDVGdGLEVBQVVuSSxLQUFLYyxRQUFRMEYsT0FBUyxFQUFJeEcsS0FBS2EsT0FBTzJGLE9BQVMsT0FDdEQsR0FBSXZHLEVBQVM0RCxXQUFhNUQsRUFBUzBELE1BQU8sQ0FJN0MsSUFIQTRDLEVBQVd2RyxLQUFLYSxPQUFPMkYsT0FDdkJzSCxFQUF1QjlOLEtBQUthLFNBQVMwRixHQUFVWCxRQUMvQ21JLEVBQWUvTixLQUFLSSxTQUFTd0YsUUFDdEJXLFFBQ0h1SCxHQUF3QjlOLEtBQUthLE9BQU8wRixHQUFVWCxRQUFVNUYsS0FBS0MsU0FBU3dELFFBQzNDc0ssS0FJL0I1RixFQUFVNUIsRUFBVyxPQUVyQjRCLEVBRE9sSSxFQUFTckIsT0FDTm9CLEtBQUthLE9BQU8yRixPQUFTLEVBRXJCeEcsS0FBS2EsT0FBTzJGLE9BQVN2RyxFQUFTaUQsTUFPNUMsT0FKSTRDLElBQ0FxQyxHQUFXbkksS0FBS2MsUUFBUTBGLE9BQVMsR0FHOUJFLEtBQUtJLElBQUlxQixFQUFTLElBUzdCdEksRUFBSWtKLFVBQVViLFFBQVUsU0FBU3BDLEdBQzdCLE9BQU9BLEVBQVcsRUFBSTlGLEtBQUtjLFFBQVEwRixPQUFTLEdBU2hEM0csRUFBSWtKLFVBQVU3RixNQUFRLFNBQVMxRCxHQUMzQixPQUFJQSxJQUFhSSxFQUNOSSxLQUFLYSxPQUFPNEIsU0FHdkJqRCxFQUFXUSxLQUFLb0gsVUFBVTVILEdBQVUsR0FDN0JRLEtBQUthLE9BQU9yQixLQVN2QkssRUFBSWtKLFVBQVVpRixRQUFVLFNBQVN4TyxHQUM3QixPQUFJQSxJQUFhSSxFQUNOSSxLQUFLZSxTQUFTMEIsU0FHekJqRCxFQUFXUSxLQUFLb0gsVUFBVTVILEdBQVUsR0FDN0JRLEtBQUtlLFNBQVN2QixLQVN6QkssRUFBSWtKLFVBQVVuQyxPQUFTLFNBQVNwSCxHQUM1QixJQUFJeU8sRUFBTWpPLEtBQUtjLFFBQVEwRixPQUFTLEVBQzVCMEgsRUFBT0QsRUFBTWpPLEtBQUthLE9BQU8yRixPQUN6QnJILEVBQU0sU0FBUzhJLEdBQVMsT0FBT0EsRUFBUSxHQUFNLEVBQUlpRyxFQUFPakcsRUFBUSxFQUFJZ0csR0FBT2hHLEVBQVEsR0FBSyxHQUU1RixPQUFJekksSUFBYUksRUFDTkYsRUFBRVAsSUFBSWEsS0FBS2MsUUFBUyxTQUFTMk0sRUFBR3ZMLEdBQUssT0FBTy9DLEVBQUkrQyxLQUdwRHhDLEVBQUVQLElBQUlhLEtBQUtjLFFBQVMsU0FBUzJNLEVBQUd2TCxHQUFLLE9BQU91TCxJQUFNak8sRUFBV0wsRUFBSStDLEdBQUssUUFTakZyQyxFQUFJa0osVUFBVTJELE1BQVEsU0FBU0EsR0FLM0IsT0FKSUEsSUFBVTlNLElBQ1ZJLEtBQUtTLE9BQVNpTSxHQUdYMU0sS0FBS1MsUUFVaEJaLEVBQUlrSixVQUFVckIsWUFBYyxTQUFTbEksR0FDakMsSUFFSTZOLEVBRkFjLEVBQWEsRUFDYkMsRUFBYzVPLEVBQVcsRUFHN0IsT0FBSUEsSUFBYUksRUFDTkYsRUFBRVAsSUFBSWEsS0FBS1UsYUFBY2hCLEVBQUV1QyxNQUFNLFNBQVNvTCxFQUFZcEYsR0FDekQsT0FBT2pJLEtBQUswSCxZQUFZTyxJQUN6QmpJLFFBR0hBLEtBQUtDLFNBQVNyQixRQUNWb0IsS0FBS0MsU0FBUzhELE1BQ2RvSyxHQUFjLEVBQ2RDLEVBQWM1TyxFQUFXLEdBRzdCNk4sRUFBYXJOLEtBQUtVLGFBQWFsQixHQUMvQjZOLElBQWVyTixLQUFLNEYsUUFBVXlILEdBQWNyTixLQUFLVSxhQUFhME4sSUFBZ0IsSUFBTSxFQUFJRCxHQUV4RmQsRUFBYXJOLEtBQUtVLGFBQWEwTixJQUFnQixFQUduRGYsRUFBYTNHLEtBQUtNLEtBQUtxRyxLQWEzQnhOLEVBQUlrSixVQUFVc0YsU0FBVyxTQUFTQyxFQUFNQyxFQUFJQyxHQUN4QyxPQUFlLElBQVhBLEVBQ08sRUFHSjlILEtBQUtDLElBQUlELEtBQUtJLElBQUlKLEtBQUtrQixJQUFJMkcsRUFBS0QsR0FBTyxHQUFJLEdBQUs1SCxLQUFLa0IsSUFBSzRHLEdBQVV4TyxLQUFLQyxTQUFTK0QsYUFTN0ZuRSxFQUFJa0osVUFBVXdGLEdBQUssU0FBUy9PLEVBQVVrTixHQUNsQyxJQUFJakwsRUFBVXpCLEtBQUt5QixVQUNmZ04sRUFBUyxLQUNUQyxFQUFXbFAsRUFBV1EsS0FBSzhGLFNBQVNyRSxHQUNwQ0MsR0FBYWdOLEVBQVcsSUFBTUEsRUFBVyxHQUN6Q3hMLEVBQVFsRCxLQUFLYSxPQUFPMkYsT0FDcEIwQixFQUFVbEksS0FBS2tJLFVBQ2ZDLEVBQVVuSSxLQUFLbUksVUFFZm5JLEtBQUtDLFNBQVNrRCxPQUNUbkQsS0FBS0MsU0FBU21ELFFBQVVzRCxLQUFLa0IsSUFBSThHLEdBQVl4TCxFQUFRLElBQ3REd0wsSUFBeUIsRUFBYmhOLEVBQWlCd0IsSUFJakN1TCxLQURBalAsRUFBV2lDLEVBQVVpTixHQUNDeEcsR0FBV2hGLEVBQVFBLEdBQVNBLEVBQVFnRixLQUUzQzFJLEdBQVlpUCxFQUFTQyxHQUFZdkcsR0FBV3NHLEVBQVNDLEVBQVcsSUFDM0VqTixFQUFVZ04sRUFBU0MsRUFDbkJsUCxFQUFXaVAsRUFDWHpPLEtBQUtvSSxNQUFNM0csS0FJZmpDLEVBRk9RLEtBQUtDLFNBQVNtRCxRQUVUNUQsR0FEWjJJLEdBQVcsR0FDc0JBLEdBQVdBLEVBRWpDekIsS0FBS0ksSUFBSW9CLEVBQVN4QixLQUFLQyxJQUFJd0IsRUFBUzNJLElBR25EUSxLQUFLME0sTUFBTTFNLEtBQUtxTyxTQUFTNU0sRUFBU2pDLEVBQVVrTixJQUM1QzFNLEtBQUt5QixRQUFRakMsR0FFVFEsS0FBS0ksU0FBUytJLEdBQUcsYUFDakJuSixLQUFLZ0wsVUFTYm5MLEVBQUlrSixVQUFVNEYsS0FBTyxTQUFTakMsR0FDMUJBLEVBQVFBLElBQVMsRUFDakIxTSxLQUFLdU8sR0FBR3ZPLEtBQUs4RixTQUFTOUYsS0FBS3lCLFdBQWEsRUFBR2lMLElBUS9DN00sRUFBSWtKLFVBQVU2RixLQUFPLFNBQVNsQyxHQUMxQkEsRUFBUUEsSUFBUyxFQUNqQjFNLEtBQUt1TyxHQUFHdk8sS0FBSzhGLFNBQVM5RixLQUFLeUIsV0FBYSxFQUFHaUwsSUFRL0M3TSxFQUFJa0osVUFBVStDLGdCQUFrQixTQUFTakIsR0FHckMsR0FBSUEsSUFBVWpMLElBQ1ZpTCxFQUFNZ0UsbUJBR0RoRSxFQUFNeEosUUFBVXdKLEVBQU1pRSxZQUFjakUsRUFBTWtFLGtCQUFvQi9PLEtBQUsrRixPQUFPaUosSUFBSSxJQUMvRSxPQUFPLEVBSWZoUCxLQUFLK0osTUFBTSxhQUNYL0osS0FBS2lKLFFBQVEsZUFRakJwSixFQUFJa0osVUFBVWlCLFNBQVcsV0FDckIsSUFBSXBFLEVBVUosT0FUSTVGLEtBQUtELFFBQVFzRSx3QkFBMEIxRSxFQUN2Q2lHLEVBQVFsRyxFQUFFTSxLQUFLRCxRQUFRc0UsdUJBQXVCdUIsUUFDdkNqRyxFQUFPc1AsV0FDZHJKLEVBQVFqRyxFQUFPc1AsV0FDUjVQLEVBQVM2UCxpQkFBbUI3UCxFQUFTNlAsZ0JBQWdCQyxZQUM1RHZKLEVBQVF2RyxFQUFTNlAsZ0JBQWdCQyxZQUVqQ0MsUUFBUUMsS0FBSyxrQ0FFVnpKLEdBUVgvRixFQUFJa0osVUFBVVcsUUFBVSxTQUFTb0IsR0FDN0I5SyxLQUFLK0YsT0FBT3VKLFFBQ1p0UCxLQUFLYSxVQUVEaUssSUFDQUEsRUFBV0EsYUFBbUJ5RSxPQUFVekUsRUFBVXBMLEVBQUVvTCxJQUdwRDlLLEtBQUtDLFNBQVN1RSxxQkFDZHNHLEVBQVVBLEVBQVF4QixLQUFLLElBQU10SixLQUFLQyxTQUFTdUUscUJBRy9Dc0csRUFBUWhJLE9BQU8sV0FDWCxPQUF5QixJQUFsQjlDLEtBQUt3UCxXQUNieE4sS0FBS3RDLEVBQUV1QyxNQUFNLFNBQVNnRyxFQUFPMkMsR0FDNUJBLEVBQU81SyxLQUFLMkssUUFBUUMsR0FDcEI1SyxLQUFLK0YsT0FBT21CLE9BQU8wRCxHQUNuQjVLLEtBQUthLE9BQU9nQyxLQUFLK0gsR0FDakI1SyxLQUFLZSxTQUFTOEIsS0FBNEUsRUFBdkUrSCxFQUFLdEIsS0FBSyxnQkFBZ0JtRyxRQUFRLGdCQUFnQnBGLEtBQUssZUFBcUIsSUFDaEdySyxPQUVIQSxLQUFLb0ksTUFBTXBJLEtBQUs2TixVQUFVN04sS0FBS0MsU0FBUzZELGVBQWlCOUQsS0FBS0MsU0FBUzZELGNBQWdCLEdBRXZGOUQsS0FBSzZKLFdBQVcsVUFVcEJoSyxFQUFJa0osVUFBVTJHLElBQU0sU0FBUzVFLEVBQVN0TCxHQUNsQyxJQUFJaUMsRUFBVXpCLEtBQUs4RixTQUFTOUYsS0FBS1EsVUFFakNoQixFQUFXQSxJQUFhSSxFQUFZSSxLQUFLYSxPQUFPMkYsT0FBU3hHLEtBQUtvSCxVQUFVNUgsR0FBVSxHQUNsRnNMLEVBQVVBLGFBQW1CeUUsT0FBU3pFLEVBQVVwTCxFQUFFb0wsR0FFbEQ5SyxLQUFLaUosUUFBUSxPQUFTNkIsUUFBU0EsRUFBU3RMLFNBQVVBLElBRWxEc0wsRUFBVTlLLEtBQUsySyxRQUFRRyxHQUVJLElBQXZCOUssS0FBS2EsT0FBTzJGLFFBQWdCaEgsSUFBYVEsS0FBS2EsT0FBTzJGLFFBQzlCLElBQXZCeEcsS0FBS2EsT0FBTzJGLFFBQWdCeEcsS0FBSytGLE9BQU9tQixPQUFPNEQsR0FDeEIsSUFBdkI5SyxLQUFLYSxPQUFPMkYsUUFBZ0J4RyxLQUFLYSxPQUFPckIsRUFBVyxHQUFHbVEsTUFBTTdFLEdBQzVEOUssS0FBS2EsT0FBT2dDLEtBQUtpSSxHQUNqQjlLLEtBQUtlLFNBQVM4QixLQUErRSxFQUExRWlJLEVBQVF4QixLQUFLLGdCQUFnQm1HLFFBQVEsZ0JBQWdCcEYsS0FBSyxlQUFxQixLQUVsR3JLLEtBQUthLE9BQU9yQixHQUFVb1EsT0FBTzlFLEdBQzdCOUssS0FBS2EsT0FBT2dQLE9BQU9yUSxFQUFVLEVBQUdzTCxHQUNoQzlLLEtBQUtlLFNBQVM4TyxPQUFPclEsRUFBVSxFQUE2RSxFQUExRXNMLEVBQVF4QixLQUFLLGdCQUFnQm1HLFFBQVEsZ0JBQWdCcEYsS0FBSyxlQUFxQixJQUdySHJLLEtBQUthLE9BQU9ZLElBQVl6QixLQUFLb0ksTUFBTXBJLEtBQUthLE9BQU9ZLEdBQVN3RyxTQUV4RGpJLEtBQUs2SixXQUFXLFNBRWhCN0osS0FBS2lKLFFBQVEsU0FBVzZCLFFBQVNBLEVBQVN0TCxTQUFVQSxLQVN4REssRUFBSWtKLFVBQVU5QyxPQUFTLFNBQVN6RyxJQUM1QkEsRUFBV1EsS0FBS29ILFVBQVU1SCxHQUFVLE1BRW5CSSxJQUlqQkksS0FBS2lKLFFBQVEsVUFBWTZCLFFBQVM5SyxLQUFLYSxPQUFPckIsR0FBV0EsU0FBVUEsSUFFbkVRLEtBQUthLE9BQU9yQixHQUFVeUcsU0FDdEJqRyxLQUFLYSxPQUFPZ1AsT0FBT3JRLEVBQVUsR0FDN0JRLEtBQUtlLFNBQVM4TyxPQUFPclEsRUFBVSxHQUUvQlEsS0FBSzZKLFdBQVcsU0FFaEI3SixLQUFLaUosUUFBUSxXQUFhNkIsUUFBUyxLQUFNdEwsU0FBVUEsTUFRdkRLLEVBQUlrSixVQUFVUSx1QkFBeUIsU0FBU3VHLEdBQzVDQSxFQUFPOU4sS0FBS3RDLEVBQUV1QyxNQUFNLFNBQVNDLEVBQUdwQyxHQUM1QkUsS0FBS2dKLE1BQU0sZUFDWGxKLEVBQVVKLEVBQUVJLEdBQ1pKLEVBQUUsSUFBSXFRLE9BQVNsRCxJQUFJLE9BQVFuTixFQUFFdUMsTUFBTSxTQUFTK04sR0FDeENsUSxFQUFRdUssS0FBSyxNQUFPMkYsRUFBRTNPLE9BQU80TyxLQUM3Qm5RLEVBQVFxRyxJQUFJLFVBQVcsR0FDdkJuRyxLQUFLK0osTUFBTSxnQkFDVi9KLEtBQUttSixHQUFHLGlCQUFtQm5KLEtBQUttSixHQUFHLGlCQUFtQm5KLEtBQUs0SixXQUM3RDVKLE9BQU9xSyxLQUFLLE1BQU92SyxFQUFRdUssS0FBSyxRQUFVdkssRUFBUXVLLEtBQUssYUFBZXZLLEVBQVF1SyxLQUFLLHFCQUN2RnJLLFFBT1BILEVBQUlrSixVQUFVbUgsUUFBVSxXQUVwQmxRLEtBQUtJLFNBQVMrTSxJQUFJLGFBQ2xCbk4sS0FBSytGLE9BQU9vSCxJQUFJLGFBQ2hCek4sRUFBRUwsR0FBVThOLElBQUksY0FFaUIsSUFBN0JuTixLQUFLQyxTQUFTa0UsYUFDZHhFLEVBQU8yTCxhQUFhdEwsS0FBS3VMLGFBQ3pCdkwsS0FBS21OLElBQUl4TixFQUFRLFNBQVVLLEtBQUtLLFVBQVVnTCxvQkFHOUMsSUFBSyxJQUFJbkosS0FBS2xDLEtBQUtNLFNBQ2ZOLEtBQUtNLFNBQVM0QixHQUFHZ08sVUFHckJsUSxLQUFLK0YsT0FBT0MsU0FBUyxXQUFXQyxTQUVoQ2pHLEtBQUsrRixPQUFPb0ssU0FDWm5RLEtBQUsrRixPQUFPQyxXQUFXb0ssV0FBV0QsU0FDbENuUSxLQUFLK0YsT0FBT0MsV0FBV21LLFNBRXZCblEsS0FBS0ksU0FDQXlJLFlBQVk3SSxLQUFLRCxRQUFRNEUsY0FDekJrRSxZQUFZN0ksS0FBS0QsUUFBUThFLGNBQ3pCZ0UsWUFBWTdJLEtBQUtELFFBQVE2RSxhQUN6QmlFLFlBQVk3SSxLQUFLRCxRQUFRK0UsVUFDekIrRCxZQUFZN0ksS0FBS0QsUUFBUWlGLFdBQ3pCNkQsWUFBWTdJLEtBQUtELFFBQVFxRixXQUN6QmlGLEtBQUssUUFBU3JLLEtBQUtJLFNBQVNpSyxLQUFLLFNBQVNYLFFBQVEsSUFBSVksT0FBT3RLLEtBQUtELFFBQVFnRixnQkFBa0IsV0FBWSxLQUFNLEtBQzlHc0wsV0FBVyxpQkFVcEJ4USxFQUFJa0osVUFBVUgsR0FBSyxTQUFTMEgsRUFBR0MsRUFBR0MsR0FDOUIsSUFBSXpNLEVBQU0vRCxLQUFLQyxTQUFTOEQsSUFDeEIsT0FBUXdNLEdBQ0osSUFBSyxJQUNELE9BQU94TSxFQUFNdU0sRUFBSUUsRUFBSUYsRUFBSUUsRUFDN0IsSUFBSyxJQUNELE9BQU96TSxFQUFNdU0sRUFBSUUsRUFBSUYsRUFBSUUsRUFDN0IsSUFBSyxLQUNELE9BQU96TSxFQUFNdU0sR0FBS0UsRUFBSUYsR0FBS0UsRUFDL0IsSUFBSyxLQUNELE9BQU96TSxFQUFNdU0sR0FBS0UsRUFBSUYsR0FBS0UsSUFjdkMzUSxFQUFJa0osVUFBVThDLEdBQUssU0FBUy9MLEVBQVMrSyxFQUFPNEYsRUFBVUMsR0FDOUM1USxFQUFRNlEsaUJBQ1I3USxFQUFRNlEsaUJBQWlCOUYsRUFBTzRGLEVBQVVDLEdBQ25DNVEsRUFBUThRLGFBQ2Y5USxFQUFROFEsWUFBWSxLQUFPL0YsRUFBTzRGLElBWTFDNVEsRUFBSWtKLFVBQVVvRSxJQUFNLFNBQVNyTixFQUFTK0ssRUFBTzRGLEVBQVVDLEdBQy9DNVEsRUFBUStRLG9CQUNSL1EsRUFBUStRLG9CQUFvQmhHLEVBQU80RixFQUFVQyxHQUN0QzVRLEVBQVFnUixhQUNmaFIsRUFBUWdSLFlBQVksS0FBT2pHLEVBQU80RixJQWUxQzVRLEVBQUlrSixVQUFVRSxRQUFVLFNBQVN1QixFQUFNTyxFQUFNZ0csRUFBV3hELEVBQU92RSxHQUMzRCxJQUFJZ0ksR0FDQXBHLE1BQVFxRyxNQUFPalIsS0FBS2EsT0FBTzJGLE9BQVF5QixNQUFPakksS0FBS3lCLFlBQ2hEVSxFQUFVekMsRUFBRXdSLFVBQ1h4UixFQUFFeUwsTUFBTyxLQUFNWCxFQUFNdUcsR0FBYSxTQUFTdEQsR0FBSyxPQUFPQSxJQUNsRDNFLEtBQUssS0FBS3RHLGVBQ2hCcUksRUFBUW5MLEVBQUVnRyxPQUNQOEUsRUFBTSxNQUFPdUcsR0FBYSxZQUFhakksS0FBSyxLQUFLdEcsY0FDbkQ5QyxFQUFFUSxRQUFTaVIsY0FBZW5SLE1BQVFnUixFQUFRakcsSUFrQjlDLE9BZksvSyxLQUFLTyxTQUFTaUssS0FDZjlLLEVBQUVzQyxLQUFLaEMsS0FBS00sU0FBVSxTQUFTa0ssRUFBTWxJLEdBQzdCQSxFQUFPOE8sV0FDUDlPLEVBQU84TyxVQUFVdkcsS0FJekI3SyxLQUFLcVIsVUFBVzVFLEtBQU01TSxFQUFJNEYsS0FBS0MsTUFBTzhFLEtBQU1BLElBQzVDeEssS0FBS0ksU0FBUzZJLFFBQVE0QixHQUVsQjdLLEtBQUtDLFVBQThDLG1CQUEzQkQsS0FBS0MsU0FBU2tDLElBQ3RDbkMsS0FBS0MsU0FBU2tDLEdBQVNtUCxLQUFLdFIsS0FBTTZLLElBSW5DQSxHQU9YaEwsRUFBSWtKLFVBQVVDLE1BQVEsU0FBU3dCLEdBQzNCOUssRUFBRXNDLE1BQU93SSxHQUFPK0csT0FBT3ZSLEtBQUsyQixRQUFRQyxLQUFLNEksUUFBYzlLLEVBQUV1QyxNQUFNLFNBQVNDLEVBQUdzSSxHQUNuRXhLLEtBQUsyQixRQUFRRixRQUFRK0ksS0FBVTVLLElBQy9CSSxLQUFLMkIsUUFBUUYsUUFBUStJLEdBQVEsR0FHakN4SyxLQUFLMkIsUUFBUUYsUUFBUStJLE1BQ3RCeEssUUFPUEgsRUFBSWtKLFVBQVVnQixNQUFRLFNBQVNTLEdBQzNCOUssRUFBRXNDLE1BQU93SSxHQUFPK0csT0FBT3ZSLEtBQUsyQixRQUFRQyxLQUFLNEksUUFBYzlLLEVBQUV1QyxNQUFNLFNBQVNDLEVBQUdzSSxHQUN2RXhLLEtBQUsyQixRQUFRRixRQUFRK0ksTUFDdEJ4SyxRQVFQSCxFQUFJa0osVUFBVXNJLFNBQVcsU0FBU0csR0FDOUIsR0FBSUEsRUFBTy9FLE9BQVM1TSxFQUFJNEYsS0FBS0MsT0FLekIsR0FKS2hHLEVBQUVtTCxNQUFNNEcsUUFBUUQsRUFBT2hILFFBQ3hCOUssRUFBRW1MLE1BQU00RyxRQUFRRCxFQUFPaEgsV0FHdEI5SyxFQUFFbUwsTUFBTTRHLFFBQVFELEVBQU9oSCxNQUFNa0gsSUFBSyxDQUNuQyxJQUFJQyxFQUFXalMsRUFBRW1MLE1BQU00RyxRQUFRRCxFQUFPaEgsTUFBTW1ILFNBQzVDalMsRUFBRW1MLE1BQU00RyxRQUFRRCxFQUFPaEgsTUFBTW1ILFNBQVcsU0FBUzNCLEdBQzdDLE9BQUkyQixJQUFZQSxFQUFTQyxPQUFXNUIsRUFBRWUsWUFBNkMsSUFBaENmLEVBQUVlLFVBQVVjLFFBQVEsT0FHaEU3QixFQUFFZSxXQUFhZixFQUFFZSxVQUFVYyxRQUFRLFFBQVUsRUFGekNGLEVBQVNDLE1BQU01UixLQUFNOFIsWUFJcENwUyxFQUFFbUwsTUFBTTRHLFFBQVFELEVBQU9oSCxNQUFNa0gsS0FBTSxRQUVoQ0YsRUFBTy9FLE9BQVM1TSxFQUFJNEYsS0FBS0UsUUFDM0IzRixLQUFLMkIsUUFBUUMsS0FBSzRQLEVBQU9oSCxNQUcxQnhLLEtBQUsyQixRQUFRQyxLQUFLNFAsRUFBT2hILE1BQVF4SyxLQUFLMkIsUUFBUUMsS0FBSzRQLEVBQU9oSCxNQUFNK0csT0FBT0MsRUFBTzVQLE1BRjlFNUIsS0FBSzJCLFFBQVFDLEtBQUs0UCxFQUFPaEgsTUFBUWdILEVBQU81UCxLQUs1QzVCLEtBQUsyQixRQUFRQyxLQUFLNFAsRUFBT2hILE1BQVE5SyxFQUFFeUwsS0FBS25MLEtBQUsyQixRQUFRQyxLQUFLNFAsRUFBT2hILE1BQU85SyxFQUFFdUMsTUFBTSxTQUFTOFAsRUFBSzdQLEdBQzFGLE9BQU94QyxFQUFFc1MsUUFBUUQsRUFBSy9SLEtBQUsyQixRQUFRQyxLQUFLNFAsRUFBT2hILFNBQVd0SSxHQUMzRGxDLFNBU1hILEVBQUlrSixVQUFVMkUsU0FBVyxTQUFTdUUsR0FDOUJ2UyxFQUFFc0MsS0FBS2lRLEVBQVF2UyxFQUFFdUMsTUFBTSxTQUFTZ0csRUFBTzRDLEdBQ25DN0ssS0FBS08sU0FBU3NLLElBQVMsR0FDeEI3SyxRQVFQSCxFQUFJa0osVUFBVTRFLFFBQVUsU0FBU3NFLEdBQzdCdlMsRUFBRXNDLEtBQUtpUSxFQUFRdlMsRUFBRXVDLE1BQU0sU0FBU2dHLEVBQU80QyxVQUM1QjdLLEtBQUtPLFNBQVNzSyxJQUN0QjdLLFFBVVBILEVBQUlrSixVQUFVekgsUUFBVSxTQUFTdUosR0FDN0IsSUFBSXFILEdBQVcvRixFQUFHLEtBQU1FLEVBQUcsTUFnQjNCLE9BZEF4QixFQUFRQSxFQUFNc0gsZUFBaUJ0SCxHQUFTbEwsRUFBT2tMLE9BRS9DQSxFQUFRQSxFQUFNdUgsU0FBV3ZILEVBQU11SCxRQUFRNUwsT0FDbkNxRSxFQUFNdUgsUUFBUSxHQUFLdkgsRUFBTXdILGdCQUFrQnhILEVBQU13SCxlQUFlN0wsT0FDNURxRSxFQUFNd0gsZUFBZSxHQUFLeEgsR0FFeEJ5SCxPQUNOSixFQUFPL0YsRUFBSXRCLEVBQU15SCxNQUNqQkosRUFBTzdGLEVBQUl4QixFQUFNMEgsUUFFakJMLEVBQU8vRixFQUFJdEIsRUFBTTJILFFBQ2pCTixFQUFPN0YsRUFBSXhCLEVBQU00SCxTQUdkUCxHQVNYclMsRUFBSWtKLFVBQVU4RSxVQUFZLFNBQVM2RSxHQUMvQixPQUFRQyxNQUFNQyxXQUFXRixLQVc3QjdTLEVBQUlrSixVQUFVZ0UsV0FBYSxTQUFTOEYsRUFBT0MsR0FDdkMsT0FDSTNHLEVBQUcwRyxFQUFNMUcsRUFBSTJHLEVBQU8zRyxFQUNwQkUsRUFBR3dHLEVBQU14RyxFQUFJeUcsRUFBT3pHLElBUzVCM00sRUFBRXFULEdBQUdDLFlBQWMsU0FBU0MsR0FDeEIsSUFBSUMsRUFBT0MsTUFBTXBLLFVBQVV0RyxNQUFNNk8sS0FBS1EsVUFBVyxHQUVqRCxPQUFPOVIsS0FBS2dDLEtBQUssV0FDYixJQUFJb1IsRUFBUTFULEVBQUVNLE1BQ1YrSyxFQUFPcUksRUFBTXJJLEtBQUssZ0JBRWpCQSxJQUNEQSxFQUFPLElBQUlsTCxFQUFJRyxLQUF1QixpQkFBVmlULEdBQXNCQSxHQUNsREcsRUFBTXJJLEtBQUssZUFBZ0JBLEdBRTNCckwsRUFBRXNDLE1BQ0UsT0FBUSxPQUFRLEtBQU0sVUFBVyxVQUFXLFVBQVcsTUFBTyxVQUMvRCxTQUFTRSxFQUFHMkksR0FDWEUsRUFBS3NHLFVBQVc1RSxLQUFNNU0sRUFBSTRGLEtBQUtDLE1BQU84RSxLQUFNSyxJQUM1Q0UsRUFBSzNLLFNBQVN5TCxHQUFHaEIsRUFBUSxxQkFBc0JuTCxFQUFFdUMsTUFBTSxTQUFTK04sR0FDeERBLEVBQUVlLFdBQWFmLEVBQUVtQixnQkFBa0JuUixPQUNuQ0EsS0FBSzBOLFVBQVc3QyxJQUNoQkUsRUFBS0YsR0FBTytHLE1BQU01UixRQUFTeUMsTUFBTTZPLEtBQUtRLFVBQVcsSUFDakQ5UixLQUFLMk4sU0FBVTlDLE1BRXBCRSxPQUlVLGlCQUFWa0ksR0FBMkMsTUFBckJBLEVBQU8xUSxPQUFPLElBQzNDd0ksRUFBS2tJLEdBQVFyQixNQUFNN0csRUFBTW1JLE1BU3JDeFQsRUFBRXFULEdBQUdDLFlBQVlLLFlBQWN4VCxFQTdvRGxDLENBK29ERUYsT0FBTzJULE9BQVMzVCxPQUFPNFAsT0FBUTVQLE9BQVFOLFVBU3pDLFNBQVVLLEVBQUdDLEVBQVFOLEVBQVVPLEdBTzVCLElBQUkyVCxFQUFjLFNBQVNDLEdBTXZCeFQsS0FBS3lULE1BQVFELEVBT2J4VCxLQUFLMFQsVUFBWSxLQU9qQjFULEtBQUsyVCxTQUFXLEtBT2hCM1QsS0FBS0ssV0FDRHVULDJCQUE0QmxVLEVBQUV1QyxNQUFNLFNBQVMrTixHQUNyQ0EsRUFBRWUsV0FBYS9RLEtBQUt5VCxNQUFNeFQsU0FBUzRULGFBQ25DN1QsS0FBSzhULFNBRVY5VCxPQUlQQSxLQUFLeVQsTUFBTTFULFFBQVVMLEVBQUVRLFVBQVdxVCxFQUFZcFQsU0FBVUgsS0FBS3lULE1BQU0xVCxTQUduRUMsS0FBS3lULE1BQU1yVCxTQUFTeUwsR0FBRzdMLEtBQUtLLFlBT2hDa1QsRUFBWXBULFVBQ1IwVCxhQUFhLEVBQ2JFLG9CQUFxQixLQU16QlIsRUFBWXhLLFVBQVUrSyxNQUFRLFdBQ3RCOVQsS0FBSzBULFlBSVQxVCxLQUFLMlQsU0FBVzNULEtBQUt5VCxNQUFNclQsU0FBUytJLEdBQUcsWUFDdkNuSixLQUFLMFQsVUFBWS9ULEVBQU9xVSxZQUFZdFUsRUFBRXVDLE1BQU1qQyxLQUFLNEosUUFBUzVKLE1BQU9BLEtBQUt5VCxNQUFNeFQsU0FBUzhULHVCQU16RlIsRUFBWXhLLFVBQVVhLFFBQVUsV0FDeEI1SixLQUFLeVQsTUFBTXJULFNBQVMrSSxHQUFHLGNBQWdCbkosS0FBSzJULFdBSWhEM1QsS0FBSzJULFVBQVkzVCxLQUFLMlQsU0FFdEIzVCxLQUFLeVQsTUFBTXJULFNBQVM4SSxZQUFZLGNBQWVsSixLQUFLMlQsVUFFcEQzVCxLQUFLMlQsVUFBYTNULEtBQUt5VCxNQUFNNUosV0FBVyxVQUFZN0osS0FBS3lULE1BQU03SixZQU1uRTJKLEVBQVl4SyxVQUFVbUgsUUFBVSxXQUM1QixJQUFJL04sRUFBU29JLEVBRWI1SyxFQUFPc1UsY0FBY2pVLEtBQUswVCxXQUUxQixJQUFLdlIsS0FBV25DLEtBQUtLLFVBQ2pCTCxLQUFLeVQsTUFBTXJULFNBQVMrTSxJQUFJaEwsRUFBU25DLEtBQUtLLFVBQVU4QixJQUVwRCxJQUFLb0ksS0FBWTJKLE9BQU9DLG9CQUFvQm5VLE1BQ2YsbUJBQWxCQSxLQUFLdUssS0FBNEJ2SyxLQUFLdUssR0FBWSxPQUlqRTdLLEVBQUVxVCxHQUFHQyxZQUFZSyxZQUFZalIsUUFBUW1SLFlBQWNBLEVBckd0RCxDQXVHRTVULE9BQU8yVCxPQUFTM1QsT0FBTzRQLE9BQVE1UCxPQUFRTixVQVN6QyxTQUFVSyxFQUFHQyxFQUFRTixFQUFVTyxHQU81QixJQUFJd1UsRUFBTyxTQUFTWixHQU9oQnhULEtBQUt5VCxNQUFRRCxFQU9ieFQsS0FBS3FVLFdBT0xyVSxLQUFLSyxXQUNEaVUsb0VBQXFFNVUsRUFBRXVDLE1BQU0sU0FBUytOLEdBQ2xGLEdBQUtBLEVBQUVlLFdBSUYvUSxLQUFLeVQsTUFBTXhULFVBQWFELEtBQUt5VCxNQUFNeFQsU0FBU3NVLFdBSTVDdkUsRUFBRXpGLFVBQStCLFlBQW5CeUYsRUFBRXpGLFNBQVNDLE1BQWlDLGVBQVZ3RixFQUFFdkQsTUFRbkQsSUFQQSxJQUFJeE0sRUFBV0QsS0FBS3lULE1BQU14VCxTQUN0QnVJLEVBQUt2SSxFQUFTckIsUUFBVThILEtBQUtNLEtBQUsvRyxFQUFTaUQsTUFBUSxJQUFNakQsRUFBU2lELE1BQ2xFaEIsRUFBTWpDLEVBQVNyQixTQUFlLEVBQUw0SixHQUFXLEVBQ3BDaEosR0FBWXdRLEVBQUV6RixlQTFDckMsSUEwQ2lEeUYsRUFBRXpGLFNBQVNFLE1BQXNCdUYsRUFBRXpGLFNBQVNFLE1BQVF6SyxLQUFLeVQsTUFBTWhTLFdBQWFTLEVBQ3RHMEUsRUFBUzVHLEtBQUt5VCxNQUFNN00sU0FBU0osT0FDN0JnTyxFQUFPOVUsRUFBRXVDLE1BQU0sU0FBU0MsRUFBR3VMLEdBQUt6TixLQUFLd1UsS0FBSy9HLElBQU16TixNQUU3Q2tDLElBQU1zRyxHQUNUeEksS0FBS3dVLEtBQUs1TixFQUFTLEVBQUk1RyxLQUFLeVQsTUFBTTNOLFNBQVN0RyxJQUMzQ29ILEdBQVVsSCxFQUFFc0MsS0FBS2hDLEtBQUt5VCxNQUFNN00sT0FBTzVHLEtBQUt5VCxNQUFNM04sU0FBU3RHLElBQVlnVixHQUNuRWhWLEtBR1RRLE9BSVBBLEtBQUt5VCxNQUFNMVQsUUFBVUwsRUFBRVEsVUFBV2tVLEVBQUtqVSxTQUFVSCxLQUFLeVQsTUFBTTFULFNBRzVEQyxLQUFLeVQsTUFBTXJULFNBQVN5TCxHQUFHN0wsS0FBS0ssWUFPaEMrVCxFQUFLalUsVUFDRG9VLFVBQVUsR0FRZEgsRUFBS3JMLFVBQVV5TCxLQUFPLFNBQVNoVixHQUMzQixJQUFJaVYsRUFBUXpVLEtBQUt5VCxNQUFNMU4sT0FBT0MsV0FBVytCLEdBQUd2SSxHQUN4Q2tWLEVBQVlELEdBQVNBLEVBQU1uTCxLQUFLLGNBRS9Cb0wsR0FBYWhWLEVBQUVzUyxRQUFReUMsRUFBTXpGLElBQUksR0FBSWhQLEtBQUtxVSxVQUFZLElBSTNESyxFQUFVMVMsS0FBS3RDLEVBQUV1QyxNQUFNLFNBQVNnRyxFQUFPbkksR0FDbkMsSUFBMkI2VSxFQUF2QnZVLEVBQVdWLEVBQUVJLEdBQ2I4VSxFQUFPalYsRUFBT2tWLGlCQUFtQixHQUFLelUsRUFBU2lLLEtBQUssb0JBQXVCakssRUFBU2lLLEtBQUssWUFFN0ZySyxLQUFLeVQsTUFBTXhLLFFBQVEsUUFBVW5KLFFBQVNNLEVBQVV3VSxJQUFLQSxHQUFPLFFBRXhEeFUsRUFBUytJLEdBQUcsT0FDWi9JLEVBQVN5TSxJQUFJLGdCQUFpQm5OLEVBQUV1QyxNQUFNLFdBQ2xDN0IsRUFBUytGLElBQUksVUFBVyxHQUN4Qm5HLEtBQUt5VCxNQUFNeEssUUFBUSxVQUFZbkosUUFBU00sRUFBVXdVLElBQUtBLEdBQU8sU0FDL0Q1VSxPQUFPcUssS0FBSyxNQUFPdUssS0FFdEJELEVBQVEsSUFBSTVFLE9BQ04rRSxPQUFTcFYsRUFBRXVDLE1BQU0sV0FDbkI3QixFQUFTK0YsS0FDTDRPLG1CQUFvQixRQUFVSCxFQUFNLEtBQ3BDSSxRQUFXLE1BRWZoVixLQUFLeVQsTUFBTXhLLFFBQVEsVUFBWW5KLFFBQVNNLEVBQVV3VSxJQUFLQSxHQUFPLFNBQy9ENVUsTUFDSDJVLEVBQU0xRSxJQUFNMkUsSUFFakI1VSxPQUVIQSxLQUFLcVUsUUFBUXhSLEtBQUs0UixFQUFNekYsSUFBSSxNQU9oQ29GLEVBQUtyTCxVQUFVbUgsUUFBVSxXQUNyQixJQUFJL04sRUFBU29JLEVBRWIsSUFBS3BJLEtBQVduQyxLQUFLaVYsU0FDakJqVixLQUFLeVQsTUFBTXJULFNBQVMrTSxJQUFJaEwsRUFBU25DLEtBQUtpVixTQUFTOVMsSUFFbkQsSUFBS29JLEtBQVkySixPQUFPQyxvQkFBb0JuVSxNQUNmLG1CQUFsQkEsS0FBS3VLLEtBQTRCdkssS0FBS3VLLEdBQVksT0FJakU3SyxFQUFFcVQsR0FBR0MsWUFBWUssWUFBWWpSLFFBQVFnUyxLQUFPQSxFQTdIL0MsQ0ErSEV6VSxPQUFPMlQsT0FBUzNULE9BQU80UCxPQUFRNVAsT0FBUU4sVUFTekMsU0FBVUssRUFBR0MsRUFBUU4sRUFBVU8sR0FPNUIsSUFBSXNWLEVBQWEsU0FBUzFCLEdBTXRCeFQsS0FBS3lULE1BQVFELEVBT2J4VCxLQUFLSyxXQUNEOFUsa0RBQW1EelYsRUFBRXVDLE1BQU0sU0FBUytOLEdBQzVEQSxFQUFFZSxXQUFhL1EsS0FBS3lULE1BQU14VCxTQUFTbVYsWUFDbkNwVixLQUFLZ0wsVUFFVmhMLE1BQ0hxVix1QkFBd0IzVixFQUFFdUMsTUFBTSxTQUFTK04sR0FDakNBLEVBQUVlLFdBQWEvUSxLQUFLeVQsTUFBTXhULFNBQVNtVixZQUFpQyxZQUFuQnBGLEVBQUV6RixTQUFTQyxNQUM1RHhLLEtBQUtnTCxVQUVWaEwsTUFDSHNWLGtCQUFtQjVWLEVBQUV1QyxNQUFNLFNBQVMrTixHQUM1QkEsRUFBRWUsV0FBYS9RLEtBQUt5VCxNQUFNeFQsU0FBU21WLFlBQ2hDcEYsRUFBRWxRLFFBQVFzTixRQUFRLElBQU1wTixLQUFLeVQsTUFBTXhULFNBQVNnRixXQUFXZ0QsVUFBWWpJLEtBQUt5VCxNQUFNaFMsV0FDakZ6QixLQUFLZ0wsVUFFVmhMLE9BSVBBLEtBQUt5VCxNQUFNMVQsUUFBVUwsRUFBRVEsVUFBV2dWLEVBQVcvVSxTQUFVSCxLQUFLeVQsTUFBTTFULFNBR2xFQyxLQUFLeVQsTUFBTXJULFNBQVN5TCxHQUFHN0wsS0FBS0ssWUFPaEM2VSxFQUFXL1UsVUFDUGlWLFlBQVksRUFDWkcsZ0JBQWlCLGNBTXJCTCxFQUFXbk0sVUFBVWlDLE9BQVMsV0FDMUIsSUFBSXhKLEVBQVF4QixLQUFLeVQsTUFBTWpULFNBQ25Ca0ksRUFBTWxILEVBQVF4QixLQUFLeVQsTUFBTXhULFNBQVNpRCxNQUNsQ3NTLEVBQVV4VixLQUFLeVQsTUFBTTFOLE9BQU9DLFdBQVd5UCxVQUFVaFQsTUFBTWpCLEVBQU9rSCxHQUM5RGdOLEtBQ0FDLEVBQVksRUFFaEJqVyxFQUFFc0MsS0FBS3dULEVBQVMsU0FBU3ZOLEVBQU8yQyxHQUM1QjhLLEVBQVE3UyxLQUFLbkQsRUFBRWtMLEdBQU1nTCxZQUd6QkQsRUFBWWpQLEtBQUtJLElBQUk4SyxNQUFNLEtBQU04RCxHQUVqQzFWLEtBQUt5VCxNQUFNMU4sT0FBTzBELFNBQ2JtTSxPQUFPRCxHQUNQck8sU0FBU3RILEtBQUt5VCxNQUFNeFQsU0FBU3NWLGtCQUd0Q0wsRUFBV25NLFVBQVVtSCxRQUFVLFdBQzNCLElBQUkvTixFQUFTb0ksRUFFYixJQUFLcEksS0FBV25DLEtBQUtLLFVBQ2pCTCxLQUFLeVQsTUFBTXJULFNBQVMrTSxJQUFJaEwsRUFBU25DLEtBQUtLLFVBQVU4QixJQUVwRCxJQUFLb0ksS0FBWTJKLE9BQU9DLG9CQUFvQm5VLE1BQ2YsbUJBQWxCQSxLQUFLdUssS0FBNEJ2SyxLQUFLdUssR0FBWSxPQUlqRTdLLEVBQUVxVCxHQUFHQyxZQUFZSyxZQUFZalIsUUFBUThTLFdBQWFBLEVBdkZyRCxDQXlGRXZWLE9BQU8yVCxPQUFTM1QsT0FBTzRQLE9BQVE1UCxPQUFRTixVQVN6QyxTQUFVSyxFQUFHQyxFQUFRTixFQUFVTyxHQU81QixJQUFJaVcsRUFBUSxTQUFTckMsR0FNakJ4VCxLQUFLeVQsTUFBUUQsRUFPYnhULEtBQUs4VixXQU9MOVYsS0FBSytWLFNBQVcsS0FRaEIvVixLQUFLSyxXQUNEdVQsMkJBQTRCbFUsRUFBRXVDLE1BQU0sU0FBUytOLEdBQ3JDQSxFQUFFZSxXQUNGL1EsS0FBS3lULE1BQU1wQyxVQUFXNUUsS0FBTSxRQUFTakMsS0FBTSxVQUFXNUksTUFBUSxrQkFFbkU1QixNQUNIZ1csc0JBQXVCdFcsRUFBRXVDLE1BQU0sU0FBUytOLEdBQ2hDQSxFQUFFZSxXQUFhL1EsS0FBS3lULE1BQU14VCxTQUFTZ1csT0FBU2pXLEtBQUtrVyxrQkFDakRsRyxFQUFFL0Msa0JBRVBqTixNQUNIbVcseUJBQTBCelcsRUFBRXVDLE1BQU0sU0FBUytOLEdBQ25DQSxFQUFFZSxXQUFhL1EsS0FBS3lULE1BQU10SyxHQUFHLGFBQzdCbkosS0FBS3lULE1BQU0xTixPQUFPdUQsS0FBSyw0QkFBNEJyRCxVQUV4RGpHLE1BQ0hxVix1QkFBd0IzVixFQUFFdUMsTUFBTSxTQUFTK04sR0FDakNBLEVBQUVlLFdBQWlDLGFBQXBCZixFQUFFekYsU0FBU0MsTUFBdUJ4SyxLQUFLK1YsVUFDdEQvVixLQUFLd00sUUFFVnhNLE1BQ0hvVyx3QkFBeUIxVyxFQUFFdUMsTUFBTSxTQUFTK04sR0FDdEMsR0FBS0EsRUFBRWUsVUFBUCxDQUlBLElBQUkzUSxFQUFXVixFQUFFc1EsRUFBRWxGLFNBQVN4QixLQUFLLGNBRTdCbEosRUFBU29HLFNBQ1RwRyxFQUFTK0YsSUFBSSxVQUFXLFFBQ3hCbkcsS0FBS3FXLE1BQU1qVyxFQUFVVixFQUFFc1EsRUFBRWxGLGFBRTlCOUssT0FJUEEsS0FBS3lULE1BQU0xVCxRQUFVTCxFQUFFUSxVQUFXMlYsRUFBTTFWLFNBQVVILEtBQUt5VCxNQUFNMVQsU0FHN0RDLEtBQUt5VCxNQUFNclQsU0FBU3lMLEdBQUc3TCxLQUFLSyxXQUU1QkwsS0FBS3lULE1BQU1yVCxTQUFTeUwsR0FBRyxrQkFBbUIsdUJBQXdCbk0sRUFBRXVDLE1BQU0sU0FBUytOLEdBQy9FaFEsS0FBS3NXLEtBQUt0RyxJQUNYaFEsUUFPUDZWLEVBQU0xVixVQUNGOFYsT0FBTyxFQUNQTSxhQUFhLEVBQ2JDLFlBQVksR0FTaEJYLEVBQU05TSxVQUFVc04sTUFBUSxTQUFTaFYsRUFBUXVKLEdBQ3JDLElBQUk2QixFQUNRcEwsRUFBT2dKLEtBQUssaUJBQ0wsUUFDQWhKLEVBQU9nSixLQUFLLGlCQUNaLFFBRUEsVUFHZm9NLEVBQUtwVixFQUFPZ0osS0FBSyxrQkFBb0JoSixFQUFPZ0osS0FBSyxvQkFBc0JoSixFQUFPZ0osS0FBSyxpQkFDbkZ6RSxFQUFRdkUsRUFBT2dKLEtBQUssZUFBaUJySyxLQUFLeVQsTUFBTXhULFNBQVN1VyxXQUN6RFosRUFBU3ZVLEVBQU9nSixLQUFLLGdCQUFrQnJLLEtBQUt5VCxNQUFNeFQsU0FBU3NXLFlBQzNEM0IsRUFBTXZULEVBQU9nSixLQUFLLFFBRXRCLElBQUl1SyxFQTBCQSxNQUFNLElBQUk4QixNQUFNLHNCQVhoQixJQUZBRCxFQUFLN0IsRUFBSTFLLE1BQU0sNE1BRVIsR0FBRzJILFFBQVEsVUFBWSxFQUMxQnBGLEVBQU8sZUFDSixHQUFJZ0ssRUFBRyxHQUFHNUUsUUFBUSxVQUFZLEVBQ2pDcEYsRUFBTyxZQUNKLENBQUEsS0FBSWdLLEVBQUcsR0FBRzVFLFFBQVEsVUFBWSxHQUdqQyxNQUFNLElBQUk2RSxNQUFNLDRCQUZoQmpLLEVBQU8sUUFJWGdLLEVBQUtBLEVBQUcsR0FLWnpXLEtBQUs4VixRQUFRbEIsSUFDVG5JLEtBQU1BLEVBQ05nSyxHQUFJQSxFQUNKN1EsTUFBT0EsRUFDUGdRLE9BQVFBLEdBR1poTCxFQUFLUCxLQUFLLGFBQWN1SyxHQUV4QjVVLEtBQUsyVyxVQUFVdFYsRUFBUXJCLEtBQUs4VixRQUFRbEIsS0FVeENpQixFQUFNOU0sVUFBVTROLFVBQVksU0FBU3RWLEVBQVE0VSxHQUN6QyxJQUFJVyxFQUNBQyxFQUNBQyxFQUNBQyxFQUFhZCxFQUFNclEsT0FBU3FRLEVBQU1MLE9BQVMsZ0JBQWtCSyxFQUFNclEsTUFBUSxhQUFlcVEsRUFBTUwsT0FBUyxPQUFTLEdBQ2xIb0IsRUFBVzNWLEVBQU9pSSxLQUFLLE9BQ3ZCMk4sRUFBVSxNQUNWQyxFQUFZLEdBQ1pqWCxFQUFXRCxLQUFLeVQsTUFBTXhULFNBQ3RCa1gsRUFBUyxTQUFTTCxHQUNkRCxFQUFPLDBDQUdIRCxFQURBM1csRUFBU3NVLFNBQ0EsNEJBQThCMkMsRUFBWSxLQUFPRCxFQUFVLEtBQU9ILEVBQU8sV0FFekUsbUVBQXFFQSxFQUFPLFlBRXpGelYsRUFBT3NPLE1BQU1pSCxHQUNidlYsRUFBT3NPLE1BQU1rSCxJQVlyQixHQVJBeFYsRUFBT21JLEtBQUssaUNBQW1DdU4sRUFBYSxXQUV4RC9XLEtBQUt5VCxNQUFNeFQsU0FBU3NVLFdBQ3BCMEMsRUFBVSxXQUNWQyxFQUFZLFlBSVpGLEVBQVN4USxPQUdULE9BRkEyUSxFQUFPSCxFQUFTM00sS0FBSzRNLElBQ3JCRCxFQUFTL1EsVUFDRixFQUdRLFlBQWZnUSxFQUFNeEosTUFDTnFLLEVBQU8sd0JBQTBCYixFQUFNUSxHQUFLLGlCQUM1Q1UsRUFBT0wsSUFDZSxVQUFmYixFQUFNeEosS0FDYi9NLEVBQUUwWCxNQUNFM0ssS0FBTSxNQUNObUksSUFBSyw0QkFBOEJxQixFQUFNUSxHQUFLLFFBQzlDWSxNQUFPLFdBQ1BDLFNBQVUsUUFDVkMsUUFBUyxTQUFTeE0sR0FDZCtMLEVBQU8vTCxFQUFLLEdBQUd5TSxnQkFDZkwsRUFBT0wsTUFHTyxVQUFmYixFQUFNeEosTUFDYi9NLEVBQUUwWCxNQUNFM0ssS0FBTSxNQUNObUksSUFBSywwQkFBNEJxQixFQUFNUSxHQUFLLFFBQzVDWSxNQUFPLFdBQ1BDLFNBQVUsUUFDVkMsUUFBUyxTQUFTeE0sR0FDZCtMLEVBQU8vTCxFQUFLME0sY0FDWk4sRUFBT0wsT0FVdkJqQixFQUFNOU0sVUFBVXlELEtBQU8sV0FDbkJ4TSxLQUFLeVQsTUFBTXhLLFFBQVEsT0FBUSxLQUFNLFNBQ2pDakosS0FBSytWLFNBQVN6TSxLQUFLLG9CQUFvQnJELFNBQ3ZDakcsS0FBSytWLFNBQVNsTixZQUFZLHFCQUMxQjdJLEtBQUsrVixTQUFXLEtBQ2hCL1YsS0FBS3lULE1BQU0xSixNQUFNLFdBQ2pCL0osS0FBS3lULE1BQU14SyxRQUFRLFVBQVcsS0FBTSxVQVF4QzRNLEVBQU05TSxVQUFVdU4sS0FBTyxTQUFTekwsR0FDNUIsSUFLSTZNLEVBSkE5TSxFQURTbEwsRUFBRW1MLEVBQU14SixRQUNIK0wsUUFBUSxJQUFNcE4sS0FBS3lULE1BQU14VCxTQUFTZ0YsV0FDaERnUixFQUFRalcsS0FBSzhWLFFBQVFsTCxFQUFLUCxLQUFLLGVBQy9CekUsRUFBUXFRLEVBQU1yUSxPQUFTLE9BQ3ZCZ1EsRUFBU0ssRUFBTUwsUUFBVTVWLEtBQUt5VCxNQUFNMU4sT0FBTzZQLFNBRzNDNVYsS0FBSytWLFdBSVQvVixLQUFLeVQsTUFBTXpLLE1BQU0sV0FDakJoSixLQUFLeVQsTUFBTXhLLFFBQVEsT0FBUSxLQUFNLFNBRWpDMkIsRUFBTzVLLEtBQUt5VCxNQUFNdlEsTUFBTWxELEtBQUt5VCxNQUFNM04sU0FBUzhFLEVBQUszQyxVQUVqRGpJLEtBQUt5VCxNQUFNckwsTUFBTXdDLEVBQUszQyxTQUVILFlBQWZnTyxFQUFNeEosS0FDTmlMLEVBQU8sa0JBQW9COVIsRUFBUSxhQUFlZ1EsRUFBUyxrQ0FDdkRLLEVBQU1RLEdBQUssdUJBQXlCUixFQUFNUSxHQUFLLDhDQUM3QixVQUFmUixFQUFNeEosS0FDYmlMLEVBQU8seUNBQTJDekIsRUFBTVEsR0FDcEQsdUJBQXlCN1EsRUFBUSxhQUFlZ1EsRUFDaEQsdUZBQ2tCLFVBQWZLLEVBQU14SixPQUNiaUwsRUFBTyxrQ0FBeUM5QixFQUFTLFdBQWtCaFEsRUFDdkUsb0ZBQzJCcVEsRUFBTVEsR0FBSyxvQ0FHOUMvVyxFQUFFLGdDQUFrQ2dZLEVBQU8sVUFBVUMsWUFBWS9NLEVBQUt0QixLQUFLLGVBRTNFdEosS0FBSytWLFNBQVduTCxFQUFLdEQsU0FBUyx1QkFTbEN1TyxFQUFNOU0sVUFBVW1OLGVBQWlCLFdBQzdCLElBQUlwVyxFQUFVVCxFQUFTdVksbUJBQXFCdlksRUFBU3dZLHNCQUNqRHhZLEVBQVN5WSx3QkFFYixPQUFPaFksR0FBV0osRUFBRUksR0FBUzJKLFNBQVNzTyxTQUFTLG9CQU1uRGxDLEVBQU05TSxVQUFVbUgsUUFBVSxXQUN0QixJQUFJL04sRUFBU29JLEVBRWJ2SyxLQUFLeVQsTUFBTXJULFNBQVMrTSxJQUFJLG1CQUV4QixJQUFLaEwsS0FBV25DLEtBQUtLLFVBQ2pCTCxLQUFLeVQsTUFBTXJULFNBQVMrTSxJQUFJaEwsRUFBU25DLEtBQUtLLFVBQVU4QixJQUVwRCxJQUFLb0ksS0FBWTJKLE9BQU9DLG9CQUFvQm5VLE1BQ2YsbUJBQWxCQSxLQUFLdUssS0FBNEJ2SyxLQUFLdUssR0FBWSxPQUlqRTdLLEVBQUVxVCxHQUFHQyxZQUFZSyxZQUFZalIsUUFBUXlULE1BQVFBLEVBcFRoRCxDQXNURWxXLE9BQU8yVCxPQUFTM1QsT0FBTzRQLE9BQVE1UCxPQUFRTixVQVN6QyxTQUFVSyxFQUFHQyxFQUFRTixFQUFVTyxHQU81QixJQUFJb1ksRUFBVSxTQUFTQyxHQUNuQmpZLEtBQUtrWSxLQUFPRCxFQUNaalksS0FBS2tZLEtBQUtuWSxRQUFVTCxFQUFFUSxVQUFXOFgsRUFBUTdYLFNBQVVILEtBQUtrWSxLQUFLblksU0FDN0RDLEtBQUttWSxVQUFXLEVBQ2hCblksS0FBS3lILGNBWFosRUFZT3pILEtBQUsyTyxVQVpaLEVBY08zTyxLQUFLaVYsVUFDRG1ELHNCQUF1QjFZLEVBQUV1QyxNQUFNLFNBQVMrTixHQUNoQ0EsRUFBRWUsV0FBZ0MsWUFBbkJmLEVBQUV6RixTQUFTQyxPQUMxQnhLLEtBQUt5SCxTQUFXekgsS0FBS2tZLEtBQUt6VyxVQUMxQnpCLEtBQUsyTyxLQUFPcUIsRUFBRXpGLFNBQVNFLFFBRTVCekssTUFDSHFZLGlFQUFrRTNZLEVBQUV1QyxNQUFNLFNBQVMrTixHQUMzRUEsRUFBRWUsWUFDRi9RLEtBQUttWSxTQUFxQixjQUFWbkksRUFBRXZELE9BRXZCek0sTUFDSHNZLHlCQUEwQjVZLEVBQUV1QyxNQUFNLFNBQVMrTixHQUNuQ0EsRUFBRWUsV0FBYS9RLEtBQUttWSxXQUFhblksS0FBS2tZLEtBQUtuWSxRQUFRd1ksWUFBY3ZZLEtBQUtrWSxLQUFLblksUUFBUXlZLFlBQ25GeFksS0FBS3lZLFFBRVZ6WSxPQUdQQSxLQUFLa1ksS0FBSzlYLFNBQVN5TCxHQUFHN0wsS0FBS2lWLFdBTy9CK0MsRUFBUTdYLFVBQ0pvWSxZQUFZLEVBQ1pDLFdBQVcsR0FRZlIsRUFBUWpQLFVBQVUwUCxLQUFPLFdBRXJCLEdBQWlDLElBQTdCelksS0FBS2tZLEtBQUtqWSxTQUFTaUQsT0FJbEJ4RCxFQUFFaU0sUUFBUStNLFdBQWNoWixFQUFFaU0sUUFBUUMsV0FBdkMsQ0FJQTVMLEtBQUtrWSxLQUFLeEwsTUFBTSxHQUVoQixJQUFJSixFQUNBcU0sRUFBUWpaLEVBQUV1QyxNQUFNakMsS0FBSzJZLE1BQU8zWSxNQUM1QnlILEVBQVd6SCxLQUFLa1ksS0FBS25TLE9BQU9DLFdBQVcrQixHQUFHL0gsS0FBS3lILFVBQy9Da0gsRUFBTzNPLEtBQUtrWSxLQUFLblMsT0FBT0MsV0FBVytCLEdBQUcvSCxLQUFLMk8sTUFDM0NpSyxFQUFXNVksS0FBS2tZLEtBQUtqWSxTQUFTdVksVUFDOUJLLEVBQVc3WSxLQUFLa1ksS0FBS2pZLFNBQVNzWSxXQUU5QnZZLEtBQUtrWSxLQUFLelcsWUFBY3pCLEtBQUt5SCxXQUk3Qm9SLElBQ0F2TSxFQUFPdE0sS0FBS2tZLEtBQUt4USxZQUFZMUgsS0FBS3lILFVBQVl6SCxLQUFLa1ksS0FBS3hRLFlBQVkxSCxLQUFLMk8sTUFDekVsSCxFQUFTb0YsSUFBSW5OLEVBQUVpTSxRQUFRK00sVUFBVWhRLElBQUtpUSxHQUNqQ3hTLEtBQU9tRyxLQUFRQSxFQUFPLE9BQ3RCaEYsU0FBUyw2QkFDVEEsU0FBU3VSLElBR2RELEdBQ0FqSyxFQUFLOUIsSUFBSW5OLEVBQUVpTSxRQUFRK00sVUFBVWhRLElBQUtpUSxHQUM3QnJSLFNBQVMsNEJBQ1RBLFNBQVNzUixNQUl0QlosRUFBUWpQLFVBQVU0UCxNQUFRLFNBQVMzSSxHQUMvQnRRLEVBQUVzUSxFQUFFM08sUUFBUThFLEtBQU9tRyxLQUFRLEtBQ3RCekQsWUFBWSw2Q0FDWkEsWUFBWTdJLEtBQUtrWSxLQUFLalksU0FBU3VZLFdBQy9CM1AsWUFBWTdJLEtBQUtrWSxLQUFLalksU0FBU3NZLFlBQ3BDdlksS0FBS2tZLEtBQUtwTSxtQkFPZGtNLEVBQVFqUCxVQUFVbUgsUUFBVSxXQUN4QixJQUFJL04sRUFBU29JLEVBRWIsSUFBS3BJLEtBQVduQyxLQUFLaVYsU0FDakJqVixLQUFLa1ksS0FBSzlYLFNBQVMrTSxJQUFJaEwsRUFBU25DLEtBQUtpVixTQUFTOVMsSUFFbEQsSUFBS29JLEtBQVkySixPQUFPQyxvQkFBb0JuVSxNQUNmLG1CQUFsQkEsS0FBS3VLLEtBQTRCdkssS0FBS3VLLEdBQVksT0FJakU3SyxFQUFFcVQsR0FBR0MsWUFBWUssWUFBWWpSLFFBQVE0VixRQUFVQSxFQS9HbEQsQ0FpSEVyWSxPQUFPMlQsT0FBUzNULE9BQU80UCxPQUFRNVAsT0FBUU4sVUFVekMsU0FBVUssRUFBR0MsRUFBUU4sRUFBVU8sR0FPNUIsSUFBSWtaLEVBQVcsU0FBU3RGLEdBTXBCeFQsS0FBS3lULE1BQVFELEVBTWJ4VCxLQUFLK1ksU0FBVyxLQU1oQi9ZLEtBQUtnWixTQUFVLEVBT2ZoWixLQUFLSyxXQUNEZ1YsdUJBQXdCM1YsRUFBRXVDLE1BQU0sU0FBUytOLEdBQ2pDQSxFQUFFZSxXQUFpQyxhQUFwQmYsRUFBRXpGLFNBQVNDLEtBQ3RCeEssS0FBS3lULE1BQU14VCxTQUFTZ1osU0FDcEJqWixLQUFLc1csT0FFTHRXLEtBQUt3TSxPQUVGd0QsRUFBRWUsV0FBaUMsYUFBcEJmLEVBQUV6RixTQUFTQyxNQUU3QnhLLEtBQUt5VCxNQUFNeFQsU0FBU2daLFVBQ3BCalosS0FBS2taLHdCQUdkbFosTUFDSDRULDJCQUE0QmxVLEVBQUV1QyxNQUFNLFNBQVMrTixHQUNyQ0EsRUFBRWUsV0FBYS9RLEtBQUt5VCxNQUFNeFQsU0FBU2daLFVBQ25DalosS0FBS3NXLFFBRVZ0VyxNQUNIbVosb0JBQXFCelosRUFBRXVDLE1BQU0sU0FBUytOLEVBQUdvSixFQUFHQyxHQUNwQ3JKLEVBQUVlLFdBQ0YvUSxLQUFLc1csS0FBSzhDLEVBQUdDLElBRWxCclosTUFDSHNaLG9CQUFxQjVaLEVBQUV1QyxNQUFNLFNBQVMrTixHQUM5QkEsRUFBRWUsV0FDRi9RLEtBQUt3TSxRQUVWeE0sTUFDSHVaLHlCQUEwQjdaLEVBQUV1QyxNQUFNLFdBQzFCakMsS0FBS3lULE1BQU14VCxTQUFTdVosb0JBQXNCeFosS0FBS3lULE1BQU10SyxHQUFHLGFBQ3hEbkosS0FBS3laLFNBRVZ6WixNQUNIMFosMEJBQTJCaGEsRUFBRXVDLE1BQU0sV0FDM0JqQyxLQUFLeVQsTUFBTXhULFNBQVN1WixvQkFBc0J4WixLQUFLeVQsTUFBTXRLLEdBQUcsYUFDeERuSixLQUFLc1csUUFFVnRXLE1BQ0gyWixzQkFBdUJqYSxFQUFFdUMsTUFBTSxXQUN2QmpDLEtBQUt5VCxNQUFNeFQsU0FBU3VaLG9CQUFzQnhaLEtBQUt5VCxNQUFNdEssR0FBRyxhQUN4RG5KLEtBQUt5WixTQUVWelosTUFDSDRaLG9CQUFxQmxhLEVBQUV1QyxNQUFNLFdBQ3JCakMsS0FBS3lULE1BQU14VCxTQUFTdVosb0JBQ3BCeFosS0FBS3NXLFFBRVZ0VyxPQUlQQSxLQUFLeVQsTUFBTXJULFNBQVN5TCxHQUFHN0wsS0FBS0ssV0FHNUJMLEtBQUt5VCxNQUFNMVQsUUFBVUwsRUFBRVEsVUFBVzRZLEVBQVMzWSxTQUFVSCxLQUFLeVQsTUFBTTFULFVBT3BFK1ksRUFBUzNZLFVBQ0w4WSxVQUFVLEVBQ1ZZLGdCQUFpQixJQUNqQkwsb0JBQW9CLEVBQ3BCTSxlQUFlLEdBU25CaEIsRUFBUy9QLFVBQVV1TixLQUFPLFNBQVN5RCxFQUFTck4sR0FDeEMxTSxLQUFLZ1osU0FBVSxFQUVYaFosS0FBS3lULE1BQU10SyxHQUFHLGNBSWxCbkosS0FBS3lULE1BQU16SyxNQUFNLFlBRWpCaEosS0FBS2taLHlCQVVUSixFQUFTL1AsVUFBVWlSLGdCQUFrQixTQUFTRCxFQUFTck4sR0FJbkQsT0FISzFNLEtBQUsrWSxVQUNOcFosRUFBTzJMLGFBQWF0TCxLQUFLK1ksVUFFdEJwWixFQUFPNkwsV0FBVzlMLEVBQUV1QyxNQUFNLFdBQ3pCakMsS0FBS2daLFNBQVdoWixLQUFLeVQsTUFBTXRLLEdBQUcsU0FBV25KLEtBQUt5VCxNQUFNdEssR0FBRyxnQkFBa0I5SixFQUFTNGEsUUFHdEZqYSxLQUFLeVQsTUFBTTlFLEtBQUtqQyxHQUFTMU0sS0FBS3lULE1BQU14VCxTQUFTNlosZ0JBQzlDOVosTUFBTytaLEdBQVcvWixLQUFLeVQsTUFBTXhULFNBQVM0WixrQkFPN0NmLEVBQVMvUCxVQUFVbVEscUJBQXVCLFdBQ3RDbFosS0FBSytZLFNBQVcvWSxLQUFLZ2EsbUJBT3pCbEIsRUFBUy9QLFVBQVV5RCxLQUFPLFdBQ2pCeE0sS0FBS3lULE1BQU10SyxHQUFHLGNBSW5CeEosRUFBTzJMLGFBQWF0TCxLQUFLK1ksVUFDekIvWSxLQUFLeVQsTUFBTTFKLE1BQU0sY0FPckIrTyxFQUFTL1AsVUFBVTBRLE1BQVEsV0FDbEJ6WixLQUFLeVQsTUFBTXRLLEdBQUcsY0FJbkJuSixLQUFLZ1osU0FBVSxJQU1uQkYsRUFBUy9QLFVBQVVtSCxRQUFVLFdBQ3pCLElBQUkvTixFQUFTb0ksRUFFYnZLLEtBQUt3TSxPQUVMLElBQUtySyxLQUFXbkMsS0FBS0ssVUFDakJMLEtBQUt5VCxNQUFNclQsU0FBUytNLElBQUloTCxFQUFTbkMsS0FBS0ssVUFBVThCLElBRXBELElBQUtvSSxLQUFZMkosT0FBT0Msb0JBQW9CblUsTUFDZixtQkFBbEJBLEtBQUt1SyxLQUE0QnZLLEtBQUt1SyxHQUFZLE9BSWpFN0ssRUFBRXFULEdBQUdDLFlBQVlLLFlBQVlqUixRQUFRNlcsU0FBV0gsRUE1TG5ELENBOExFblosT0FBTzJULE9BQVMzVCxPQUFPNFAsT0FBUTVQLE9BQVFOLFVBU3pDLFNBQVVLLEVBQUdDLEVBQVFOLEVBQVVPLEdBQzVCLGFBT0EsSUFBSXNhLEVBQWEsU0FBUzFHLEdBTXRCeFQsS0FBS3lULE1BQVFELEVBT2J4VCxLQUFLbWEsY0FBZSxFQU9wQm5hLEtBQUtvYSxVQU9McGEsS0FBS3FhLGFBT0xyYSxLQUFLc2EsY0FNTHRhLEtBQUtJLFNBQVdKLEtBQUt5VCxNQUFNclQsU0FPM0JKLEtBQUt1YSxZQUNENUwsS0FBTTNPLEtBQUt5VCxNQUFNOUUsS0FDakJDLEtBQU01TyxLQUFLeVQsTUFBTTdFLEtBQ2pCTCxHQUFJdk8sS0FBS3lULE1BQU1sRixJQVFuQnZPLEtBQUtLLFdBQ0QrVix3QkFBeUIxVyxFQUFFdUMsTUFBTSxTQUFTK04sR0FDbENBLEVBQUVlLFdBQWEvUSxLQUFLeVQsTUFBTXhULFNBQVN1YSxVQUNuQ3hhLEtBQUtzYSxXQUFXelgsS0FBSyxlQUFpQjdDLEtBQUt5VCxNQUFNeFQsU0FBU3dhLFNBQVcsS0FDakUvYSxFQUFFc1EsRUFBRWxGLFNBQVN4QixLQUFLLGNBQWNtRyxRQUFRLGNBQWNwRixLQUFLLFlBQWMsV0FFbEZySyxNQUNIMGEscUJBQXNCaGIsRUFBRXVDLE1BQU0sU0FBUytOLEdBQy9CQSxFQUFFZSxXQUFhL1EsS0FBS3lULE1BQU14VCxTQUFTdWEsVUFDbkN4YSxLQUFLc2EsV0FBV3pLLE9BQU9HLEVBQUV4USxTQUFVLEVBQUdRLEtBQUtzYSxXQUFXSyxRQUUzRDNhLE1BQ0g0YSxzQkFBdUJsYixFQUFFdUMsTUFBTSxTQUFTK04sR0FDaENBLEVBQUVlLFdBQWEvUSxLQUFLeVQsTUFBTXhULFNBQVN1YSxVQUNuQ3hhLEtBQUtzYSxXQUFXekssT0FBT0csRUFBRXhRLFNBQVUsSUFFeENRLE1BQ0hxVix1QkFBd0IzVixFQUFFdUMsTUFBTSxTQUFTK04sR0FDakNBLEVBQUVlLFdBQWdDLFlBQW5CZixFQUFFekYsU0FBU0MsTUFDMUJ4SyxLQUFLNmEsUUFFVjdhLE1BQ0g0VCwyQkFBNEJsVSxFQUFFdUMsTUFBTSxTQUFTK04sR0FDckNBLEVBQUVlLFlBQWMvUSxLQUFLbWEsZUFDckJuYSxLQUFLeVQsTUFBTXhLLFFBQVEsYUFBYyxLQUFNLGNBQ3ZDakosS0FBS2lELGFBQ0xqRCxLQUFLZ0wsU0FDTGhMLEtBQUs2YSxPQUNMN2EsS0FBS21hLGNBQWUsRUFDcEJuYSxLQUFLeVQsTUFBTXhLLFFBQVEsY0FBZSxLQUFNLGdCQUU3Q2pKLE1BQ0htVyx5QkFBMEJ6VyxFQUFFdUMsTUFBTSxTQUFTK04sR0FDbkNBLEVBQUVlLFdBQWEvUSxLQUFLbWEsZUFDcEJuYSxLQUFLeVQsTUFBTXhLLFFBQVEsVUFBVyxLQUFNLGNBQ3BDakosS0FBS2dMLFNBQ0xoTCxLQUFLNmEsT0FDTDdhLEtBQUt5VCxNQUFNeEssUUFBUSxZQUFhLEtBQU0sZ0JBRTNDakosT0FJUEEsS0FBS3lULE1BQU0xVCxRQUFVTCxFQUFFUSxVQUFXZ2EsRUFBVy9aLFNBQVVILEtBQUt5VCxNQUFNMVQsU0FHbEVDLEtBQUtJLFNBQVN5TCxHQUFHN0wsS0FBS0ssWUFRMUI2WixFQUFXL1osVUFDUDJhLEtBQUssRUFDTEMsU0FBVyxHQUFJLElBQ2ZDLFVBQVUsRUFDVkMsV0FBWSxNQUNaQyxjQUFjLEVBQ2RDLGtCQUFtQixVQUNuQkMsVUFBWSxXQUFZLFlBQ3hCQyxRQUFTLEVBQ1RaLFNBQVUsVUFDVmEsVUFBVyxXQUNYQyxNQUFNLEVBQ05DLFVBQVUsRUFDVmhCLFVBQVUsRUFDVmlCLFdBQVcsRUFDWEMsZUFBZSxHQU9uQnhCLEVBQVduUixVQUFVOUYsV0FBYSxXQUM5QixJQUFJMFksRUFDQTFiLEVBQVdELEtBQUt5VCxNQUFNeFQsU0FHMUJELEtBQUtxYSxVQUFVdUIsV0FBYTNiLEVBQVNpYixhQUFleGIsRUFBRU8sRUFBU2liLGNBQ3pEeGIsRUFBRSxTQUFTNEgsU0FBU3JILEVBQVNrYixtQkFBbUI1VCxTQUFTdkgsS0FBS0ksV0FBV2tILFNBQVMsWUFFeEZ0SCxLQUFLcWEsVUFBVXdCLFVBQVluYyxFQUFFLElBQU1PLEVBQVNnYixXQUFhLEtBQ3BEM1QsU0FBU3JILEVBQVNtYixTQUFTLElBQzNCMUQsS0FBS3pYLEVBQVM4YSxRQUFRLElBQ3RCdlQsVUFBVXhILEtBQUtxYSxVQUFVdUIsV0FDekIvUCxHQUFHLFFBQVNuTSxFQUFFdUMsTUFBTSxTQUFTK04sR0FDMUJoUSxLQUFLNE8sS0FBSzNPLEVBQVMrYSxXQUNwQmhiLE9BQ1BBLEtBQUtxYSxVQUFVeUIsTUFBUXBjLEVBQUUsSUFBTU8sRUFBU2diLFdBQWEsS0FDaEQzVCxTQUFTckgsRUFBU21iLFNBQVMsSUFDM0IxRCxLQUFLelgsRUFBUzhhLFFBQVEsSUFDdEJ4VCxTQUFTdkgsS0FBS3FhLFVBQVV1QixXQUN4Qi9QLEdBQUcsUUFBU25NLEVBQUV1QyxNQUFNLFNBQVMrTixHQUMxQmhRLEtBQUsyTyxLQUFLMU8sRUFBUythLFdBQ3BCaGIsT0FHRkMsRUFBU3VhLFdBQ1Z4YSxLQUFLc2EsWUFBZTVhLEVBQUUsU0FDakI0SCxTQUFTckgsRUFBU3dhLFVBQ2xCdlQsT0FBT3hILEVBQUUsV0FDVHFjLEtBQUssZUFHZC9iLEtBQUtxYSxVQUFVMkIsV0FBYS9iLEVBQVN5YixjQUFnQmhjLEVBQUVPLEVBQVN5YixlQUMxRGhjLEVBQUUsU0FBUzRILFNBQVNySCxFQUFTcWIsV0FBVy9ULFNBQVN2SCxLQUFLSSxXQUFXa0gsU0FBUyxZQUVoRnRILEtBQUtxYSxVQUFVMkIsVUFBVW5RLEdBQUcsUUFBUyxNQUFPbk0sRUFBRXVDLE1BQU0sU0FBUytOLEdBQ3pELElBQUkvSCxFQUFRdkksRUFBRXNRLEVBQUUzTyxRQUFRb0ksU0FBU04sR0FBR25KLEtBQUtxYSxVQUFVMkIsV0FDN0N0YyxFQUFFc1EsRUFBRTNPLFFBQVE0RyxRQUFVdkksRUFBRXNRLEVBQUUzTyxRQUFRb0ksU0FBU3hCLFFBRWpEK0gsRUFBRS9DLGlCQUVGak4sS0FBS3VPLEdBQUd0RyxFQUFPaEksRUFBU3diLFlBQ3pCemIsT0FHSCxJQUFLMmIsS0FBWTNiLEtBQUt1YSxXQUNsQnZhLEtBQUt5VCxNQUFNa0ksR0FBWWpjLEVBQUV1QyxNQUFNakMsS0FBSzJiLEdBQVczYixPQVF2RGthLEVBQVduUixVQUFVbUgsUUFBVSxXQUMzQixJQUFJL04sRUFBUzhaLEVBQVMxUixFQUFVb1IsRUFFaEMsSUFBS3haLEtBQVduQyxLQUFLSyxVQUNqQkwsS0FBS0ksU0FBUytNLElBQUloTCxFQUFTbkMsS0FBS0ssVUFBVThCLElBRTlDLElBQUs4WixLQUFXamMsS0FBS3FhLFVBQ2pCcmEsS0FBS3FhLFVBQVU0QixHQUFTaFcsU0FFNUIsSUFBSzBWLEtBQVkzYixLQUFLa2MsU0FDbEJsYyxLQUFLeVQsTUFBTWtJLEdBQVkzYixLQUFLdWEsV0FBV29CLEdBRTNDLElBQUtwUixLQUFZMkosT0FBT0Msb0JBQW9CblUsTUFDZixtQkFBbEJBLEtBQUt1SyxLQUE0QnZLLEtBQUt1SyxHQUFZLE9BUWpFMlAsRUFBV25SLFVBQVVpQyxPQUFTLFdBQzFCLElBQUk5SSxFQUFHaWEsRUFDSEMsRUFBUXBjLEtBQUt5VCxNQUFNN00sU0FBU0osT0FBUyxFQUNyQzZWLEVBQVFELEVBQVFwYyxLQUFLeVQsTUFBTXZRLFFBQVFzRCxPQUNuQzJCLEVBQVVuSSxLQUFLeVQsTUFBTXRMLFNBQVEsR0FDN0JsSSxFQUFXRCxLQUFLeVQsTUFBTXhULFNBQ3RCOEcsRUFBTzlHLEVBQVNyQixRQUFVcUIsRUFBUzRELFdBQWE1RCxFQUFTdWEsU0FDbkQsRUFBSXZhLEVBQVN1YixVQUFZdmIsRUFBU2lELE1BTTVDLEdBSnlCLFNBQXJCakQsRUFBU29iLFVBQ1RwYixFQUFTb2IsUUFBVTNVLEtBQUtDLElBQUkxRyxFQUFTb2IsUUFBU3BiLEVBQVNpRCxRQUd2RGpELEVBQVNzYixNQUE0QixRQUFwQnRiLEVBQVNvYixRQUcxQixJQUZBcmIsS0FBS29hLFVBRUFsWSxFQUFJa2EsRUFBT0QsRUFBSSxFQUFPLEVBQUdqYSxFQUFJbWEsRUFBT25hLElBQUssQ0FDMUMsR0FBSWlhLEdBQUtwVixHQUFjLElBQU5vVixFQUFTLENBS3RCLEdBSkFuYyxLQUFLb2EsT0FBT3ZYLE1BQ1JyQixNQUFPa0YsS0FBS0MsSUFBSXdCLEVBQVNqRyxFQUFJa2EsR0FDN0IxVCxJQUFLeEcsRUFBSWthLEVBQVFyVixFQUFPLElBRXhCTCxLQUFLQyxJQUFJd0IsRUFBU2pHLEVBQUlrYSxLQUFXalUsRUFDakMsTUFFSmdVLEVBQUksRUFBRyxFQUVYQSxHQUFLbmMsS0FBS3lULE1BQU16RixRQUFRaE8sS0FBS3lULE1BQU0zTixTQUFTNUQsTUFVeERnWSxFQUFXblIsVUFBVThSLEtBQU8sV0FDeEIsSUFBSTlOLEVBQ0E5TSxFQUFXRCxLQUFLeVQsTUFBTXhULFNBQ3RCcWMsRUFBV3RjLEtBQUt5VCxNQUFNdlEsUUFBUXNELFFBQVV2RyxFQUFTaUQsTUFDakQrRSxFQUFRakksS0FBS3lULE1BQU0zTixTQUFTOUYsS0FBS3lULE1BQU1oUyxXQUN2QzBCLEVBQU9sRCxFQUFTa0QsTUFBUWxELEVBQVNtRCxPQUVyQ3BELEtBQUtxYSxVQUFVdUIsVUFBVTFTLFlBQVksWUFBYWpKLEVBQVM2YSxLQUFPd0IsR0FFOURyYyxFQUFTNmEsTUFDVDlhLEtBQUtxYSxVQUFVd0IsVUFBVTNTLFlBQVksWUFBYS9GLEdBQVE4RSxHQUFTakksS0FBS3lULE1BQU12TCxTQUFRLElBQ3RGbEksS0FBS3FhLFVBQVV5QixNQUFNNVMsWUFBWSxZQUFhL0YsR0FBUThFLEdBQVNqSSxLQUFLeVQsTUFBTXRMLFNBQVEsS0FHdEZuSSxLQUFLcWEsVUFBVTJCLFVBQVU5UyxZQUFZLFlBQWFqSixFQUFTc2IsTUFBUWUsR0FFL0RyYyxFQUFTc2IsT0FDVHhPLEVBQWEvTSxLQUFLb2EsT0FBTzVULE9BQVN4RyxLQUFLcWEsVUFBVTJCLFVBQVVoVyxXQUFXUSxPQUVsRXZHLEVBQVN1YSxVQUEyQixJQUFmek4sRUFDckIvTSxLQUFLcWEsVUFBVTJCLFVBQVV0RSxLQUFLMVgsS0FBS3NhLFdBQVd4UixLQUFLLEtBQzVDaUUsRUFBYSxFQUNwQi9NLEtBQUtxYSxVQUFVMkIsVUFBVTlVLE9BQU8sSUFBSWlNLE1BQU1wRyxFQUFhLEdBQUdqRSxLQUFLOUksS0FBS3NhLFdBQVcsS0FDeEV2TixFQUFhLEdBQ3BCL00sS0FBS3FhLFVBQVUyQixVQUFVaFcsV0FBV3ZELE1BQU1zSyxHQUFZOUcsU0FHMURqRyxLQUFLcWEsVUFBVTJCLFVBQVUxUyxLQUFLLFdBQVdULFlBQVksVUFDckQ3SSxLQUFLcWEsVUFBVTJCLFVBQVVoVyxXQUFXK0IsR0FBR3JJLEVBQUVzUyxRQUFRaFMsS0FBS3lCLFVBQVd6QixLQUFLb2EsU0FBUzlTLFNBQVMsWUFTaEc0UyxFQUFXblIsVUFBVXFJLFVBQVksU0FBU3ZHLEdBQ3RDLElBQUk1SyxFQUFXRCxLQUFLeVQsTUFBTXhULFNBRTFCNEssRUFBTTBSLE1BQ0Z0VSxNQUFPdkksRUFBRXNTLFFBQVFoUyxLQUFLeUIsVUFBV3pCLEtBQUtvYSxRQUN0Q25KLE1BQU9qUixLQUFLb2EsT0FBTzVULE9BQ25CTyxLQUFNOUcsSUFBYUEsRUFBU3JCLFFBQVVxQixFQUFTNEQsV0FBYTVELEVBQVN1YSxTQUMvRCxFQUFJdmEsRUFBU3ViLFVBQVl2YixFQUFTaUQsU0FTaERnWCxFQUFXblIsVUFBVXRILFFBQVUsV0FDM0IsSUFBSUEsRUFBVXpCLEtBQUt5VCxNQUFNM04sU0FBUzlGLEtBQUt5VCxNQUFNaFMsV0FDN0MsT0FBTy9CLEVBQUV5TCxLQUFLbkwsS0FBS29hLE9BQVExYSxFQUFFdUMsTUFBTSxTQUFTc2EsRUFBTXRVLEdBQzlDLE9BQU9zVSxFQUFLL2EsT0FBU0MsR0FBVzhhLEVBQUs3VCxLQUFPakgsR0FDN0N6QixPQUFPMmEsT0FRZFQsRUFBV25SLFVBQVV5VCxZQUFjLFNBQVNDLEdBQ3hDLElBQUlqZCxFQUFVZ0gsRUFDVnZHLEVBQVdELEtBQUt5VCxNQUFNeFQsU0FhMUIsTUFYd0IsUUFBcEJBLEVBQVNvYixTQUNUN2IsRUFBV0UsRUFBRXNTLFFBQVFoUyxLQUFLeUIsVUFBV3pCLEtBQUtvYSxRQUMxQzVULEVBQVN4RyxLQUFLb2EsT0FBTzVULE9BQ3JCaVcsSUFBY2pkLElBQWFBLEVBQzNCQSxFQUFXUSxLQUFLb2EsUUFBUzVhLEVBQVdnSCxFQUFVQSxHQUFVQSxHQUFRaEYsUUFFaEVoQyxFQUFXUSxLQUFLeVQsTUFBTTNOLFNBQVM5RixLQUFLeVQsTUFBTWhTLFdBQzFDK0UsRUFBU3hHLEtBQUt5VCxNQUFNdlEsUUFBUXNELE9BQzVCaVcsRUFBWWpkLEdBQVlTLEVBQVNvYixRQUFVN2IsR0FBWVMsRUFBU29iLFNBRzdEN2IsR0FRWDBhLEVBQVduUixVQUFVNEYsS0FBTyxTQUFTakMsR0FDakNoTixFQUFFdUMsTUFBTWpDLEtBQUt1YSxXQUFXaE0sR0FBSXZPLEtBQUt5VCxNQUFqQy9ULENBQXdDTSxLQUFLd2MsYUFBWSxHQUFPOVAsSUFRcEV3TixFQUFXblIsVUFBVTZGLEtBQU8sU0FBU2xDLEdBQ2pDaE4sRUFBRXVDLE1BQU1qQyxLQUFLdWEsV0FBV2hNLEdBQUl2TyxLQUFLeVQsTUFBakMvVCxDQUF3Q00sS0FBS3djLGFBQVksR0FBUTlQLElBVXJFd04sRUFBV25SLFVBQVV3RixHQUFLLFNBQVMvTyxFQUFVa04sRUFBT2dRLEdBQ2hELElBQUlsVyxHQUVDa1csR0FBWTFjLEtBQUtvYSxPQUFPNVQsUUFDekJBLEVBQVN4RyxLQUFLb2EsT0FBTzVULE9BQ3JCOUcsRUFBRXVDLE1BQU1qQyxLQUFLdWEsV0FBV2hNLEdBQUl2TyxLQUFLeVQsTUFBakMvVCxDQUF3Q00sS0FBS29hLFFBQVM1YSxFQUFXZ0gsRUFBVUEsR0FBVUEsR0FBUWhGLE1BQU9rTCxJQUVwR2hOLEVBQUV1QyxNQUFNakMsS0FBS3VhLFdBQVdoTSxHQUFJdk8sS0FBS3lULE1BQWpDL1QsQ0FBd0NGLEVBQVVrTixJQUkxRGhOLEVBQUVxVCxHQUFHQyxZQUFZSyxZQUFZalIsUUFBUThYLFdBQWFBLEVBcFhyRCxDQXNYRXZhLE9BQU8yVCxPQUFTM1QsT0FBTzRQLE9BQVE1UCxPQUFRTixVQVN6QyxTQUFVSyxFQUFHQyxFQUFRTixFQUFVTyxHQUM1QixhQU9BLElBQUkrYyxFQUFPLFNBQVNuSixHQU1oQnhULEtBQUt5VCxNQUFRRCxFQU9ieFQsS0FBSzRjLFdBTUw1YyxLQUFLSSxTQUFXSixLQUFLeVQsTUFBTXJULFNBTzNCSixLQUFLSyxXQUNEdVQsMkJBQTRCbFUsRUFBRXVDLE1BQU0sU0FBUytOLEdBQ3JDQSxFQUFFZSxXQUFtRCxZQUF0Qy9RLEtBQUt5VCxNQUFNeFQsU0FBUzZELGVBQ25DcEUsRUFBRUMsR0FBUXNKLFFBQVEsOEJBRXZCakosTUFDSG9XLHdCQUF5QjFXLEVBQUV1QyxNQUFNLFNBQVMrTixHQUN0QyxHQUFJQSxFQUFFZSxVQUFXLENBQ2IsSUFBSThMLEVBQU9uZCxFQUFFc1EsRUFBRWxGLFNBQVN4QixLQUFLLGVBQWVtRyxRQUFRLGVBQWVwRixLQUFLLGFBRXhFLElBQUt3UyxFQUNELE9BR0o3YyxLQUFLNGMsUUFBUUMsR0FBUTdNLEVBQUVsRixVQUU1QjlLLE1BQ0hxVix1QkFBd0IzVixFQUFFdUMsTUFBTSxTQUFTK04sR0FDckMsR0FBSUEsRUFBRWUsV0FBaUMsYUFBcEJmLEVBQUV6RixTQUFTQyxLQUFxQixDQUMvQyxJQUFJL0ksRUFBVXpCLEtBQUt5VCxNQUFNdlEsTUFBTWxELEtBQUt5VCxNQUFNM04sU0FBUzlGLEtBQUt5VCxNQUFNaFMsWUFDMURvYixFQUFPbmQsRUFBRVAsSUFBSWEsS0FBSzRjLFFBQVMsU0FBU2hTLEVBQU1pUyxHQUN0QyxPQUFPalMsSUFBU25KLEVBQVVvYixFQUFPLE9BQ2xDL1QsT0FFUCxJQUFLK1QsR0FBUWxkLEVBQU9tZCxTQUFTRCxLQUFLcGEsTUFBTSxLQUFPb2EsRUFDM0MsT0FHSmxkLEVBQU9tZCxTQUFTRCxLQUFPQSxJQUU1QjdjLE9BSVBBLEtBQUt5VCxNQUFNMVQsUUFBVUwsRUFBRVEsVUFBV3ljLEVBQUt4YyxTQUFVSCxLQUFLeVQsTUFBTTFULFNBRzVEQyxLQUFLSSxTQUFTeUwsR0FBRzdMLEtBQUtLLFdBR3RCWCxFQUFFQyxHQUFRa00sR0FBRyw0QkFBNkJuTSxFQUFFdUMsTUFBTSxTQUFTK04sR0FDdkQsSUFBSTZNLEVBQU9sZCxFQUFPbWQsU0FBU0QsS0FBS0UsVUFBVSxHQUN0QzdaLEVBQVFsRCxLQUFLeVQsTUFBTTFOLE9BQU9DLFdBQzFCeEcsRUFBV1EsS0FBSzRjLFFBQVFDLElBQVMzWixFQUFNK0UsTUFBTWpJLEtBQUs0YyxRQUFRQyxTQTdFekUsSUErRWVyZCxHQUEwQkEsSUFBYVEsS0FBS3lULE1BQU1oUyxXQUl0RHpCLEtBQUt5VCxNQUFNbEYsR0FBR3ZPLEtBQUt5VCxNQUFNM04sU0FBU3RHLElBQVcsR0FBTyxJQUNyRFEsUUFPUDJjLEVBQUt4YyxVQUNENmMsaUJBQWlCLEdBT3JCTCxFQUFLNVQsVUFBVW1ILFFBQVUsV0FDckIsSUFBSS9OLEVBQVNvSSxFQUViN0ssRUFBRUMsR0FBUXdOLElBQUksNkJBRWQsSUFBS2hMLEtBQVduQyxLQUFLSyxVQUNqQkwsS0FBS3lULE1BQU1yVCxTQUFTK00sSUFBSWhMLEVBQVNuQyxLQUFLSyxVQUFVOEIsSUFFcEQsSUFBS29JLEtBQVkySixPQUFPQyxvQkFBb0JuVSxNQUNmLG1CQUFsQkEsS0FBS3VLLEtBQTRCdkssS0FBS3VLLEdBQVksT0FJakU3SyxFQUFFcVQsR0FBR0MsWUFBWUssWUFBWWpSLFFBQVF1YSxLQUFPQSxFQWhIL0MsQ0FrSEVoZCxPQUFPMlQsT0FBUzNULE9BQU80UCxPQUFRNVAsT0FBUU4sVUFXekMsU0FBVUssRUFBR0MsRUFBUU4sRUFBVU8sR0FxQzVCLFNBQVNxZCxFQUFLMVMsRUFBVTJTLEdBQ3BCLElBQUloTCxHQUFTLEVBQ1RtSyxFQUFROVIsRUFBU2hJLE9BQU8sR0FBRzRhLGNBQWdCNVMsRUFBUzlILE1BQU0sR0FTOUQsT0FQQS9DLEVBQUVzQyxNQUFNdUksRUFBVyxJQUFNNlMsRUFBU3RVLEtBQUt1VCxFQUFRLEtBQU9BLEdBQU9qUSxNQUFNLEtBQU0sU0FBU2xLLEVBQUdxSSxHQUNqRixHQUFJOFMsRUFBTTlTLEtBQWMzSyxFQUVwQixPQURBc1MsR0FBU2dMLEdBQVczUyxHQUNiLElBSVIySCxFQUdYLFNBQVNnTCxFQUFTM1MsR0FDZCxPQUFPMFMsRUFBSzFTLEdBQVUsR0FsRDFCLElBQUk4UyxFQUFRM2QsRUFBRSxhQUFhc1AsSUFBSSxHQUFHcU8sTUFDOUJELEVBQVcsa0JBQWtCaFIsTUFBTSxLQUNuQzZGLEdBRVF2SixLQUNJNFUsaUJBQWtCLHNCQUNsQkMsY0FBZSxnQkFDZkMsWUFBYSxpQkFDYjVSLFdBQVksa0JBTnhCcUcsR0FVUXZKLEtBQ0krVSxnQkFBaUIscUJBQ2pCQyxhQUFjLGVBQ2RDLFdBQVksZ0JBQ1pqRixVQUFXLGlCQUl2QmtGLEVBQ21CLFdBQ1gsUUFBU1gsRUFBSyxjQUZ0QlcsRUFJcUIsV0FDYixRQUFTWCxFQUFLLGdCQUx0QlcsRUFVbUIsV0FDWCxRQUFTWCxFQUFLLGVBSkYsV0FDWixRQUFTQSxFQUFLLGVBeUJ0QlcsS0FFQWxlLEVBQUVpTSxRQUFRQyxXQUFhLElBQUlpUyxPQUFPWCxFQUFTLGVBQzNDeGQsRUFBRWlNLFFBQVFDLFdBQVdsRCxJQUFNdUosRUFBa0J2SixJQUFLaEosRUFBRWlNLFFBQVFDLGFBRzVEZ1MsTUFFQWxlLEVBQUVpTSxRQUFRK00sVUFBWSxJQUFJbUYsT0FBT1gsRUFBUyxjQUMxQ3hkLEVBQUVpTSxRQUFRK00sVUFBVWhRLElBQU11SixFQUFpQnZKLElBQUtoSixFQUFFaU0sUUFBUStNLFlBRzFEa0YsTUFFQWxlLEVBQUVpTSxRQUFRTyxVQUFZLElBQUkyUixPQUFPWCxFQUFTLGNBQzFDeGQsRUFBRWlNLFFBQVEyQixZQUFjc1EsS0F0RS9CLENBeUVFamUsT0FBTzJULE9BQVMzVCxPQUFPNFAsT0FBUTVQLE9BQVFOLFVBQzFDSyxFQUFFTCxVQUFVeWUsTUFBTSxXQUVkcGUsRUFBRWlNLFFBQVFvUyxZQUVDLGdCQURDMWUsU0FBUzJlLGNBQWMsU0FLaEN0ZSxFQUFFaU0sUUFBUW9TLGNBQ1RyZSxFQUFFLGVBQWVzQyxLQUFLLFdBQ2xCdEMsRUFBRU0sTUFBTXNILFNBQVMsbUJBSXJCNUgsRUFBRSxlQUFlNEosS0FBSyxtQkFBbUJ1QyxHQUFHLG1CQUFvQixTQUFTbUUsR0FHckUsSUFBSW9ELEVBQVExVCxFQUFFTSxNQUNWaWUsRUFBVTdLLEVBQU0zSixTQUFTSCxLQUFLLFNBRXBCLFNBQVYwRyxFQUFFdkQsS0FDaUIsSUFBZjJHLEVBQU04SyxNQUNORCxFQUFRM1csU0FBUyxpQkFFakIyVyxFQUFRcFYsWUFBWSxpQkFHVCxRQUFWbUgsRUFBRXZELEtBQ1ksSUFBZjJHLEVBQU04SyxNQUNORCxFQUFRM1csU0FBUyxpQkFHakIyVyxFQUFRcFYsWUFBWSxpQkFBaUJ2QixTQUFTLHdCQUduQyxTQUFWMEksRUFBRXZELE1BQ2EsS0FBaEIyRyxFQUFNOEssT0FDTkQsRUFBUXBWLFlBQVksNkJBMEJ4Q25KLEVBQUUsV0FBV21NLEdBQUcsUUFBUyxXQUNyQm5NLEVBQUUsY0FBYzhNLE9BQU9sRixTQUFTLFlBR3BDNUgsRUFBRSxVQUFVbU0sR0FBRyxRQUFTLFdBQ3BCbk0sRUFBRSxjQUFjOE0sT0FBTzNELFlBQVksWUFFdkNuSixFQUFFTCxVQUFVeWUsTUFBTSxXQUNKcGUsRUFBRSxpQkFDUnNULGFBQ0E3UCxNQUFLLEVBQ0xNLE9BQU8sRUFDUHVYLFNBQVMsSUFDVEYsS0FBSSxFQUNKNVgsTUFBTSxNQVFiLFdBRUcsSUFBSWliLEVBQUssU0FBU0MsRUFBVUMsR0FDeEIsSUFDSUMsR0FEQUQsRUFBVUEsR0FBV2hmLFVBQ0ZrZixpQkFBaUJILEdBQ3hDLFNBQVUzYixNQUFNNk8sS0FBS2dOLElBdUp6QjNlLE9BQU82ZSxVQVJTLFNBQVNDLEVBQWdCMWUsR0FDdEJvZSxFQUFHTSxHQUVUQyxRQUFRLFNBQVNDLElBL0k5QixTQUF3QkEsRUFBUzVlLEdBMEM3QixTQUFTNmUsSUFDTEQsRUFBUUUsY0FBYyxzQkFBc0JDLFVBQVU3WSxPQUFPLGtCQUFtQixxQkFDaEYwWSxFQUFRRSxjQUFjLHVCQUF1QkMsVUFBVTdZLE9BQU8sbUJBQW9CLHNCQUVsRjhZLEVBQWFELFVBQVU3WSxPQUFPLHFCQUM5QitZLEVBQWtCRixVQUFVN1ksT0FBTyxvQkFDbkNnWixFQUFhSCxVQUFVN1ksT0FBTyxtQkFDOUJnWixFQUFhSCxVQUFVcFAsSUFBSSxxQkFDUHVQLEVBQWFDLFVBQ2pDRCxFQUFhSCxVQUFVN1ksT0FBTyxxQkFFOUJrWixHQUFVLEVBQ1VSLEVBQVFPLFVBRXhCRSxJQUFzQkMsR0FDdEJDLElBSVIsU0FBU0MsRUFBZUMsR0FDaEJMLElBQ0pBLEdBQVUsRUFDVnhmLE9BQU8yTCxhQUFhbVUsR0FDcEJDLEVBQVdGLEdBRVhQLEVBQWVOLEVBQVFFLGNBQWMsdUJBQ3hCQyxVQUFVN1ksT0FBTyxxQkFDOUJnWixFQUFhSCxVQUFVcFAsSUFBSSxtQkFDM0JpUCxFQUFRRSxjQUFjYyxFQUFTLGdCQUFrQkgsR0FBU1YsVUFBVXBQLElBQUkscUJBRXhFcVAsRUFBZUosRUFBUUUsY0FBY2MsRUFBUyxTQUFXSCxHQUN6RFIsRUFBb0JMLEVBQVFFLGNBQWNjLEVBQVMsV0FBYUgsR0FFaEViLEVBQVFFLGNBQWMsb0JBQW9CQyxVQUFVcFAsSUFBSSxxQkFDeERpUCxFQUFRRSxjQUFjLHFCQUFxQkMsVUFBVXBQLElBQUksc0JBRXpEcVAsRUFBYUQsVUFBVXBQLElBQUkscUJBQzNCc1AsRUFBa0JGLFVBQVVwUCxJQUFJLG9CQUVacVAsRUFBYUcsVUFFakNILEVBQWFELFVBQVVwUCxJQUFJLG1CQUMzQnNQLEVBQWtCRixVQUFVcFAsSUFBSSxvQkFFaENsRSxXQUFXb1QsRUFBcUJnQixFQUFZQyxJQUtoRCxTQUFTQyxJQUNEWCxHQUNBbmYsS0FBSzhlLFVBQVVpQixTQUFTLHVCQUN4QmhnQixFQUFRaWdCLG9CQUNSWCxHQUFxQixFQUNyQlYsRUFBUUcsVUFBVXBQLElBQUksMkJBSzFCNlAsR0FGZXZmLEtBQUtpZ0IsYUFBYSxnQkFTckMsU0FBU1gsSUFDTDNmLE9BQU8yTCxhQUFhbVUsR0FDcEIsSUFBSVMsR0FBU25nQixFQUFRb2dCLGtCQUFvQkEsSUFDekNULEVBQ2VVLElBQWFWLEVBQVcsR0FFdkNELEVBQWdCalUsV0FBVyxXQUN2QitULEVBQWVHLElBQ2hCUSxHQW5IUCxJQWdCSVQsRUFJQVYsRUFDQUMsRUFDQUMsRUF0QkFVLEVBQVMsUUFHVFUsR0FEQTFCLEVBQVVBLEdBQ1lFLGNBQWNjLEVBQVMsa0JBQzdDVyxFQUFVbkMsRUFBR3dCLEVBQVMsUUFBU2hCLEdBQy9CNEIsRUFBWXBDLEVBQUd3QixFQUFTLGVBQWdCaEIsR0FDeEM2QixFQUFlckMsRUFBR3dCLEVBQVMsVUFBV2hCLEdBQ3RDOEIsRUFBY3RDLEVBQUd3QixFQUFTLHdCQUF5QmhCLEdBRW5EeUIsRUFBY0UsRUFBUTlaLE9BQ3RCa1osRUFBVyxFQUNYUCxHQUFVLEVBQ1ZTLEVBQWdGLEtBQW5FaE4sV0FBVzhOLGlCQUFpQkwsR0FBYSx3QkFDdERSLEVBQWdGLEtBQWhFak4sV0FBVzhOLGlCQUFpQkwsR0FBYSxxQkFFekRqQixHQUFvQixFQUVwQmUsRUFBbUIsSUFDbkJkLEdBQXFCLEVBb0d6QixHQTdGSWlCLEVBQVE1QixRQUFRLFNBQVNpQyxFQUFRMVksR0FDN0IwWSxFQUFPN0IsVUFBVXBQLElBQUksY0FBZ0J6SCxFQUFRLE1BR2pEc1ksRUFBVTdCLFFBQVEsU0FBU2tDLEVBQVUzWSxHQUNqQzJZLEVBQVNDLGFBQWEsYUFBYzVZLEVBQVEsR0FDNUMyWSxFQUFTOUIsVUFBVXBQLElBQUkscUJBQXVCekgsRUFBUSxNQUcxRHVZLEVBQWE5QixRQUFRLFNBQVNvQyxFQUFLN1ksR0FDL0I2WSxFQUFJaEMsVUFBVXBQLElBQUksZ0JBQWtCekgsRUFBUSxNQW9FcERzWSxFQUFVN0IsUUFBUSxTQUFTa0MsR0FDdkJBLEVBQVNqUSxpQkFBaUIsUUFBU21QLEtBY25DL2YsRUFBUWdoQixjQUFnQmhoQixFQUFRb2dCLGlCQUFtQixFQUFHLENBQ3RELElBQTRCLElBQXhCcGdCLEVBQVFnaEIsWUFBdUIsT0FFbkMzQixHQUFvQixFQUNwQkUsSUFFQVgsRUFBUUcsVUFBVXBQLElBQUksdUJBQ0ZpUCxFQUFRTyxVQUE1QixJQUVJZ0IsR0FBU25nQixFQUFRb2dCLGtCQUFvQkEsRUFDekNELEdBQVNMLEVBQWVELEVBRXhCYSxFQUFZL0IsUUFBUSxTQUFTc0MsR0FDekJBLEVBQVUzRCxNQUFNelIsV0FBYSxhQUFnQnNVLEVBQVEsSUFBUSxNQUlyRXZCLEVBQVFFLGNBQWMsaUNBQWlDQyxVQUFVcFAsSUFBSSxxQkFRakV1UixDQUFldEMsRUFBUzVlLE1BeEpwQyxHQXVLQXllLFVBQVUsbUJBQW9CMkIsaUJBQWtCLE1BRWhELElBQUllLFVBQVk3aEIsU0FBU3dmLGNBQWMsaUJBRXBDcGMsTUFBTTZPLEtBQUtqUyxTQUFTa2YsaUJBQWlCLDJCQUEyQkcsUUFBUSxTQUFTeUMsR0FDaEZBLEVBQUt4USxpQkFBaUIsUUFBUyxXQUMzQnVRLFVBQVVwQyxVQUFVc0MsT0FBTyxzQkFJbkMvaEIsU0FBU3dmLGNBQWMsNkJBQTZCbE8saUJBQWlCLFFBQVMsV0FDMUV1USxVQUFVcEMsVUFBVTdZLE9BQU8sb0JBRy9CNUcsU0FBU3dmLGNBQWMsZ0NBQWdDbE8saUJBQWlCLFFBQVMsV0FDN0V0UixTQUFTd2YsY0FBYyxtQkFBbUJDLFVBQVVzQyxPQUFPIiwiZmlsZSI6Im1haW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyJcblxuXG5cblxuLyoqXG4gKiBPd2wgQ2Fyb3VzZWwgdjIuMi4xXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE3IERhdmlkIERldXRzY2hcbiAqIExpY2Vuc2VkIHVuZGVyICAoKVxuICovXG4vKipcbiAqIE93bCBjYXJvdXNlbFxuICogQHZlcnNpb24gMi4xLjZcbiAqIEBhdXRob3IgQmFydG9zeiBXb2pjaWVjaG93c2tpXG4gKiBAYXV0aG9yIERhdmlkIERldXRzY2hcbiAqIEBsaWNlbnNlIFRoZSBNSVQgTGljZW5zZSAoTUlUKVxuICogQHRvZG8gTGF6eSBMb2FkIEljb25cbiAqIEB0b2RvIHByZXZlbnQgYW5pbWF0aW9uZW5kIGJ1YmxpbmdcbiAqIEB0b2RvIGl0ZW1zU2NhbGVVcFxuICogQHRvZG8gVGVzdCBaZXB0b1xuICogQHRvZG8gc3RhZ2VQYWRkaW5nIGNhbGN1bGF0ZSB3cm9uZyBhY3RpdmUgY2xhc3Nlc1xuICovXG47KGZ1bmN0aW9uKCQsIHdpbmRvdywgZG9jdW1lbnQsIHVuZGVmaW5lZCkge1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGNhcm91c2VsLlxuICAgICAqIEBjbGFzcyBUaGUgT3dsIENhcm91c2VsLlxuICAgICAqIEBwdWJsaWNcbiAgICAgKiBAcGFyYW0ge0hUTUxFbGVtZW50fGpRdWVyeX0gZWxlbWVudCAtIFRoZSBlbGVtZW50IHRvIGNyZWF0ZSB0aGUgY2Fyb3VzZWwgZm9yLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc10gLSBUaGUgb3B0aW9uc1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIE93bChlbGVtZW50LCBvcHRpb25zKSB7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEN1cnJlbnQgc2V0dGluZ3MgZm9yIHRoZSBjYXJvdXNlbC5cbiAgICAgICAgICogQHB1YmxpY1xuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5zZXR0aW5ncyA9IG51bGw7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEN1cnJlbnQgb3B0aW9ucyBzZXQgYnkgdGhlIGNhbGxlciBpbmNsdWRpbmcgZGVmYXVsdHMuXG4gICAgICAgICAqIEBwdWJsaWNcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMub3B0aW9ucyA9ICQuZXh0ZW5kKHt9LCBPd2wuRGVmYXVsdHMsIG9wdGlvbnMpO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBQbHVnaW4gZWxlbWVudC5cbiAgICAgICAgICogQHB1YmxpY1xuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy4kZWxlbWVudCA9ICQoZWxlbWVudCk7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFByb3hpZWQgZXZlbnQgaGFuZGxlcnMuXG4gICAgICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuX2hhbmRsZXJzID0ge307XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFJlZmVyZW5jZXMgdG8gdGhlIHJ1bm5pbmcgcGx1Z2lucyBvZiB0aGlzIGNhcm91c2VsLlxuICAgICAgICAgKiBAcHJvdGVjdGVkXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLl9wbHVnaW5zID0ge307XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEN1cnJlbnRseSBzdXBwcmVzc2VkIGV2ZW50cyB0byBwcmV2ZW50IHRoZW0gZnJvbSBiZWVpbmcgcmV0cmlnZ2VyZWQuXG4gICAgICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuX3N1cHJlc3MgPSB7fTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogQWJzb2x1dGUgY3VycmVudCBwb3NpdGlvbi5cbiAgICAgICAgICogQHByb3RlY3RlZFxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5fY3VycmVudCA9IG51bGw7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEFuaW1hdGlvbiBzcGVlZCBpbiBtaWxsaXNlY29uZHMuXG4gICAgICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuX3NwZWVkID0gbnVsbDtcblxuICAgICAgICAvKipcbiAgICAgICAgICogQ29vcmRpbmF0ZXMgb2YgYWxsIGl0ZW1zIGluIHBpeGVsLlxuICAgICAgICAgKiBAdG9kbyBUaGUgbmFtZSBvZiB0aGlzIG1lbWJlciBpcyBtaXNzbGVhZGluZy5cbiAgICAgICAgICogQHByb3RlY3RlZFxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5fY29vcmRpbmF0ZXMgPSBbXTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogQ3VycmVudCBicmVha3BvaW50LlxuICAgICAgICAgKiBAdG9kbyBSZWFsIG1lZGlhIHF1ZXJpZXMgd291bGQgYmUgbmljZS5cbiAgICAgICAgICogQHByb3RlY3RlZFxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5fYnJlYWtwb2ludCA9IG51bGw7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEN1cnJlbnQgd2lkdGggb2YgdGhlIHBsdWdpbiBlbGVtZW50LlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5fd2lkdGggPSBudWxsO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBBbGwgcmVhbCBpdGVtcy5cbiAgICAgICAgICogQHByb3RlY3RlZFxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5faXRlbXMgPSBbXTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogQWxsIGNsb25lZCBpdGVtcy5cbiAgICAgICAgICogQHByb3RlY3RlZFxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5fY2xvbmVzID0gW107XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIE1lcmdlIHZhbHVlcyBvZiBhbGwgaXRlbXMuXG4gICAgICAgICAqIEB0b2RvIE1heWJlIHRoaXMgY291bGQgYmUgcGFydCBvZiBhIHBsdWdpbi5cbiAgICAgICAgICogQHByb3RlY3RlZFxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5fbWVyZ2VycyA9IFtdO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBXaWR0aHMgb2YgYWxsIGl0ZW1zLlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5fd2lkdGhzID0gW107XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEludmFsaWRhdGVkIHBhcnRzIHdpdGhpbiB0aGUgdXBkYXRlIHByb2Nlc3MuXG4gICAgICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuX2ludmFsaWRhdGVkID0ge307XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIE9yZGVyZWQgbGlzdCBvZiB3b3JrZXJzIGZvciB0aGUgdXBkYXRlIHByb2Nlc3MuXG4gICAgICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuX3BpcGUgPSBbXTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogQ3VycmVudCBzdGF0ZSBpbmZvcm1hdGlvbiBmb3IgdGhlIGRyYWcgb3BlcmF0aW9uLlxuICAgICAgICAgKiBAdG9kbyAjMjYxXG4gICAgICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuX2RyYWcgPSB7XG4gICAgICAgICAgICB0aW1lOiBudWxsLFxuICAgICAgICAgICAgdGFyZ2V0OiBudWxsLFxuICAgICAgICAgICAgcG9pbnRlcjogbnVsbCxcbiAgICAgICAgICAgIHN0YWdlOiB7XG4gICAgICAgICAgICAgICAgc3RhcnQ6IG51bGwsXG4gICAgICAgICAgICAgICAgY3VycmVudDogbnVsbFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGRpcmVjdGlvbjogbnVsbFxuICAgICAgICB9O1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDdXJyZW50IHN0YXRlIGluZm9ybWF0aW9uIGFuZCB0aGVpciB0YWdzLlxuICAgICAgICAgKiBAdHlwZSB7T2JqZWN0fVxuICAgICAgICAgKiBAcHJvdGVjdGVkXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLl9zdGF0ZXMgPSB7XG4gICAgICAgICAgICBjdXJyZW50OiB7fSxcbiAgICAgICAgICAgIHRhZ3M6IHtcbiAgICAgICAgICAgICAgICAnaW5pdGlhbGl6aW5nJzogWyAnYnVzeScgXSxcbiAgICAgICAgICAgICAgICAnYW5pbWF0aW5nJzogWyAnYnVzeScgXSxcbiAgICAgICAgICAgICAgICAnZHJhZ2dpbmcnOiBbICdpbnRlcmFjdGluZycgXVxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgICQuZWFjaChbICdvblJlc2l6ZScsICdvblRocm90dGxlZFJlc2l6ZScgXSwgJC5wcm94eShmdW5jdGlvbihpLCBoYW5kbGVyKSB7XG4gICAgICAgICAgICB0aGlzLl9oYW5kbGVyc1toYW5kbGVyXSA9ICQucHJveHkodGhpc1toYW5kbGVyXSwgdGhpcyk7XG4gICAgICAgIH0sIHRoaXMpKTtcblxuICAgICAgICAkLmVhY2goT3dsLlBsdWdpbnMsICQucHJveHkoZnVuY3Rpb24oa2V5LCBwbHVnaW4pIHtcbiAgICAgICAgICAgIHRoaXMuX3BsdWdpbnNba2V5LmNoYXJBdCgwKS50b0xvd2VyQ2FzZSgpICsga2V5LnNsaWNlKDEpXVxuICAgICAgICAgICAgICAgID0gbmV3IHBsdWdpbih0aGlzKTtcbiAgICAgICAgfSwgdGhpcykpO1xuXG4gICAgICAgICQuZWFjaChPd2wuV29ya2VycywgJC5wcm94eShmdW5jdGlvbihwcmlvcml0eSwgd29ya2VyKSB7XG4gICAgICAgICAgICB0aGlzLl9waXBlLnB1c2goe1xuICAgICAgICAgICAgICAgICdmaWx0ZXInOiB3b3JrZXIuZmlsdGVyLFxuICAgICAgICAgICAgICAgICdydW4nOiAkLnByb3h5KHdvcmtlci5ydW4sIHRoaXMpXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSwgdGhpcykpO1xuXG4gICAgICAgIHRoaXMuc2V0dXAoKTtcbiAgICAgICAgdGhpcy5pbml0aWFsaXplKCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRGVmYXVsdCBvcHRpb25zIGZvciB0aGUgY2Fyb3VzZWwuXG4gICAgICogQHB1YmxpY1xuICAgICAqL1xuICAgIE93bC5EZWZhdWx0cyA9IHtcbiAgICAgICAgaXRlbXM6IDMsXG4gICAgICAgIGxvb3A6IGZhbHNlLFxuICAgICAgICBjZW50ZXI6IGZhbHNlLFxuICAgICAgICByZXdpbmQ6IGZhbHNlLFxuXG4gICAgICAgIG1vdXNlRHJhZzogdHJ1ZSxcbiAgICAgICAgdG91Y2hEcmFnOiB0cnVlLFxuICAgICAgICBwdWxsRHJhZzogdHJ1ZSxcbiAgICAgICAgZnJlZURyYWc6IGZhbHNlLFxuXG4gICAgICAgIG1hcmdpbjogMCxcbiAgICAgICAgc3RhZ2VQYWRkaW5nOiAwLFxuXG4gICAgICAgIG1lcmdlOiBmYWxzZSxcbiAgICAgICAgbWVyZ2VGaXQ6IHRydWUsXG4gICAgICAgIGF1dG9XaWR0aDogZmFsc2UsXG5cbiAgICAgICAgc3RhcnRQb3NpdGlvbjogMCxcbiAgICAgICAgcnRsOiBmYWxzZSxcblxuICAgICAgICBzbWFydFNwZWVkOiAyNTAsXG4gICAgICAgIGZsdWlkU3BlZWQ6IGZhbHNlLFxuICAgICAgICBkcmFnRW5kU3BlZWQ6IGZhbHNlLFxuXG4gICAgICAgIHJlc3BvbnNpdmU6IHt9LFxuICAgICAgICByZXNwb25zaXZlUmVmcmVzaFJhdGU6IDIwMCxcbiAgICAgICAgcmVzcG9uc2l2ZUJhc2VFbGVtZW50OiB3aW5kb3csXG5cbiAgICAgICAgZmFsbGJhY2tFYXNpbmc6ICdzd2luZycsXG5cbiAgICAgICAgaW5mbzogZmFsc2UsXG5cbiAgICAgICAgbmVzdGVkSXRlbVNlbGVjdG9yOiBmYWxzZSxcbiAgICAgICAgaXRlbUVsZW1lbnQ6ICdkaXYnLFxuICAgICAgICBzdGFnZUVsZW1lbnQ6ICdkaXYnLFxuXG4gICAgICAgIHJlZnJlc2hDbGFzczogJ293bC1yZWZyZXNoJyxcbiAgICAgICAgbG9hZGVkQ2xhc3M6ICdvd2wtbG9hZGVkJyxcbiAgICAgICAgbG9hZGluZ0NsYXNzOiAnb3dsLWxvYWRpbmcnLFxuICAgICAgICBydGxDbGFzczogJ293bC1ydGwnLFxuICAgICAgICByZXNwb25zaXZlQ2xhc3M6ICdvd2wtcmVzcG9uc2l2ZScsXG4gICAgICAgIGRyYWdDbGFzczogJ293bC1kcmFnJyxcbiAgICAgICAgaXRlbUNsYXNzOiAnb3dsLWl0ZW0nLFxuICAgICAgICBzdGFnZUNsYXNzOiAnb3dsLXN0YWdlJyxcbiAgICAgICAgc3RhZ2VPdXRlckNsYXNzOiAnb3dsLXN0YWdlLW91dGVyJyxcbiAgICAgICAgZ3JhYkNsYXNzOiAnb3dsLWdyYWInXG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEVudW1lcmF0aW9uIGZvciB3aWR0aC5cbiAgICAgKiBAcHVibGljXG4gICAgICogQHJlYWRvbmx5XG4gICAgICogQGVudW0ge1N0cmluZ31cbiAgICAgKi9cbiAgICBPd2wuV2lkdGggPSB7XG4gICAgICAgIERlZmF1bHQ6ICdkZWZhdWx0JyxcbiAgICAgICAgSW5uZXI6ICdpbm5lcicsXG4gICAgICAgIE91dGVyOiAnb3V0ZXInXG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEVudW1lcmF0aW9uIGZvciB0eXBlcy5cbiAgICAgKiBAcHVibGljXG4gICAgICogQHJlYWRvbmx5XG4gICAgICogQGVudW0ge1N0cmluZ31cbiAgICAgKi9cbiAgICBPd2wuVHlwZSA9IHtcbiAgICAgICAgRXZlbnQ6ICdldmVudCcsXG4gICAgICAgIFN0YXRlOiAnc3RhdGUnXG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIENvbnRhaW5zIGFsbCByZWdpc3RlcmVkIHBsdWdpbnMuXG4gICAgICogQHB1YmxpY1xuICAgICAqL1xuICAgIE93bC5QbHVnaW5zID0ge307XG5cbiAgICAvKipcbiAgICAgKiBMaXN0IG9mIHdvcmtlcnMgaW52b2x2ZWQgaW4gdGhlIHVwZGF0ZSBwcm9jZXNzLlxuICAgICAqL1xuICAgIE93bC5Xb3JrZXJzID0gWyB7XG4gICAgICAgIGZpbHRlcjogWyAnd2lkdGgnLCAnc2V0dGluZ3MnIF0sXG4gICAgICAgIHJ1bjogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB0aGlzLl93aWR0aCA9IHRoaXMuJGVsZW1lbnQud2lkdGgoKTtcbiAgICAgICAgfVxuICAgIH0sIHtcbiAgICAgICAgZmlsdGVyOiBbICd3aWR0aCcsICdpdGVtcycsICdzZXR0aW5ncycgXSxcbiAgICAgICAgcnVuOiBmdW5jdGlvbihjYWNoZSkge1xuICAgICAgICAgICAgY2FjaGUuY3VycmVudCA9IHRoaXMuX2l0ZW1zICYmIHRoaXMuX2l0ZW1zW3RoaXMucmVsYXRpdmUodGhpcy5fY3VycmVudCldO1xuICAgICAgICB9XG4gICAgfSwge1xuICAgICAgICBmaWx0ZXI6IFsgJ2l0ZW1zJywgJ3NldHRpbmdzJyBdLFxuICAgICAgICBydW46IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdGhpcy4kc3RhZ2UuY2hpbGRyZW4oJy5jbG9uZWQnKS5yZW1vdmUoKTtcbiAgICAgICAgfVxuICAgIH0sIHtcbiAgICAgICAgZmlsdGVyOiBbICd3aWR0aCcsICdpdGVtcycsICdzZXR0aW5ncycgXSxcbiAgICAgICAgcnVuOiBmdW5jdGlvbihjYWNoZSkge1xuICAgICAgICAgICAgdmFyIG1hcmdpbiA9IHRoaXMuc2V0dGluZ3MubWFyZ2luIHx8ICcnLFxuICAgICAgICAgICAgICAgIGdyaWQgPSAhdGhpcy5zZXR0aW5ncy5hdXRvV2lkdGgsXG4gICAgICAgICAgICAgICAgcnRsID0gdGhpcy5zZXR0aW5ncy5ydGwsXG4gICAgICAgICAgICAgICAgY3NzID0ge1xuICAgICAgICAgICAgICAgICAgICAnd2lkdGgnOiAnYXV0bycsXG4gICAgICAgICAgICAgICAgICAgICdtYXJnaW4tbGVmdCc6IHJ0bCA/IG1hcmdpbiA6ICcnLFxuICAgICAgICAgICAgICAgICAgICAnbWFyZ2luLXJpZ2h0JzogcnRsID8gJycgOiBtYXJnaW5cbiAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAhZ3JpZCAmJiB0aGlzLiRzdGFnZS5jaGlsZHJlbigpLmNzcyhjc3MpO1xuXG4gICAgICAgICAgICBjYWNoZS5jc3MgPSBjc3M7XG4gICAgICAgIH1cbiAgICB9LCB7XG4gICAgICAgIGZpbHRlcjogWyAnd2lkdGgnLCAnaXRlbXMnLCAnc2V0dGluZ3MnIF0sXG4gICAgICAgIHJ1bjogZnVuY3Rpb24oY2FjaGUpIHtcbiAgICAgICAgICAgIHZhciB3aWR0aCA9ICh0aGlzLndpZHRoKCkgLyB0aGlzLnNldHRpbmdzLml0ZW1zKS50b0ZpeGVkKDMpIC0gdGhpcy5zZXR0aW5ncy5tYXJnaW4sXG4gICAgICAgICAgICAgICAgbWVyZ2UgPSBudWxsLFxuICAgICAgICAgICAgICAgIGl0ZXJhdG9yID0gdGhpcy5faXRlbXMubGVuZ3RoLFxuICAgICAgICAgICAgICAgIGdyaWQgPSAhdGhpcy5zZXR0aW5ncy5hdXRvV2lkdGgsXG4gICAgICAgICAgICAgICAgd2lkdGhzID0gW107XG5cbiAgICAgICAgICAgIGNhY2hlLml0ZW1zID0ge1xuICAgICAgICAgICAgICAgIG1lcmdlOiBmYWxzZSxcbiAgICAgICAgICAgICAgICB3aWR0aDogd2lkdGhcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIHdoaWxlIChpdGVyYXRvci0tKSB7XG4gICAgICAgICAgICAgICAgbWVyZ2UgPSB0aGlzLl9tZXJnZXJzW2l0ZXJhdG9yXTtcbiAgICAgICAgICAgICAgICBtZXJnZSA9IHRoaXMuc2V0dGluZ3MubWVyZ2VGaXQgJiYgTWF0aC5taW4obWVyZ2UsIHRoaXMuc2V0dGluZ3MuaXRlbXMpIHx8IG1lcmdlO1xuXG4gICAgICAgICAgICAgICAgY2FjaGUuaXRlbXMubWVyZ2UgPSBtZXJnZSA+IDEgfHwgY2FjaGUuaXRlbXMubWVyZ2U7XG5cbiAgICAgICAgICAgICAgICB3aWR0aHNbaXRlcmF0b3JdID0gIWdyaWQgPyB0aGlzLl9pdGVtc1tpdGVyYXRvcl0ud2lkdGgoKSA6IHdpZHRoICogbWVyZ2U7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRoaXMuX3dpZHRocyA9IHdpZHRocztcbiAgICAgICAgfVxuICAgIH0sIHtcbiAgICAgICAgZmlsdGVyOiBbICdpdGVtcycsICdzZXR0aW5ncycgXSxcbiAgICAgICAgcnVuOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciBjbG9uZXMgPSBbXSxcbiAgICAgICAgICAgICAgICBpdGVtcyA9IHRoaXMuX2l0ZW1zLFxuICAgICAgICAgICAgICAgIHNldHRpbmdzID0gdGhpcy5zZXR0aW5ncyxcbiAgICAgICAgICAgICAgICAvLyBUT0RPOiBTaG91bGQgYmUgY29tcHV0ZWQgZnJvbSBudW1iZXIgb2YgbWluIHdpZHRoIGl0ZW1zIGluIHN0YWdlXG4gICAgICAgICAgICAgICAgdmlldyA9IE1hdGgubWF4KHNldHRpbmdzLml0ZW1zICogMiwgNCksXG4gICAgICAgICAgICAgICAgc2l6ZSA9IE1hdGguY2VpbChpdGVtcy5sZW5ndGggLyAyKSAqIDIsXG4gICAgICAgICAgICAgICAgcmVwZWF0ID0gc2V0dGluZ3MubG9vcCAmJiBpdGVtcy5sZW5ndGggPyBzZXR0aW5ncy5yZXdpbmQgPyB2aWV3IDogTWF0aC5tYXgodmlldywgc2l6ZSkgOiAwLFxuICAgICAgICAgICAgICAgIGFwcGVuZCA9ICcnLFxuICAgICAgICAgICAgICAgIHByZXBlbmQgPSAnJztcblxuICAgICAgICAgICAgcmVwZWF0IC89IDI7XG5cbiAgICAgICAgICAgIHdoaWxlIChyZXBlYXQtLSkge1xuICAgICAgICAgICAgICAgIC8vIFN3aXRjaCB0byBvbmx5IHVzaW5nIGFwcGVuZGVkIGNsb25lc1xuICAgICAgICAgICAgICAgIGNsb25lcy5wdXNoKHRoaXMubm9ybWFsaXplKGNsb25lcy5sZW5ndGggLyAyLCB0cnVlKSk7XG4gICAgICAgICAgICAgICAgYXBwZW5kID0gYXBwZW5kICsgaXRlbXNbY2xvbmVzW2Nsb25lcy5sZW5ndGggLSAxXV1bMF0ub3V0ZXJIVE1MO1xuICAgICAgICAgICAgICAgIGNsb25lcy5wdXNoKHRoaXMubm9ybWFsaXplKGl0ZW1zLmxlbmd0aCAtIDEgLSAoY2xvbmVzLmxlbmd0aCAtIDEpIC8gMiwgdHJ1ZSkpO1xuICAgICAgICAgICAgICAgIHByZXBlbmQgPSBpdGVtc1tjbG9uZXNbY2xvbmVzLmxlbmd0aCAtIDFdXVswXS5vdXRlckhUTUwgKyBwcmVwZW5kO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aGlzLl9jbG9uZXMgPSBjbG9uZXM7XG5cbiAgICAgICAgICAgICQoYXBwZW5kKS5hZGRDbGFzcygnY2xvbmVkJykuYXBwZW5kVG8odGhpcy4kc3RhZ2UpO1xuICAgICAgICAgICAgJChwcmVwZW5kKS5hZGRDbGFzcygnY2xvbmVkJykucHJlcGVuZFRvKHRoaXMuJHN0YWdlKTtcbiAgICAgICAgfVxuICAgIH0sIHtcbiAgICAgICAgZmlsdGVyOiBbICd3aWR0aCcsICdpdGVtcycsICdzZXR0aW5ncycgXSxcbiAgICAgICAgcnVuOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciBydGwgPSB0aGlzLnNldHRpbmdzLnJ0bCA/IDEgOiAtMSxcbiAgICAgICAgICAgICAgICBzaXplID0gdGhpcy5fY2xvbmVzLmxlbmd0aCArIHRoaXMuX2l0ZW1zLmxlbmd0aCxcbiAgICAgICAgICAgICAgICBpdGVyYXRvciA9IC0xLFxuICAgICAgICAgICAgICAgIHByZXZpb3VzID0gMCxcbiAgICAgICAgICAgICAgICBjdXJyZW50ID0gMCxcbiAgICAgICAgICAgICAgICBjb29yZGluYXRlcyA9IFtdO1xuXG4gICAgICAgICAgICB3aGlsZSAoKytpdGVyYXRvciA8IHNpemUpIHtcbiAgICAgICAgICAgICAgICBwcmV2aW91cyA9IGNvb3JkaW5hdGVzW2l0ZXJhdG9yIC0gMV0gfHwgMDtcbiAgICAgICAgICAgICAgICBjdXJyZW50ID0gdGhpcy5fd2lkdGhzW3RoaXMucmVsYXRpdmUoaXRlcmF0b3IpXSArIHRoaXMuc2V0dGluZ3MubWFyZ2luO1xuICAgICAgICAgICAgICAgIGNvb3JkaW5hdGVzLnB1c2gocHJldmlvdXMgKyBjdXJyZW50ICogcnRsKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhpcy5fY29vcmRpbmF0ZXMgPSBjb29yZGluYXRlcztcbiAgICAgICAgfVxuICAgIH0sIHtcbiAgICAgICAgZmlsdGVyOiBbICd3aWR0aCcsICdpdGVtcycsICdzZXR0aW5ncycgXSxcbiAgICAgICAgcnVuOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciBwYWRkaW5nID0gdGhpcy5zZXR0aW5ncy5zdGFnZVBhZGRpbmcsXG4gICAgICAgICAgICAgICAgY29vcmRpbmF0ZXMgPSB0aGlzLl9jb29yZGluYXRlcyxcbiAgICAgICAgICAgICAgICBjc3MgPSB7XG4gICAgICAgICAgICAgICAgICAgICd3aWR0aCc6IE1hdGguY2VpbChNYXRoLmFicyhjb29yZGluYXRlc1tjb29yZGluYXRlcy5sZW5ndGggLSAxXSkpICsgcGFkZGluZyAqIDIsXG4gICAgICAgICAgICAgICAgICAgICdwYWRkaW5nLWxlZnQnOiBwYWRkaW5nIHx8ICcnLFxuICAgICAgICAgICAgICAgICAgICAncGFkZGluZy1yaWdodCc6IHBhZGRpbmcgfHwgJydcbiAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICB0aGlzLiRzdGFnZS5jc3MoY3NzKTtcbiAgICAgICAgfVxuICAgIH0sIHtcbiAgICAgICAgZmlsdGVyOiBbICd3aWR0aCcsICdpdGVtcycsICdzZXR0aW5ncycgXSxcbiAgICAgICAgcnVuOiBmdW5jdGlvbihjYWNoZSkge1xuICAgICAgICAgICAgdmFyIGl0ZXJhdG9yID0gdGhpcy5fY29vcmRpbmF0ZXMubGVuZ3RoLFxuICAgICAgICAgICAgICAgIGdyaWQgPSAhdGhpcy5zZXR0aW5ncy5hdXRvV2lkdGgsXG4gICAgICAgICAgICAgICAgaXRlbXMgPSB0aGlzLiRzdGFnZS5jaGlsZHJlbigpO1xuXG4gICAgICAgICAgICBpZiAoZ3JpZCAmJiBjYWNoZS5pdGVtcy5tZXJnZSkge1xuICAgICAgICAgICAgICAgIHdoaWxlIChpdGVyYXRvci0tKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhY2hlLmNzcy53aWR0aCA9IHRoaXMuX3dpZHRoc1t0aGlzLnJlbGF0aXZlKGl0ZXJhdG9yKV07XG4gICAgICAgICAgICAgICAgICAgIGl0ZW1zLmVxKGl0ZXJhdG9yKS5jc3MoY2FjaGUuY3NzKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGdyaWQpIHtcbiAgICAgICAgICAgICAgICBjYWNoZS5jc3Mud2lkdGggPSBjYWNoZS5pdGVtcy53aWR0aDtcbiAgICAgICAgICAgICAgICBpdGVtcy5jc3MoY2FjaGUuY3NzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0sIHtcbiAgICAgICAgZmlsdGVyOiBbICdpdGVtcycgXSxcbiAgICAgICAgcnVuOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHRoaXMuX2Nvb3JkaW5hdGVzLmxlbmd0aCA8IDEgJiYgdGhpcy4kc3RhZ2UucmVtb3ZlQXR0cignc3R5bGUnKTtcbiAgICAgICAgfVxuICAgIH0sIHtcbiAgICAgICAgZmlsdGVyOiBbICd3aWR0aCcsICdpdGVtcycsICdzZXR0aW5ncycgXSxcbiAgICAgICAgcnVuOiBmdW5jdGlvbihjYWNoZSkge1xuICAgICAgICAgICAgY2FjaGUuY3VycmVudCA9IGNhY2hlLmN1cnJlbnQgPyB0aGlzLiRzdGFnZS5jaGlsZHJlbigpLmluZGV4KGNhY2hlLmN1cnJlbnQpIDogMDtcbiAgICAgICAgICAgIGNhY2hlLmN1cnJlbnQgPSBNYXRoLm1heCh0aGlzLm1pbmltdW0oKSwgTWF0aC5taW4odGhpcy5tYXhpbXVtKCksIGNhY2hlLmN1cnJlbnQpKTtcbiAgICAgICAgICAgIHRoaXMucmVzZXQoY2FjaGUuY3VycmVudCk7XG4gICAgICAgIH1cbiAgICB9LCB7XG4gICAgICAgIGZpbHRlcjogWyAncG9zaXRpb24nIF0sXG4gICAgICAgIHJ1bjogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB0aGlzLmFuaW1hdGUodGhpcy5jb29yZGluYXRlcyh0aGlzLl9jdXJyZW50KSk7XG4gICAgICAgIH1cbiAgICB9LCB7XG4gICAgICAgIGZpbHRlcjogWyAnd2lkdGgnLCAncG9zaXRpb24nLCAnaXRlbXMnLCAnc2V0dGluZ3MnIF0sXG4gICAgICAgIHJ1bjogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2YXIgcnRsID0gdGhpcy5zZXR0aW5ncy5ydGwgPyAxIDogLTEsXG4gICAgICAgICAgICAgICAgcGFkZGluZyA9IHRoaXMuc2V0dGluZ3Muc3RhZ2VQYWRkaW5nICogMixcbiAgICAgICAgICAgICAgICBiZWdpbiA9IHRoaXMuY29vcmRpbmF0ZXModGhpcy5jdXJyZW50KCkpICsgcGFkZGluZyxcbiAgICAgICAgICAgICAgICBlbmQgPSBiZWdpbiArIHRoaXMud2lkdGgoKSAqIHJ0bCxcbiAgICAgICAgICAgICAgICBpbm5lciwgb3V0ZXIsIG1hdGNoZXMgPSBbXSwgaSwgbjtcblxuICAgICAgICAgICAgZm9yIChpID0gMCwgbiA9IHRoaXMuX2Nvb3JkaW5hdGVzLmxlbmd0aDsgaSA8IG47IGkrKykge1xuICAgICAgICAgICAgICAgIGlubmVyID0gdGhpcy5fY29vcmRpbmF0ZXNbaSAtIDFdIHx8IDA7XG4gICAgICAgICAgICAgICAgb3V0ZXIgPSBNYXRoLmFicyh0aGlzLl9jb29yZGluYXRlc1tpXSkgKyBwYWRkaW5nICogcnRsO1xuXG4gICAgICAgICAgICAgICAgaWYgKCh0aGlzLm9wKGlubmVyLCAnPD0nLCBiZWdpbikgJiYgKHRoaXMub3AoaW5uZXIsICc+JywgZW5kKSkpXG4gICAgICAgICAgICAgICAgICAgIHx8ICh0aGlzLm9wKG91dGVyLCAnPCcsIGJlZ2luKSAmJiB0aGlzLm9wKG91dGVyLCAnPicsIGVuZCkpKSB7XG4gICAgICAgICAgICAgICAgICAgIG1hdGNoZXMucHVzaChpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRoaXMuJHN0YWdlLmNoaWxkcmVuKCcuYWN0aXZlJykucmVtb3ZlQ2xhc3MoJ2FjdGl2ZScpO1xuICAgICAgICAgICAgdGhpcy4kc3RhZ2UuY2hpbGRyZW4oJzplcSgnICsgbWF0Y2hlcy5qb2luKCcpLCA6ZXEoJykgKyAnKScpLmFkZENsYXNzKCdhY3RpdmUnKTtcblxuICAgICAgICAgICAgaWYgKHRoaXMuc2V0dGluZ3MuY2VudGVyKSB7XG4gICAgICAgICAgICAgICAgdGhpcy4kc3RhZ2UuY2hpbGRyZW4oJy5jZW50ZXInKS5yZW1vdmVDbGFzcygnY2VudGVyJyk7XG4gICAgICAgICAgICAgICAgdGhpcy4kc3RhZ2UuY2hpbGRyZW4oKS5lcSh0aGlzLmN1cnJlbnQoKSkuYWRkQ2xhc3MoJ2NlbnRlcicpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSBdO1xuXG4gICAgLyoqXG4gICAgICogSW5pdGlhbGl6ZXMgdGhlIGNhcm91c2VsLlxuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKi9cbiAgICBPd2wucHJvdG90eXBlLmluaXRpYWxpemUgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdGhpcy5lbnRlcignaW5pdGlhbGl6aW5nJyk7XG4gICAgICAgIHRoaXMudHJpZ2dlcignaW5pdGlhbGl6ZScpO1xuXG4gICAgICAgIHRoaXMuJGVsZW1lbnQudG9nZ2xlQ2xhc3ModGhpcy5zZXR0aW5ncy5ydGxDbGFzcywgdGhpcy5zZXR0aW5ncy5ydGwpO1xuXG4gICAgICAgIGlmICh0aGlzLnNldHRpbmdzLmF1dG9XaWR0aCAmJiAhdGhpcy5pcygncHJlLWxvYWRpbmcnKSkge1xuICAgICAgICAgICAgdmFyIGltZ3MsIG5lc3RlZFNlbGVjdG9yLCB3aWR0aDtcbiAgICAgICAgICAgIGltZ3MgPSB0aGlzLiRlbGVtZW50LmZpbmQoJ2ltZycpO1xuICAgICAgICAgICAgbmVzdGVkU2VsZWN0b3IgPSB0aGlzLnNldHRpbmdzLm5lc3RlZEl0ZW1TZWxlY3RvciA/ICcuJyArIHRoaXMuc2V0dGluZ3MubmVzdGVkSXRlbVNlbGVjdG9yIDogdW5kZWZpbmVkO1xuICAgICAgICAgICAgd2lkdGggPSB0aGlzLiRlbGVtZW50LmNoaWxkcmVuKG5lc3RlZFNlbGVjdG9yKS53aWR0aCgpO1xuXG4gICAgICAgICAgICBpZiAoaW1ncy5sZW5ndGggJiYgd2lkdGggPD0gMCkge1xuICAgICAgICAgICAgICAgIHRoaXMucHJlbG9hZEF1dG9XaWR0aEltYWdlcyhpbWdzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuJGVsZW1lbnQuYWRkQ2xhc3ModGhpcy5vcHRpb25zLmxvYWRpbmdDbGFzcyk7XG5cbiAgICAgICAgLy8gY3JlYXRlIHN0YWdlXG4gICAgICAgIHRoaXMuJHN0YWdlID0gJCgnPCcgKyB0aGlzLnNldHRpbmdzLnN0YWdlRWxlbWVudCArICcgY2xhc3M9XCInICsgdGhpcy5zZXR0aW5ncy5zdGFnZUNsYXNzICsgJ1wiLz4nKVxuICAgICAgICAgICAgLndyYXAoJzxkaXYgY2xhc3M9XCInICsgdGhpcy5zZXR0aW5ncy5zdGFnZU91dGVyQ2xhc3MgKyAnXCIvPicpO1xuXG4gICAgICAgIC8vIGFwcGVuZCBzdGFnZVxuICAgICAgICB0aGlzLiRlbGVtZW50LmFwcGVuZCh0aGlzLiRzdGFnZS5wYXJlbnQoKSk7XG5cbiAgICAgICAgLy8gYXBwZW5kIGNvbnRlbnRcbiAgICAgICAgdGhpcy5yZXBsYWNlKHRoaXMuJGVsZW1lbnQuY2hpbGRyZW4oKS5ub3QodGhpcy4kc3RhZ2UucGFyZW50KCkpKTtcblxuICAgICAgICAvLyBjaGVjayB2aXNpYmlsaXR5XG4gICAgICAgIGlmICh0aGlzLiRlbGVtZW50LmlzKCc6dmlzaWJsZScpKSB7XG4gICAgICAgICAgICAvLyB1cGRhdGUgdmlld1xuICAgICAgICAgICAgdGhpcy5yZWZyZXNoKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBpbnZhbGlkYXRlIHdpZHRoXG4gICAgICAgICAgICB0aGlzLmludmFsaWRhdGUoJ3dpZHRoJyk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLiRlbGVtZW50XG4gICAgICAgICAgICAucmVtb3ZlQ2xhc3ModGhpcy5vcHRpb25zLmxvYWRpbmdDbGFzcylcbiAgICAgICAgICAgIC5hZGRDbGFzcyh0aGlzLm9wdGlvbnMubG9hZGVkQ2xhc3MpO1xuXG4gICAgICAgIC8vIHJlZ2lzdGVyIGV2ZW50IGhhbmRsZXJzXG4gICAgICAgIHRoaXMucmVnaXN0ZXJFdmVudEhhbmRsZXJzKCk7XG5cbiAgICAgICAgdGhpcy5sZWF2ZSgnaW5pdGlhbGl6aW5nJyk7XG4gICAgICAgIHRoaXMudHJpZ2dlcignaW5pdGlhbGl6ZWQnKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogU2V0dXBzIHRoZSBjdXJyZW50IHNldHRpbmdzLlxuICAgICAqIEB0b2RvIFJlbW92ZSByZXNwb25zaXZlIGNsYXNzZXMuIFdoeSBzaG91bGQgYWRhcHRpdmUgZGVzaWducyBiZSBicm91Z2h0IGludG8gSUU4P1xuICAgICAqIEB0b2RvIFN1cHBvcnQgZm9yIG1lZGlhIHF1ZXJpZXMgYnkgdXNpbmcgYG1hdGNoTWVkaWFgIHdvdWxkIGJlIG5pY2UuXG4gICAgICogQHB1YmxpY1xuICAgICAqL1xuICAgIE93bC5wcm90b3R5cGUuc2V0dXAgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIHZpZXdwb3J0ID0gdGhpcy52aWV3cG9ydCgpLFxuICAgICAgICAgICAgb3ZlcndyaXRlcyA9IHRoaXMub3B0aW9ucy5yZXNwb25zaXZlLFxuICAgICAgICAgICAgbWF0Y2ggPSAtMSxcbiAgICAgICAgICAgIHNldHRpbmdzID0gbnVsbDtcblxuICAgICAgICBpZiAoIW92ZXJ3cml0ZXMpIHtcbiAgICAgICAgICAgIHNldHRpbmdzID0gJC5leHRlbmQoe30sIHRoaXMub3B0aW9ucyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAkLmVhY2gob3ZlcndyaXRlcywgZnVuY3Rpb24oYnJlYWtwb2ludCkge1xuICAgICAgICAgICAgICAgIGlmIChicmVha3BvaW50IDw9IHZpZXdwb3J0ICYmIGJyZWFrcG9pbnQgPiBtYXRjaCkge1xuICAgICAgICAgICAgICAgICAgICBtYXRjaCA9IE51bWJlcihicmVha3BvaW50KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgc2V0dGluZ3MgPSAkLmV4dGVuZCh7fSwgdGhpcy5vcHRpb25zLCBvdmVyd3JpdGVzW21hdGNoXSk7XG4gICAgICAgICAgICBpZiAodHlwZW9mIHNldHRpbmdzLnN0YWdlUGFkZGluZyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgIHNldHRpbmdzLnN0YWdlUGFkZGluZyA9IHNldHRpbmdzLnN0YWdlUGFkZGluZygpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZGVsZXRlIHNldHRpbmdzLnJlc3BvbnNpdmU7XG5cbiAgICAgICAgICAgIC8vIHJlc3BvbnNpdmUgY2xhc3NcbiAgICAgICAgICAgIGlmIChzZXR0aW5ncy5yZXNwb25zaXZlQ2xhc3MpIHtcbiAgICAgICAgICAgICAgICB0aGlzLiRlbGVtZW50LmF0dHIoJ2NsYXNzJyxcbiAgICAgICAgICAgICAgICAgICAgdGhpcy4kZWxlbWVudC5hdHRyKCdjbGFzcycpLnJlcGxhY2UobmV3IFJlZ0V4cCgnKCcgKyB0aGlzLm9wdGlvbnMucmVzcG9uc2l2ZUNsYXNzICsgJy0pXFxcXFMrXFxcXHMnLCAnZycpLCAnJDEnICsgbWF0Y2gpXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMudHJpZ2dlcignY2hhbmdlJywgeyBwcm9wZXJ0eTogeyBuYW1lOiAnc2V0dGluZ3MnLCB2YWx1ZTogc2V0dGluZ3MgfSB9KTtcbiAgICAgICAgdGhpcy5fYnJlYWtwb2ludCA9IG1hdGNoO1xuICAgICAgICB0aGlzLnNldHRpbmdzID0gc2V0dGluZ3M7XG4gICAgICAgIHRoaXMuaW52YWxpZGF0ZSgnc2V0dGluZ3MnKTtcbiAgICAgICAgdGhpcy50cmlnZ2VyKCdjaGFuZ2VkJywgeyBwcm9wZXJ0eTogeyBuYW1lOiAnc2V0dGluZ3MnLCB2YWx1ZTogdGhpcy5zZXR0aW5ncyB9IH0pO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBVcGRhdGVzIG9wdGlvbiBsb2dpYyBpZiBuZWNlc3NlcnkuXG4gICAgICogQHByb3RlY3RlZFxuICAgICAqL1xuICAgIE93bC5wcm90b3R5cGUub3B0aW9uc0xvZ2ljID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIGlmICh0aGlzLnNldHRpbmdzLmF1dG9XaWR0aCkge1xuICAgICAgICAgICAgdGhpcy5zZXR0aW5ncy5zdGFnZVBhZGRpbmcgPSBmYWxzZTtcbiAgICAgICAgICAgIHRoaXMuc2V0dGluZ3MubWVyZ2UgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBQcmVwYXJlcyBhbiBpdGVtIGJlZm9yZSBhZGQuXG4gICAgICogQHRvZG8gUmVuYW1lIGV2ZW50IHBhcmFtZXRlciBgY29udGVudGAgdG8gYGl0ZW1gLlxuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKiBAcmV0dXJucyB7alF1ZXJ5fEhUTUxFbGVtZW50fSAtIFRoZSBpdGVtIGNvbnRhaW5lci5cbiAgICAgKi9cbiAgICBPd2wucHJvdG90eXBlLnByZXBhcmUgPSBmdW5jdGlvbihpdGVtKSB7XG4gICAgICAgIHZhciBldmVudCA9IHRoaXMudHJpZ2dlcigncHJlcGFyZScsIHsgY29udGVudDogaXRlbSB9KTtcblxuICAgICAgICBpZiAoIWV2ZW50LmRhdGEpIHtcbiAgICAgICAgICAgIGV2ZW50LmRhdGEgPSAkKCc8JyArIHRoaXMuc2V0dGluZ3MuaXRlbUVsZW1lbnQgKyAnLz4nKVxuICAgICAgICAgICAgICAgIC5hZGRDbGFzcyh0aGlzLm9wdGlvbnMuaXRlbUNsYXNzKS5hcHBlbmQoaXRlbSlcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMudHJpZ2dlcigncHJlcGFyZWQnLCB7IGNvbnRlbnQ6IGV2ZW50LmRhdGEgfSk7XG5cbiAgICAgICAgcmV0dXJuIGV2ZW50LmRhdGE7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFVwZGF0ZXMgdGhlIHZpZXcuXG4gICAgICogQHB1YmxpY1xuICAgICAqL1xuICAgIE93bC5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBpID0gMCxcbiAgICAgICAgICAgIG4gPSB0aGlzLl9waXBlLmxlbmd0aCxcbiAgICAgICAgICAgIGZpbHRlciA9ICQucHJveHkoZnVuY3Rpb24ocCkgeyByZXR1cm4gdGhpc1twXSB9LCB0aGlzLl9pbnZhbGlkYXRlZCksXG4gICAgICAgICAgICBjYWNoZSA9IHt9O1xuXG4gICAgICAgIHdoaWxlIChpIDwgbikge1xuICAgICAgICAgICAgaWYgKHRoaXMuX2ludmFsaWRhdGVkLmFsbCB8fCAkLmdyZXAodGhpcy5fcGlwZVtpXS5maWx0ZXIsIGZpbHRlcikubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgIHRoaXMuX3BpcGVbaV0ucnVuKGNhY2hlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGkrKztcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuX2ludmFsaWRhdGVkID0ge307XG5cbiAgICAgICAgIXRoaXMuaXMoJ3ZhbGlkJykgJiYgdGhpcy5lbnRlcigndmFsaWQnKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgd2lkdGggb2YgdGhlIHZpZXcuXG4gICAgICogQHB1YmxpY1xuICAgICAqIEBwYXJhbSB7T3dsLldpZHRofSBbZGltZW5zaW9uPU93bC5XaWR0aC5EZWZhdWx0XSAtIFRoZSBkaW1lbnNpb24gdG8gcmV0dXJuLlxuICAgICAqIEByZXR1cm5zIHtOdW1iZXJ9IC0gVGhlIHdpZHRoIG9mIHRoZSB2aWV3IGluIHBpeGVsLlxuICAgICAqL1xuICAgIE93bC5wcm90b3R5cGUud2lkdGggPSBmdW5jdGlvbihkaW1lbnNpb24pIHtcbiAgICAgICAgZGltZW5zaW9uID0gZGltZW5zaW9uIHx8IE93bC5XaWR0aC5EZWZhdWx0O1xuICAgICAgICBzd2l0Y2ggKGRpbWVuc2lvbikge1xuICAgICAgICAgICAgY2FzZSBPd2wuV2lkdGguSW5uZXI6XG4gICAgICAgICAgICBjYXNlIE93bC5XaWR0aC5PdXRlcjpcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fd2lkdGg7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl93aWR0aCAtIHRoaXMuc2V0dGluZ3Muc3RhZ2VQYWRkaW5nICogMiArIHRoaXMuc2V0dGluZ3MubWFyZ2luO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFJlZnJlc2hlcyB0aGUgY2Fyb3VzZWwgcHJpbWFyaWx5IGZvciBhZGFwdGl2ZSBwdXJwb3Nlcy5cbiAgICAgKiBAcHVibGljXG4gICAgICovXG4gICAgT3dsLnByb3RvdHlwZS5yZWZyZXNoID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHRoaXMuZW50ZXIoJ3JlZnJlc2hpbmcnKTtcbiAgICAgICAgdGhpcy50cmlnZ2VyKCdyZWZyZXNoJyk7XG5cbiAgICAgICAgdGhpcy5zZXR1cCgpO1xuXG4gICAgICAgIHRoaXMub3B0aW9uc0xvZ2ljKCk7XG5cbiAgICAgICAgdGhpcy4kZWxlbWVudC5hZGRDbGFzcyh0aGlzLm9wdGlvbnMucmVmcmVzaENsYXNzKTtcblxuICAgICAgICB0aGlzLnVwZGF0ZSgpO1xuXG4gICAgICAgIHRoaXMuJGVsZW1lbnQucmVtb3ZlQ2xhc3ModGhpcy5vcHRpb25zLnJlZnJlc2hDbGFzcyk7XG5cbiAgICAgICAgdGhpcy5sZWF2ZSgncmVmcmVzaGluZycpO1xuICAgICAgICB0aGlzLnRyaWdnZXIoJ3JlZnJlc2hlZCcpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3Mgd2luZG93IGByZXNpemVgIGV2ZW50LlxuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKi9cbiAgICBPd2wucHJvdG90eXBlLm9uVGhyb3R0bGVkUmVzaXplID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHdpbmRvdy5jbGVhclRpbWVvdXQodGhpcy5yZXNpemVUaW1lcik7XG4gICAgICAgIHRoaXMucmVzaXplVGltZXIgPSB3aW5kb3cuc2V0VGltZW91dCh0aGlzLl9oYW5kbGVycy5vblJlc2l6ZSwgdGhpcy5zZXR0aW5ncy5yZXNwb25zaXZlUmVmcmVzaFJhdGUpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3Mgd2luZG93IGByZXNpemVgIGV2ZW50LlxuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKi9cbiAgICBPd2wucHJvdG90eXBlLm9uUmVzaXplID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIGlmICghdGhpcy5faXRlbXMubGVuZ3RoKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5fd2lkdGggPT09IHRoaXMuJGVsZW1lbnQud2lkdGgoKSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCF0aGlzLiRlbGVtZW50LmlzKCc6dmlzaWJsZScpKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmVudGVyKCdyZXNpemluZycpO1xuXG4gICAgICAgIGlmICh0aGlzLnRyaWdnZXIoJ3Jlc2l6ZScpLmlzRGVmYXVsdFByZXZlbnRlZCgpKSB7XG4gICAgICAgICAgICB0aGlzLmxlYXZlKCdyZXNpemluZycpO1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5pbnZhbGlkYXRlKCd3aWR0aCcpO1xuXG4gICAgICAgIHRoaXMucmVmcmVzaCgpO1xuXG4gICAgICAgIHRoaXMubGVhdmUoJ3Jlc2l6aW5nJyk7XG4gICAgICAgIHRoaXMudHJpZ2dlcigncmVzaXplZCcpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBSZWdpc3RlcnMgZXZlbnQgaGFuZGxlcnMuXG4gICAgICogQHRvZG8gQ2hlY2sgYG1zUG9pbnRlckVuYWJsZWRgXG4gICAgICogQHRvZG8gIzI2MVxuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKi9cbiAgICBPd2wucHJvdG90eXBlLnJlZ2lzdGVyRXZlbnRIYW5kbGVycyA9IGZ1bmN0aW9uKCkge1xuICAgICAgICBpZiAoJC5zdXBwb3J0LnRyYW5zaXRpb24pIHtcbiAgICAgICAgICAgIHRoaXMuJHN0YWdlLm9uKCQuc3VwcG9ydC50cmFuc2l0aW9uLmVuZCArICcub3dsLmNvcmUnLCAkLnByb3h5KHRoaXMub25UcmFuc2l0aW9uRW5kLCB0aGlzKSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5zZXR0aW5ncy5yZXNwb25zaXZlICE9PSBmYWxzZSkge1xuICAgICAgICAgICAgdGhpcy5vbih3aW5kb3csICdyZXNpemUnLCB0aGlzLl9oYW5kbGVycy5vblRocm90dGxlZFJlc2l6ZSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5zZXR0aW5ncy5tb3VzZURyYWcpIHtcbiAgICAgICAgICAgIHRoaXMuJGVsZW1lbnQuYWRkQ2xhc3ModGhpcy5vcHRpb25zLmRyYWdDbGFzcyk7XG4gICAgICAgICAgICB0aGlzLiRzdGFnZS5vbignbW91c2Vkb3duLm93bC5jb3JlJywgJC5wcm94eSh0aGlzLm9uRHJhZ1N0YXJ0LCB0aGlzKSk7XG4gICAgICAgICAgICB0aGlzLiRzdGFnZS5vbignZHJhZ3N0YXJ0Lm93bC5jb3JlIHNlbGVjdHN0YXJ0Lm93bC5jb3JlJywgZnVuY3Rpb24oKSB7IHJldHVybiBmYWxzZSB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLnNldHRpbmdzLnRvdWNoRHJhZyl7XG4gICAgICAgICAgICB0aGlzLiRzdGFnZS5vbigndG91Y2hzdGFydC5vd2wuY29yZScsICQucHJveHkodGhpcy5vbkRyYWdTdGFydCwgdGhpcykpO1xuICAgICAgICAgICAgdGhpcy4kc3RhZ2Uub24oJ3RvdWNoY2FuY2VsLm93bC5jb3JlJywgJC5wcm94eSh0aGlzLm9uRHJhZ0VuZCwgdGhpcykpO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEhhbmRsZXMgYHRvdWNoc3RhcnRgIGFuZCBgbW91c2Vkb3duYCBldmVudHMuXG4gICAgICogQHRvZG8gSG9yaXpvbnRhbCBzd2lwZSB0aHJlc2hvbGQgYXMgb3B0aW9uXG4gICAgICogQHRvZG8gIzI2MVxuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKiBAcGFyYW0ge0V2ZW50fSBldmVudCAtIFRoZSBldmVudCBhcmd1bWVudHMuXG4gICAgICovXG4gICAgT3dsLnByb3RvdHlwZS5vbkRyYWdTdGFydCA9IGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICAgIHZhciBzdGFnZSA9IG51bGw7XG5cbiAgICAgICAgaWYgKGV2ZW50LndoaWNoID09PSAzKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoJC5zdXBwb3J0LnRyYW5zZm9ybSkge1xuICAgICAgICAgICAgc3RhZ2UgPSB0aGlzLiRzdGFnZS5jc3MoJ3RyYW5zZm9ybScpLnJlcGxhY2UoLy4qXFwofFxcKXwgL2csICcnKS5zcGxpdCgnLCcpO1xuICAgICAgICAgICAgc3RhZ2UgPSB7XG4gICAgICAgICAgICAgICAgeDogc3RhZ2Vbc3RhZ2UubGVuZ3RoID09PSAxNiA/IDEyIDogNF0sXG4gICAgICAgICAgICAgICAgeTogc3RhZ2Vbc3RhZ2UubGVuZ3RoID09PSAxNiA/IDEzIDogNV1cbiAgICAgICAgICAgIH07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzdGFnZSA9IHRoaXMuJHN0YWdlLnBvc2l0aW9uKCk7XG4gICAgICAgICAgICBzdGFnZSA9IHtcbiAgICAgICAgICAgICAgICB4OiB0aGlzLnNldHRpbmdzLnJ0bCA/XG4gICAgICAgICAgICAgICAgICAgIHN0YWdlLmxlZnQgKyB0aGlzLiRzdGFnZS53aWR0aCgpIC0gdGhpcy53aWR0aCgpICsgdGhpcy5zZXR0aW5ncy5tYXJnaW4gOlxuICAgICAgICAgICAgICAgICAgICBzdGFnZS5sZWZ0LFxuICAgICAgICAgICAgICAgIHk6IHN0YWdlLnRvcFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLmlzKCdhbmltYXRpbmcnKSkge1xuICAgICAgICAgICAgJC5zdXBwb3J0LnRyYW5zZm9ybSA/IHRoaXMuYW5pbWF0ZShzdGFnZS54KSA6IHRoaXMuJHN0YWdlLnN0b3AoKVxuICAgICAgICAgICAgdGhpcy5pbnZhbGlkYXRlKCdwb3NpdGlvbicpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy4kZWxlbWVudC50b2dnbGVDbGFzcyh0aGlzLm9wdGlvbnMuZ3JhYkNsYXNzLCBldmVudC50eXBlID09PSAnbW91c2Vkb3duJyk7XG5cbiAgICAgICAgdGhpcy5zcGVlZCgwKTtcblxuICAgICAgICB0aGlzLl9kcmFnLnRpbWUgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcbiAgICAgICAgdGhpcy5fZHJhZy50YXJnZXQgPSAkKGV2ZW50LnRhcmdldCk7XG4gICAgICAgIHRoaXMuX2RyYWcuc3RhZ2Uuc3RhcnQgPSBzdGFnZTtcbiAgICAgICAgdGhpcy5fZHJhZy5zdGFnZS5jdXJyZW50ID0gc3RhZ2U7XG4gICAgICAgIHRoaXMuX2RyYWcucG9pbnRlciA9IHRoaXMucG9pbnRlcihldmVudCk7XG5cbiAgICAgICAgJChkb2N1bWVudCkub24oJ21vdXNldXAub3dsLmNvcmUgdG91Y2hlbmQub3dsLmNvcmUnLCAkLnByb3h5KHRoaXMub25EcmFnRW5kLCB0aGlzKSk7XG5cbiAgICAgICAgJChkb2N1bWVudCkub25lKCdtb3VzZW1vdmUub3dsLmNvcmUgdG91Y2htb3ZlLm93bC5jb3JlJywgJC5wcm94eShmdW5jdGlvbihldmVudCkge1xuICAgICAgICAgICAgdmFyIGRlbHRhID0gdGhpcy5kaWZmZXJlbmNlKHRoaXMuX2RyYWcucG9pbnRlciwgdGhpcy5wb2ludGVyKGV2ZW50KSk7XG5cbiAgICAgICAgICAgICQoZG9jdW1lbnQpLm9uKCdtb3VzZW1vdmUub3dsLmNvcmUgdG91Y2htb3ZlLm93bC5jb3JlJywgJC5wcm94eSh0aGlzLm9uRHJhZ01vdmUsIHRoaXMpKTtcblxuICAgICAgICAgICAgaWYgKE1hdGguYWJzKGRlbHRhLngpIDwgTWF0aC5hYnMoZGVsdGEueSkgJiYgdGhpcy5pcygndmFsaWQnKSkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcblxuICAgICAgICAgICAgdGhpcy5lbnRlcignZHJhZ2dpbmcnKTtcbiAgICAgICAgICAgIHRoaXMudHJpZ2dlcignZHJhZycpO1xuICAgICAgICB9LCB0aGlzKSk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEhhbmRsZXMgdGhlIGB0b3VjaG1vdmVgIGFuZCBgbW91c2Vtb3ZlYCBldmVudHMuXG4gICAgICogQHRvZG8gIzI2MVxuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKiBAcGFyYW0ge0V2ZW50fSBldmVudCAtIFRoZSBldmVudCBhcmd1bWVudHMuXG4gICAgICovXG4gICAgT3dsLnByb3RvdHlwZS5vbkRyYWdNb3ZlID0gZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAgICAgdmFyIG1pbmltdW0gPSBudWxsLFxuICAgICAgICAgICAgbWF4aW11bSA9IG51bGwsXG4gICAgICAgICAgICBwdWxsID0gbnVsbCxcbiAgICAgICAgICAgIGRlbHRhID0gdGhpcy5kaWZmZXJlbmNlKHRoaXMuX2RyYWcucG9pbnRlciwgdGhpcy5wb2ludGVyKGV2ZW50KSksXG4gICAgICAgICAgICBzdGFnZSA9IHRoaXMuZGlmZmVyZW5jZSh0aGlzLl9kcmFnLnN0YWdlLnN0YXJ0LCBkZWx0YSk7XG5cbiAgICAgICAgaWYgKCF0aGlzLmlzKCdkcmFnZ2luZycpKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gICAgICAgIGlmICh0aGlzLnNldHRpbmdzLmxvb3ApIHtcbiAgICAgICAgICAgIG1pbmltdW0gPSB0aGlzLmNvb3JkaW5hdGVzKHRoaXMubWluaW11bSgpKTtcbiAgICAgICAgICAgIG1heGltdW0gPSB0aGlzLmNvb3JkaW5hdGVzKHRoaXMubWF4aW11bSgpICsgMSkgLSBtaW5pbXVtO1xuICAgICAgICAgICAgc3RhZ2UueCA9ICgoKHN0YWdlLnggLSBtaW5pbXVtKSAlIG1heGltdW0gKyBtYXhpbXVtKSAlIG1heGltdW0pICsgbWluaW11bTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG1pbmltdW0gPSB0aGlzLnNldHRpbmdzLnJ0bCA/IHRoaXMuY29vcmRpbmF0ZXModGhpcy5tYXhpbXVtKCkpIDogdGhpcy5jb29yZGluYXRlcyh0aGlzLm1pbmltdW0oKSk7XG4gICAgICAgICAgICBtYXhpbXVtID0gdGhpcy5zZXR0aW5ncy5ydGwgPyB0aGlzLmNvb3JkaW5hdGVzKHRoaXMubWluaW11bSgpKSA6IHRoaXMuY29vcmRpbmF0ZXModGhpcy5tYXhpbXVtKCkpO1xuICAgICAgICAgICAgcHVsbCA9IHRoaXMuc2V0dGluZ3MucHVsbERyYWcgPyAtMSAqIGRlbHRhLnggLyA1IDogMDtcbiAgICAgICAgICAgIHN0YWdlLnggPSBNYXRoLm1heChNYXRoLm1pbihzdGFnZS54LCBtaW5pbXVtICsgcHVsbCksIG1heGltdW0gKyBwdWxsKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuX2RyYWcuc3RhZ2UuY3VycmVudCA9IHN0YWdlO1xuXG4gICAgICAgIHRoaXMuYW5pbWF0ZShzdGFnZS54KTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogSGFuZGxlcyB0aGUgYHRvdWNoZW5kYCBhbmQgYG1vdXNldXBgIGV2ZW50cy5cbiAgICAgKiBAdG9kbyAjMjYxXG4gICAgICogQHRvZG8gVGhyZXNob2xkIGZvciBjbGljayBldmVudFxuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKiBAcGFyYW0ge0V2ZW50fSBldmVudCAtIFRoZSBldmVudCBhcmd1bWVudHMuXG4gICAgICovXG4gICAgT3dsLnByb3RvdHlwZS5vbkRyYWdFbmQgPSBmdW5jdGlvbihldmVudCkge1xuICAgICAgICB2YXIgZGVsdGEgPSB0aGlzLmRpZmZlcmVuY2UodGhpcy5fZHJhZy5wb2ludGVyLCB0aGlzLnBvaW50ZXIoZXZlbnQpKSxcbiAgICAgICAgICAgIHN0YWdlID0gdGhpcy5fZHJhZy5zdGFnZS5jdXJyZW50LFxuICAgICAgICAgICAgZGlyZWN0aW9uID0gZGVsdGEueCA+IDAgXiB0aGlzLnNldHRpbmdzLnJ0bCA/ICdsZWZ0JyA6ICdyaWdodCc7XG5cbiAgICAgICAgJChkb2N1bWVudCkub2ZmKCcub3dsLmNvcmUnKTtcblxuICAgICAgICB0aGlzLiRlbGVtZW50LnJlbW92ZUNsYXNzKHRoaXMub3B0aW9ucy5ncmFiQ2xhc3MpO1xuXG4gICAgICAgIGlmIChkZWx0YS54ICE9PSAwICYmIHRoaXMuaXMoJ2RyYWdnaW5nJykgfHwgIXRoaXMuaXMoJ3ZhbGlkJykpIHtcbiAgICAgICAgICAgIHRoaXMuc3BlZWQodGhpcy5zZXR0aW5ncy5kcmFnRW5kU3BlZWQgfHwgdGhpcy5zZXR0aW5ncy5zbWFydFNwZWVkKTtcbiAgICAgICAgICAgIHRoaXMuY3VycmVudCh0aGlzLmNsb3Nlc3Qoc3RhZ2UueCwgZGVsdGEueCAhPT0gMCA/IGRpcmVjdGlvbiA6IHRoaXMuX2RyYWcuZGlyZWN0aW9uKSk7XG4gICAgICAgICAgICB0aGlzLmludmFsaWRhdGUoJ3Bvc2l0aW9uJyk7XG4gICAgICAgICAgICB0aGlzLnVwZGF0ZSgpO1xuXG4gICAgICAgICAgICB0aGlzLl9kcmFnLmRpcmVjdGlvbiA9IGRpcmVjdGlvbjtcblxuICAgICAgICAgICAgaWYgKE1hdGguYWJzKGRlbHRhLngpID4gMyB8fCBuZXcgRGF0ZSgpLmdldFRpbWUoKSAtIHRoaXMuX2RyYWcudGltZSA+IDMwMCkge1xuICAgICAgICAgICAgICAgIHRoaXMuX2RyYWcudGFyZ2V0Lm9uZSgnY2xpY2sub3dsLmNvcmUnLCBmdW5jdGlvbigpIHsgcmV0dXJuIGZhbHNlOyB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghdGhpcy5pcygnZHJhZ2dpbmcnKSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5sZWF2ZSgnZHJhZ2dpbmcnKTtcbiAgICAgICAgdGhpcy50cmlnZ2VyKCdkcmFnZ2VkJyk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEdldHMgYWJzb2x1dGUgcG9zaXRpb24gb2YgdGhlIGNsb3Nlc3QgaXRlbSBmb3IgYSBjb29yZGluYXRlLlxuICAgICAqIEB0b2RvIFNldHRpbmcgYGZyZWVEcmFnYCBtYWtlcyBgY2xvc2VzdGAgbm90IHJldXNhYmxlLiBTZWUgIzE2NS5cbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IGNvb3JkaW5hdGUgLSBUaGUgY29vcmRpbmF0ZSBpbiBwaXhlbC5cbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gZGlyZWN0aW9uIC0gVGhlIGRpcmVjdGlvbiB0byBjaGVjayBmb3IgdGhlIGNsb3Nlc3QgaXRlbS4gRXRoZXIgYGxlZnRgIG9yIGByaWdodGAuXG4gICAgICogQHJldHVybiB7TnVtYmVyfSAtIFRoZSBhYnNvbHV0ZSBwb3NpdGlvbiBvZiB0aGUgY2xvc2VzdCBpdGVtLlxuICAgICAqL1xuICAgIE93bC5wcm90b3R5cGUuY2xvc2VzdCA9IGZ1bmN0aW9uKGNvb3JkaW5hdGUsIGRpcmVjdGlvbikge1xuICAgICAgICB2YXIgcG9zaXRpb24gPSAtMSxcbiAgICAgICAgICAgIHB1bGwgPSAzMCxcbiAgICAgICAgICAgIHdpZHRoID0gdGhpcy53aWR0aCgpLFxuICAgICAgICAgICAgY29vcmRpbmF0ZXMgPSB0aGlzLmNvb3JkaW5hdGVzKCk7XG5cbiAgICAgICAgaWYgKCF0aGlzLnNldHRpbmdzLmZyZWVEcmFnKSB7XG4gICAgICAgICAgICAvLyBjaGVjayBjbG9zZXN0IGl0ZW1cbiAgICAgICAgICAgICQuZWFjaChjb29yZGluYXRlcywgJC5wcm94eShmdW5jdGlvbihpbmRleCwgdmFsdWUpIHtcbiAgICAgICAgICAgICAgICAvLyBvbiBhIGxlZnQgcHVsbCwgY2hlY2sgb24gY3VycmVudCBtYWluLXBhZ2UtcGFnZVxuICAgICAgICAgICAgICAgIGlmIChkaXJlY3Rpb24gPT09ICdsZWZ0JyAmJiBjb29yZGluYXRlID4gdmFsdWUgLSBwdWxsICYmIGNvb3JkaW5hdGUgPCB2YWx1ZSArIHB1bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgcG9zaXRpb24gPSBpbmRleDtcbiAgICAgICAgICAgICAgICAgICAgLy8gb24gYSByaWdodCBwdWxsLCBjaGVjayBvbiBwcmV2aW91cyBtYWluLXBhZ2UtcGFnZVxuICAgICAgICAgICAgICAgICAgICAvLyB0byBkbyBzbywgc3VidHJhY3Qgd2lkdGggZnJvbSB2YWx1ZSBhbmQgc2V0IHBvc2l0aW9uID0gbWFpbi1wYWdlLXBhZ2UgKyAxXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChkaXJlY3Rpb24gPT09ICdyaWdodCcgJiYgY29vcmRpbmF0ZSA+IHZhbHVlIC0gd2lkdGggLSBwdWxsICYmIGNvb3JkaW5hdGUgPCB2YWx1ZSAtIHdpZHRoICsgcHVsbCkge1xuICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbiA9IGluZGV4ICsgMTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMub3AoY29vcmRpbmF0ZSwgJzwnLCB2YWx1ZSlcbiAgICAgICAgICAgICAgICAgICAgJiYgdGhpcy5vcChjb29yZGluYXRlLCAnPicsIGNvb3JkaW5hdGVzW2luZGV4ICsgMV0gfHwgdmFsdWUgLSB3aWR0aCkpIHtcbiAgICAgICAgICAgICAgICAgICAgcG9zaXRpb24gPSBkaXJlY3Rpb24gPT09ICdsZWZ0JyA/IGluZGV4ICsgMSA6IGluZGV4O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gcG9zaXRpb24gPT09IC0xO1xuICAgICAgICAgICAgfSwgdGhpcykpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCF0aGlzLnNldHRpbmdzLmxvb3ApIHtcbiAgICAgICAgICAgIC8vIG5vbiBsb29wIGJvdW5kcmllc1xuICAgICAgICAgICAgaWYgKHRoaXMub3AoY29vcmRpbmF0ZSwgJz4nLCBjb29yZGluYXRlc1t0aGlzLm1pbmltdW0oKV0pKSB7XG4gICAgICAgICAgICAgICAgcG9zaXRpb24gPSBjb29yZGluYXRlID0gdGhpcy5taW5pbXVtKCk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMub3AoY29vcmRpbmF0ZSwgJzwnLCBjb29yZGluYXRlc1t0aGlzLm1heGltdW0oKV0pKSB7XG4gICAgICAgICAgICAgICAgcG9zaXRpb24gPSBjb29yZGluYXRlID0gdGhpcy5tYXhpbXVtKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcG9zaXRpb247XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEFuaW1hdGVzIHRoZSBzdGFnZS5cbiAgICAgKiBAdG9kbyAjMjcwXG4gICAgICogQHB1YmxpY1xuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBjb29yZGluYXRlIC0gVGhlIGNvb3JkaW5hdGUgaW4gcGl4ZWxzLlxuICAgICAqL1xuICAgIE93bC5wcm90b3R5cGUuYW5pbWF0ZSA9IGZ1bmN0aW9uKGNvb3JkaW5hdGUpIHtcbiAgICAgICAgdmFyIGFuaW1hdGUgPSB0aGlzLnNwZWVkKCkgPiAwO1xuXG4gICAgICAgIHRoaXMuaXMoJ2FuaW1hdGluZycpICYmIHRoaXMub25UcmFuc2l0aW9uRW5kKCk7XG5cbiAgICAgICAgaWYgKGFuaW1hdGUpIHtcbiAgICAgICAgICAgIHRoaXMuZW50ZXIoJ2FuaW1hdGluZycpO1xuICAgICAgICAgICAgdGhpcy50cmlnZ2VyKCd0cmFuc2xhdGUnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICgkLnN1cHBvcnQudHJhbnNmb3JtM2QgJiYgJC5zdXBwb3J0LnRyYW5zaXRpb24pIHtcbiAgICAgICAgICAgIHRoaXMuJHN0YWdlLmNzcyh7XG4gICAgICAgICAgICAgICAgdHJhbnNmb3JtOiAndHJhbnNsYXRlM2QoJyArIGNvb3JkaW5hdGUgKyAncHgsMHB4LDBweCknLFxuICAgICAgICAgICAgICAgIHRyYW5zaXRpb246ICh0aGlzLnNwZWVkKCkgLyAxMDAwKSArICdzJ1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSBpZiAoYW5pbWF0ZSkge1xuICAgICAgICAgICAgdGhpcy4kc3RhZ2UuYW5pbWF0ZSh7XG4gICAgICAgICAgICAgICAgbGVmdDogY29vcmRpbmF0ZSArICdweCdcbiAgICAgICAgICAgIH0sIHRoaXMuc3BlZWQoKSwgdGhpcy5zZXR0aW5ncy5mYWxsYmFja0Vhc2luZywgJC5wcm94eSh0aGlzLm9uVHJhbnNpdGlvbkVuZCwgdGhpcykpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy4kc3RhZ2UuY3NzKHtcbiAgICAgICAgICAgICAgICBsZWZ0OiBjb29yZGluYXRlICsgJ3B4J1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIHdoZXRoZXIgdGhlIGNhcm91c2VsIGlzIGluIGEgc3BlY2lmaWMgc3RhdGUgb3Igbm90LlxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBzdGF0ZSAtIFRoZSBzdGF0ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Qm9vbGVhbn0gLSBUaGUgZmxhZyB3aGljaCBpbmRpY2F0ZXMgaWYgdGhlIGNhcm91c2VsIGlzIGJ1c3kuXG4gICAgICovXG4gICAgT3dsLnByb3RvdHlwZS5pcyA9IGZ1bmN0aW9uKHN0YXRlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9zdGF0ZXMuY3VycmVudFtzdGF0ZV0gJiYgdGhpcy5fc3RhdGVzLmN1cnJlbnRbc3RhdGVdID4gMDtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgYWJzb2x1dGUgcG9zaXRpb24gb2YgdGhlIGN1cnJlbnQgaXRlbS5cbiAgICAgKiBAcHVibGljXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtwb3NpdGlvbl0gLSBUaGUgbmV3IGFic29sdXRlIHBvc2l0aW9uIG9yIG5vdGhpbmcgdG8gbGVhdmUgaXQgdW5jaGFuZ2VkLlxuICAgICAqIEByZXR1cm5zIHtOdW1iZXJ9IC0gVGhlIGFic29sdXRlIHBvc2l0aW9uIG9mIHRoZSBjdXJyZW50IGl0ZW0uXG4gICAgICovXG4gICAgT3dsLnByb3RvdHlwZS5jdXJyZW50ID0gZnVuY3Rpb24ocG9zaXRpb24pIHtcbiAgICAgICAgaWYgKHBvc2l0aW9uID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9jdXJyZW50O1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMuX2l0ZW1zLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgfVxuXG4gICAgICAgIHBvc2l0aW9uID0gdGhpcy5ub3JtYWxpemUocG9zaXRpb24pO1xuXG4gICAgICAgIGlmICh0aGlzLl9jdXJyZW50ICE9PSBwb3NpdGlvbikge1xuICAgICAgICAgICAgdmFyIGV2ZW50ID0gdGhpcy50cmlnZ2VyKCdjaGFuZ2UnLCB7IHByb3BlcnR5OiB7IG5hbWU6ICdwb3NpdGlvbicsIHZhbHVlOiBwb3NpdGlvbiB9IH0pO1xuXG4gICAgICAgICAgICBpZiAoZXZlbnQuZGF0YSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgcG9zaXRpb24gPSB0aGlzLm5vcm1hbGl6ZShldmVudC5kYXRhKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhpcy5fY3VycmVudCA9IHBvc2l0aW9uO1xuXG4gICAgICAgICAgICB0aGlzLmludmFsaWRhdGUoJ3Bvc2l0aW9uJyk7XG5cbiAgICAgICAgICAgIHRoaXMudHJpZ2dlcignY2hhbmdlZCcsIHsgcHJvcGVydHk6IHsgbmFtZTogJ3Bvc2l0aW9uJywgdmFsdWU6IHRoaXMuX2N1cnJlbnQgfSB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzLl9jdXJyZW50O1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBJbnZhbGlkYXRlcyB0aGUgZ2l2ZW4gcGFydCBvZiB0aGUgdXBkYXRlIHJvdXRpbmUuXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IFtwYXJ0XSAtIFRoZSBwYXJ0IHRvIGludmFsaWRhdGUuXG4gICAgICogQHJldHVybnMge0FycmF5LjxTdHJpbmc+fSAtIFRoZSBpbnZhbGlkYXRlZCBwYXJ0cy5cbiAgICAgKi9cbiAgICBPd2wucHJvdG90eXBlLmludmFsaWRhdGUgPSBmdW5jdGlvbihwYXJ0KSB7XG4gICAgICAgIGlmICgkLnR5cGUocGFydCkgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICB0aGlzLl9pbnZhbGlkYXRlZFtwYXJ0XSA9IHRydWU7XG4gICAgICAgICAgICB0aGlzLmlzKCd2YWxpZCcpICYmIHRoaXMubGVhdmUoJ3ZhbGlkJyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuICQubWFwKHRoaXMuX2ludmFsaWRhdGVkLCBmdW5jdGlvbih2LCBpKSB7IHJldHVybiBpIH0pO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBSZXNldHMgdGhlIGFic29sdXRlIHBvc2l0aW9uIG9mIHRoZSBjdXJyZW50IGl0ZW0uXG4gICAgICogQHB1YmxpY1xuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBwb3NpdGlvbiAtIFRoZSBhYnNvbHV0ZSBwb3NpdGlvbiBvZiB0aGUgbmV3IGl0ZW0uXG4gICAgICovXG4gICAgT3dsLnByb3RvdHlwZS5yZXNldCA9IGZ1bmN0aW9uKHBvc2l0aW9uKSB7XG4gICAgICAgIHBvc2l0aW9uID0gdGhpcy5ub3JtYWxpemUocG9zaXRpb24pO1xuXG4gICAgICAgIGlmIChwb3NpdGlvbiA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLl9zcGVlZCA9IDA7XG4gICAgICAgIHRoaXMuX2N1cnJlbnQgPSBwb3NpdGlvbjtcblxuICAgICAgICB0aGlzLnN1cHByZXNzKFsgJ3RyYW5zbGF0ZScsICd0cmFuc2xhdGVkJyBdKTtcblxuICAgICAgICB0aGlzLmFuaW1hdGUodGhpcy5jb29yZGluYXRlcyhwb3NpdGlvbikpO1xuXG4gICAgICAgIHRoaXMucmVsZWFzZShbICd0cmFuc2xhdGUnLCAndHJhbnNsYXRlZCcgXSk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIE5vcm1hbGl6ZXMgYW4gYWJzb2x1dGUgb3IgYSByZWxhdGl2ZSBwb3NpdGlvbiBvZiBhbiBpdGVtLlxuICAgICAqIEBwdWJsaWNcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gcG9zaXRpb24gLSBUaGUgYWJzb2x1dGUgb3IgcmVsYXRpdmUgcG9zaXRpb24gdG8gbm9ybWFsaXplLlxuICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gW3JlbGF0aXZlPWZhbHNlXSAtIFdoZXRoZXIgdGhlIGdpdmVuIHBvc2l0aW9uIGlzIHJlbGF0aXZlIG9yIG5vdC5cbiAgICAgKiBAcmV0dXJucyB7TnVtYmVyfSAtIFRoZSBub3JtYWxpemVkIHBvc2l0aW9uLlxuICAgICAqL1xuICAgIE93bC5wcm90b3R5cGUubm9ybWFsaXplID0gZnVuY3Rpb24ocG9zaXRpb24sIHJlbGF0aXZlKSB7XG4gICAgICAgIHZhciBuID0gdGhpcy5faXRlbXMubGVuZ3RoLFxuICAgICAgICAgICAgbSA9IHJlbGF0aXZlID8gMCA6IHRoaXMuX2Nsb25lcy5sZW5ndGg7XG5cbiAgICAgICAgaWYgKCF0aGlzLmlzTnVtZXJpYyhwb3NpdGlvbikgfHwgbiA8IDEpIHtcbiAgICAgICAgICAgIHBvc2l0aW9uID0gdW5kZWZpbmVkO1xuICAgICAgICB9IGVsc2UgaWYgKHBvc2l0aW9uIDwgMCB8fCBwb3NpdGlvbiA+PSBuICsgbSkge1xuICAgICAgICAgICAgcG9zaXRpb24gPSAoKHBvc2l0aW9uIC0gbSAvIDIpICUgbiArIG4pICUgbiArIG0gLyAyO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHBvc2l0aW9uO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBhbiBhYnNvbHV0ZSBwb3NpdGlvbiBvZiBhbiBpdGVtIGludG8gYSByZWxhdGl2ZSBvbmUuXG4gICAgICogQHB1YmxpY1xuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBwb3NpdGlvbiAtIFRoZSBhYnNvbHV0ZSBwb3NpdGlvbiB0byBjb252ZXJ0LlxuICAgICAqIEByZXR1cm5zIHtOdW1iZXJ9IC0gVGhlIGNvbnZlcnRlZCBwb3NpdGlvbi5cbiAgICAgKi9cbiAgICBPd2wucHJvdG90eXBlLnJlbGF0aXZlID0gZnVuY3Rpb24ocG9zaXRpb24pIHtcbiAgICAgICAgcG9zaXRpb24gLT0gdGhpcy5fY2xvbmVzLmxlbmd0aCAvIDI7XG4gICAgICAgIHJldHVybiB0aGlzLm5vcm1hbGl6ZShwb3NpdGlvbiwgdHJ1ZSk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIG1heGltdW0gcG9zaXRpb24gZm9yIHRoZSBjdXJyZW50IGl0ZW0uXG4gICAgICogQHB1YmxpY1xuICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gW3JlbGF0aXZlPWZhbHNlXSAtIFdoZXRoZXIgdG8gcmV0dXJuIGFuIGFic29sdXRlIHBvc2l0aW9uIG9yIGEgcmVsYXRpdmUgcG9zaXRpb24uXG4gICAgICogQHJldHVybnMge051bWJlcn1cbiAgICAgKi9cbiAgICBPd2wucHJvdG90eXBlLm1heGltdW0gPSBmdW5jdGlvbihyZWxhdGl2ZSkge1xuICAgICAgICB2YXIgc2V0dGluZ3MgPSB0aGlzLnNldHRpbmdzLFxuICAgICAgICAgICAgbWF4aW11bSA9IHRoaXMuX2Nvb3JkaW5hdGVzLmxlbmd0aCxcbiAgICAgICAgICAgIGl0ZXJhdG9yLFxuICAgICAgICAgICAgcmVjaXByb2NhbEl0ZW1zV2lkdGgsXG4gICAgICAgICAgICBlbGVtZW50V2lkdGg7XG5cbiAgICAgICAgaWYgKHNldHRpbmdzLmxvb3ApIHtcbiAgICAgICAgICAgIG1heGltdW0gPSB0aGlzLl9jbG9uZXMubGVuZ3RoIC8gMiArIHRoaXMuX2l0ZW1zLmxlbmd0aCAtIDE7XG4gICAgICAgIH0gZWxzZSBpZiAoc2V0dGluZ3MuYXV0b1dpZHRoIHx8IHNldHRpbmdzLm1lcmdlKSB7XG4gICAgICAgICAgICBpdGVyYXRvciA9IHRoaXMuX2l0ZW1zLmxlbmd0aDtcbiAgICAgICAgICAgIHJlY2lwcm9jYWxJdGVtc1dpZHRoID0gdGhpcy5faXRlbXNbLS1pdGVyYXRvcl0ud2lkdGgoKTtcbiAgICAgICAgICAgIGVsZW1lbnRXaWR0aCA9IHRoaXMuJGVsZW1lbnQud2lkdGgoKTtcbiAgICAgICAgICAgIHdoaWxlIChpdGVyYXRvci0tKSB7XG4gICAgICAgICAgICAgICAgcmVjaXByb2NhbEl0ZW1zV2lkdGggKz0gdGhpcy5faXRlbXNbaXRlcmF0b3JdLndpZHRoKCkgKyB0aGlzLnNldHRpbmdzLm1hcmdpbjtcbiAgICAgICAgICAgICAgICBpZiAocmVjaXByb2NhbEl0ZW1zV2lkdGggPiBlbGVtZW50V2lkdGgpIHtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbWF4aW11bSA9IGl0ZXJhdG9yICsgMTtcbiAgICAgICAgfSBlbHNlIGlmIChzZXR0aW5ncy5jZW50ZXIpIHtcbiAgICAgICAgICAgIG1heGltdW0gPSB0aGlzLl9pdGVtcy5sZW5ndGggLSAxO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbWF4aW11bSA9IHRoaXMuX2l0ZW1zLmxlbmd0aCAtIHNldHRpbmdzLml0ZW1zO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHJlbGF0aXZlKSB7XG4gICAgICAgICAgICBtYXhpbXVtIC09IHRoaXMuX2Nsb25lcy5sZW5ndGggLyAyO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIE1hdGgubWF4KG1heGltdW0sIDApO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBtaW5pbXVtIHBvc2l0aW9uIGZvciB0aGUgY3VycmVudCBpdGVtLlxuICAgICAqIEBwdWJsaWNcbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IFtyZWxhdGl2ZT1mYWxzZV0gLSBXaGV0aGVyIHRvIHJldHVybiBhbiBhYnNvbHV0ZSBwb3NpdGlvbiBvciBhIHJlbGF0aXZlIHBvc2l0aW9uLlxuICAgICAqIEByZXR1cm5zIHtOdW1iZXJ9XG4gICAgICovXG4gICAgT3dsLnByb3RvdHlwZS5taW5pbXVtID0gZnVuY3Rpb24ocmVsYXRpdmUpIHtcbiAgICAgICAgcmV0dXJuIHJlbGF0aXZlID8gMCA6IHRoaXMuX2Nsb25lcy5sZW5ndGggLyAyO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIGFuIGl0ZW0gYXQgdGhlIHNwZWNpZmllZCByZWxhdGl2ZSBwb3NpdGlvbi5cbiAgICAgKiBAcHVibGljXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtwb3NpdGlvbl0gLSBUaGUgcmVsYXRpdmUgcG9zaXRpb24gb2YgdGhlIGl0ZW0uXG4gICAgICogQHJldHVybiB7alF1ZXJ5fEFycmF5LjxqUXVlcnk+fSAtIFRoZSBpdGVtIGF0IHRoZSBnaXZlbiBwb3NpdGlvbiBvciBhbGwgaXRlbXMgaWYgbm8gcG9zaXRpb24gd2FzIGdpdmVuLlxuICAgICAqL1xuICAgIE93bC5wcm90b3R5cGUuaXRlbXMgPSBmdW5jdGlvbihwb3NpdGlvbikge1xuICAgICAgICBpZiAocG9zaXRpb24gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2l0ZW1zLnNsaWNlKCk7XG4gICAgICAgIH1cblxuICAgICAgICBwb3NpdGlvbiA9IHRoaXMubm9ybWFsaXplKHBvc2l0aW9uLCB0cnVlKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2l0ZW1zW3Bvc2l0aW9uXTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogR2V0cyBhbiBpdGVtIGF0IHRoZSBzcGVjaWZpZWQgcmVsYXRpdmUgcG9zaXRpb24uXG4gICAgICogQHB1YmxpY1xuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbcG9zaXRpb25dIC0gVGhlIHJlbGF0aXZlIHBvc2l0aW9uIG9mIHRoZSBpdGVtLlxuICAgICAqIEByZXR1cm4ge2pRdWVyeXxBcnJheS48alF1ZXJ5Pn0gLSBUaGUgaXRlbSBhdCB0aGUgZ2l2ZW4gcG9zaXRpb24gb3IgYWxsIGl0ZW1zIGlmIG5vIHBvc2l0aW9uIHdhcyBnaXZlbi5cbiAgICAgKi9cbiAgICBPd2wucHJvdG90eXBlLm1lcmdlcnMgPSBmdW5jdGlvbihwb3NpdGlvbikge1xuICAgICAgICBpZiAocG9zaXRpb24gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX21lcmdlcnMuc2xpY2UoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHBvc2l0aW9uID0gdGhpcy5ub3JtYWxpemUocG9zaXRpb24sIHRydWUpO1xuICAgICAgICByZXR1cm4gdGhpcy5fbWVyZ2Vyc1twb3NpdGlvbl07XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIGFic29sdXRlIHBvc2l0aW9ucyBvZiBjbG9uZXMgZm9yIGFuIGl0ZW0uXG4gICAgICogQHB1YmxpY1xuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbcG9zaXRpb25dIC0gVGhlIHJlbGF0aXZlIHBvc2l0aW9uIG9mIHRoZSBpdGVtLlxuICAgICAqIEByZXR1cm5zIHtBcnJheS48TnVtYmVyPn0gLSBUaGUgYWJzb2x1dGUgcG9zaXRpb25zIG9mIGNsb25lcyBmb3IgdGhlIGl0ZW0gb3IgYWxsIGlmIG5vIHBvc2l0aW9uIHdhcyBnaXZlbi5cbiAgICAgKi9cbiAgICBPd2wucHJvdG90eXBlLmNsb25lcyA9IGZ1bmN0aW9uKHBvc2l0aW9uKSB7XG4gICAgICAgIHZhciBvZGQgPSB0aGlzLl9jbG9uZXMubGVuZ3RoIC8gMixcbiAgICAgICAgICAgIGV2ZW4gPSBvZGQgKyB0aGlzLl9pdGVtcy5sZW5ndGgsXG4gICAgICAgICAgICBtYXAgPSBmdW5jdGlvbihpbmRleCkgeyByZXR1cm4gaW5kZXggJSAyID09PSAwID8gZXZlbiArIGluZGV4IC8gMiA6IG9kZCAtIChpbmRleCArIDEpIC8gMiB9O1xuXG4gICAgICAgIGlmIChwb3NpdGlvbiA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXR1cm4gJC5tYXAodGhpcy5fY2xvbmVzLCBmdW5jdGlvbih2LCBpKSB7IHJldHVybiBtYXAoaSkgfSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gJC5tYXAodGhpcy5fY2xvbmVzLCBmdW5jdGlvbih2LCBpKSB7IHJldHVybiB2ID09PSBwb3NpdGlvbiA/IG1hcChpKSA6IG51bGwgfSk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIGN1cnJlbnQgYW5pbWF0aW9uIHNwZWVkLlxuICAgICAqIEBwdWJsaWNcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW3NwZWVkXSAtIFRoZSBhbmltYXRpb24gc3BlZWQgaW4gbWlsbGlzZWNvbmRzIG9yIG5vdGhpbmcgdG8gbGVhdmUgaXQgdW5jaGFuZ2VkLlxuICAgICAqIEByZXR1cm5zIHtOdW1iZXJ9IC0gVGhlIGN1cnJlbnQgYW5pbWF0aW9uIHNwZWVkIGluIG1pbGxpc2Vjb25kcy5cbiAgICAgKi9cbiAgICBPd2wucHJvdG90eXBlLnNwZWVkID0gZnVuY3Rpb24oc3BlZWQpIHtcbiAgICAgICAgaWYgKHNwZWVkICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRoaXMuX3NwZWVkID0gc3BlZWQ7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcy5fc3BlZWQ7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIGNvb3JkaW5hdGUgb2YgYW4gaXRlbS5cbiAgICAgKiBAdG9kbyBUaGUgbmFtZSBvZiB0aGlzIG1ldGhvZCBpcyBtaXNzbGVhbmRpbmcuXG4gICAgICogQHB1YmxpY1xuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBwb3NpdGlvbiAtIFRoZSBhYnNvbHV0ZSBwb3NpdGlvbiBvZiB0aGUgaXRlbSB3aXRoaW4gYG1pbmltdW0oKWAgYW5kIGBtYXhpbXVtKClgLlxuICAgICAqIEByZXR1cm5zIHtOdW1iZXJ8QXJyYXkuPE51bWJlcj59IC0gVGhlIGNvb3JkaW5hdGUgb2YgdGhlIGl0ZW0gaW4gcGl4ZWwgb3IgYWxsIGNvb3JkaW5hdGVzLlxuICAgICAqL1xuICAgIE93bC5wcm90b3R5cGUuY29vcmRpbmF0ZXMgPSBmdW5jdGlvbihwb3NpdGlvbikge1xuICAgICAgICB2YXIgbXVsdGlwbGllciA9IDEsXG4gICAgICAgICAgICBuZXdQb3NpdGlvbiA9IHBvc2l0aW9uIC0gMSxcbiAgICAgICAgICAgIGNvb3JkaW5hdGU7XG5cbiAgICAgICAgaWYgKHBvc2l0aW9uID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybiAkLm1hcCh0aGlzLl9jb29yZGluYXRlcywgJC5wcm94eShmdW5jdGlvbihjb29yZGluYXRlLCBpbmRleCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmNvb3JkaW5hdGVzKGluZGV4KTtcbiAgICAgICAgICAgIH0sIHRoaXMpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLnNldHRpbmdzLmNlbnRlcikge1xuICAgICAgICAgICAgaWYgKHRoaXMuc2V0dGluZ3MucnRsKSB7XG4gICAgICAgICAgICAgICAgbXVsdGlwbGllciA9IC0xO1xuICAgICAgICAgICAgICAgIG5ld1Bvc2l0aW9uID0gcG9zaXRpb24gKyAxO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjb29yZGluYXRlID0gdGhpcy5fY29vcmRpbmF0ZXNbcG9zaXRpb25dO1xuICAgICAgICAgICAgY29vcmRpbmF0ZSArPSAodGhpcy53aWR0aCgpIC0gY29vcmRpbmF0ZSArICh0aGlzLl9jb29yZGluYXRlc1tuZXdQb3NpdGlvbl0gfHwgMCkpIC8gMiAqIG11bHRpcGxpZXI7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb29yZGluYXRlID0gdGhpcy5fY29vcmRpbmF0ZXNbbmV3UG9zaXRpb25dIHx8IDA7XG4gICAgICAgIH1cblxuICAgICAgICBjb29yZGluYXRlID0gTWF0aC5jZWlsKGNvb3JkaW5hdGUpO1xuXG4gICAgICAgIHJldHVybiBjb29yZGluYXRlO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBDYWxjdWxhdGVzIHRoZSBzcGVlZCBmb3IgYSB0cmFuc2xhdGlvbi5cbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IGZyb20gLSBUaGUgYWJzb2x1dGUgcG9zaXRpb24gb2YgdGhlIHN0YXJ0IGl0ZW0uXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IHRvIC0gVGhlIGFic29sdXRlIHBvc2l0aW9uIG9mIHRoZSB0YXJnZXQgaXRlbS5cbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2ZhY3Rvcj11bmRlZmluZWRdIC0gVGhlIHRpbWUgZmFjdG9yIGluIG1pbGxpc2Vjb25kcy5cbiAgICAgKiBAcmV0dXJucyB7TnVtYmVyfSAtIFRoZSB0aW1lIGluIG1pbGxpc2Vjb25kcyBmb3IgdGhlIHRyYW5zbGF0aW9uLlxuICAgICAqL1xuICAgIE93bC5wcm90b3R5cGUuZHVyYXRpb24gPSBmdW5jdGlvbihmcm9tLCB0bywgZmFjdG9yKSB7XG4gICAgICAgIGlmIChmYWN0b3IgPT09IDApIHtcbiAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIE1hdGgubWluKE1hdGgubWF4KE1hdGguYWJzKHRvIC0gZnJvbSksIDEpLCA2KSAqIE1hdGguYWJzKChmYWN0b3IgfHwgdGhpcy5zZXR0aW5ncy5zbWFydFNwZWVkKSk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFNsaWRlcyB0byB0aGUgc3BlY2lmaWVkIGl0ZW0uXG4gICAgICogQHB1YmxpY1xuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBwb3NpdGlvbiAtIFRoZSBwb3NpdGlvbiBvZiB0aGUgaXRlbS5cbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW3NwZWVkXSAtIFRoZSB0aW1lIGluIG1pbGxpc2Vjb25kcyBmb3IgdGhlIHRyYW5zaXRpb24uXG4gICAgICovXG4gICAgT3dsLnByb3RvdHlwZS50byA9IGZ1bmN0aW9uKHBvc2l0aW9uLCBzcGVlZCkge1xuICAgICAgICB2YXIgY3VycmVudCA9IHRoaXMuY3VycmVudCgpLFxuICAgICAgICAgICAgcmV2ZXJ0ID0gbnVsbCxcbiAgICAgICAgICAgIGRpc3RhbmNlID0gcG9zaXRpb24gLSB0aGlzLnJlbGF0aXZlKGN1cnJlbnQpLFxuICAgICAgICAgICAgZGlyZWN0aW9uID0gKGRpc3RhbmNlID4gMCkgLSAoZGlzdGFuY2UgPCAwKSxcbiAgICAgICAgICAgIGl0ZW1zID0gdGhpcy5faXRlbXMubGVuZ3RoLFxuICAgICAgICAgICAgbWluaW11bSA9IHRoaXMubWluaW11bSgpLFxuICAgICAgICAgICAgbWF4aW11bSA9IHRoaXMubWF4aW11bSgpO1xuXG4gICAgICAgIGlmICh0aGlzLnNldHRpbmdzLmxvb3ApIHtcbiAgICAgICAgICAgIGlmICghdGhpcy5zZXR0aW5ncy5yZXdpbmQgJiYgTWF0aC5hYnMoZGlzdGFuY2UpID4gaXRlbXMgLyAyKSB7XG4gICAgICAgICAgICAgICAgZGlzdGFuY2UgKz0gZGlyZWN0aW9uICogLTEgKiBpdGVtcztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcG9zaXRpb24gPSBjdXJyZW50ICsgZGlzdGFuY2U7XG4gICAgICAgICAgICByZXZlcnQgPSAoKHBvc2l0aW9uIC0gbWluaW11bSkgJSBpdGVtcyArIGl0ZW1zKSAlIGl0ZW1zICsgbWluaW11bTtcblxuICAgICAgICAgICAgaWYgKHJldmVydCAhPT0gcG9zaXRpb24gJiYgcmV2ZXJ0IC0gZGlzdGFuY2UgPD0gbWF4aW11bSAmJiByZXZlcnQgLSBkaXN0YW5jZSA+IDApIHtcbiAgICAgICAgICAgICAgICBjdXJyZW50ID0gcmV2ZXJ0IC0gZGlzdGFuY2U7XG4gICAgICAgICAgICAgICAgcG9zaXRpb24gPSByZXZlcnQ7XG4gICAgICAgICAgICAgICAgdGhpcy5yZXNldChjdXJyZW50KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLnNldHRpbmdzLnJld2luZCkge1xuICAgICAgICAgICAgbWF4aW11bSArPSAxO1xuICAgICAgICAgICAgcG9zaXRpb24gPSAocG9zaXRpb24gJSBtYXhpbXVtICsgbWF4aW11bSkgJSBtYXhpbXVtO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcG9zaXRpb24gPSBNYXRoLm1heChtaW5pbXVtLCBNYXRoLm1pbihtYXhpbXVtLCBwb3NpdGlvbikpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5zcGVlZCh0aGlzLmR1cmF0aW9uKGN1cnJlbnQsIHBvc2l0aW9uLCBzcGVlZCkpO1xuICAgICAgICB0aGlzLmN1cnJlbnQocG9zaXRpb24pO1xuXG4gICAgICAgIGlmICh0aGlzLiRlbGVtZW50LmlzKCc6dmlzaWJsZScpKSB7XG4gICAgICAgICAgICB0aGlzLnVwZGF0ZSgpO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFNsaWRlcyB0byB0aGUgbmV4dCBpdGVtLlxuICAgICAqIEBwdWJsaWNcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW3NwZWVkXSAtIFRoZSB0aW1lIGluIG1pbGxpc2Vjb25kcyBmb3IgdGhlIHRyYW5zaXRpb24uXG4gICAgICovXG4gICAgT3dsLnByb3RvdHlwZS5uZXh0ID0gZnVuY3Rpb24oc3BlZWQpIHtcbiAgICAgICAgc3BlZWQgPSBzcGVlZCB8fCBmYWxzZTtcbiAgICAgICAgdGhpcy50byh0aGlzLnJlbGF0aXZlKHRoaXMuY3VycmVudCgpKSArIDEsIHNwZWVkKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogU2xpZGVzIHRvIHRoZSBwcmV2aW91cyBpdGVtLlxuICAgICAqIEBwdWJsaWNcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW3NwZWVkXSAtIFRoZSB0aW1lIGluIG1pbGxpc2Vjb25kcyBmb3IgdGhlIHRyYW5zaXRpb24uXG4gICAgICovXG4gICAgT3dsLnByb3RvdHlwZS5wcmV2ID0gZnVuY3Rpb24oc3BlZWQpIHtcbiAgICAgICAgc3BlZWQgPSBzcGVlZCB8fCBmYWxzZTtcbiAgICAgICAgdGhpcy50byh0aGlzLnJlbGF0aXZlKHRoaXMuY3VycmVudCgpKSAtIDEsIHNwZWVkKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogSGFuZGxlcyB0aGUgZW5kIG9mIGFuIGFuaW1hdGlvbi5cbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICogQHBhcmFtIHtFdmVudH0gZXZlbnQgLSBUaGUgZXZlbnQgYXJndW1lbnRzLlxuICAgICAqL1xuICAgIE93bC5wcm90b3R5cGUub25UcmFuc2l0aW9uRW5kID0gZnVuY3Rpb24oZXZlbnQpIHtcblxuICAgICAgICAvLyBpZiBjc3MyIGFuaW1hdGlvbiB0aGVuIGV2ZW50IG9iamVjdCBpcyB1bmRlZmluZWRcbiAgICAgICAgaWYgKGV2ZW50ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuXG4gICAgICAgICAgICAvLyBDYXRjaCBvbmx5IG93bC1zdGFnZSB0cmFuc2l0aW9uRW5kIGV2ZW50XG4gICAgICAgICAgICBpZiAoKGV2ZW50LnRhcmdldCB8fCBldmVudC5zcmNFbGVtZW50IHx8IGV2ZW50Lm9yaWdpbmFsVGFyZ2V0KSAhPT0gdGhpcy4kc3RhZ2UuZ2V0KDApKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5sZWF2ZSgnYW5pbWF0aW5nJyk7XG4gICAgICAgIHRoaXMudHJpZ2dlcigndHJhbnNsYXRlZCcpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHZpZXdwb3J0IHdpZHRoLlxuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKiBAcmV0dXJuIHtOdW1iZXJ9IC0gVGhlIHdpZHRoIGluIHBpeGVsLlxuICAgICAqL1xuICAgIE93bC5wcm90b3R5cGUudmlld3BvcnQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIHdpZHRoO1xuICAgICAgICBpZiAodGhpcy5vcHRpb25zLnJlc3BvbnNpdmVCYXNlRWxlbWVudCAhPT0gd2luZG93KSB7XG4gICAgICAgICAgICB3aWR0aCA9ICQodGhpcy5vcHRpb25zLnJlc3BvbnNpdmVCYXNlRWxlbWVudCkud2lkdGgoKTtcbiAgICAgICAgfSBlbHNlIGlmICh3aW5kb3cuaW5uZXJXaWR0aCkge1xuICAgICAgICAgICAgd2lkdGggPSB3aW5kb3cuaW5uZXJXaWR0aDtcbiAgICAgICAgfSBlbHNlIGlmIChkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQgJiYgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsaWVudFdpZHRoKSB7XG4gICAgICAgICAgICB3aWR0aCA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGllbnRXaWR0aDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnNvbGUud2FybignQ2FuIG5vdCBkZXRlY3Qgdmlld3BvcnQgd2lkdGguJyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHdpZHRoO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBSZXBsYWNlcyB0aGUgY3VycmVudCBjb250ZW50LlxuICAgICAqIEBwdWJsaWNcbiAgICAgKiBAcGFyYW0ge0hUTUxFbGVtZW50fGpRdWVyeXxTdHJpbmd9IGNvbnRlbnQgLSBUaGUgbmV3IGNvbnRlbnQuXG4gICAgICovXG4gICAgT3dsLnByb3RvdHlwZS5yZXBsYWNlID0gZnVuY3Rpb24oY29udGVudCkge1xuICAgICAgICB0aGlzLiRzdGFnZS5lbXB0eSgpO1xuICAgICAgICB0aGlzLl9pdGVtcyA9IFtdO1xuXG4gICAgICAgIGlmIChjb250ZW50KSB7XG4gICAgICAgICAgICBjb250ZW50ID0gKGNvbnRlbnQgaW5zdGFuY2VvZiBqUXVlcnkpID8gY29udGVudCA6ICQoY29udGVudCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5zZXR0aW5ncy5uZXN0ZWRJdGVtU2VsZWN0b3IpIHtcbiAgICAgICAgICAgIGNvbnRlbnQgPSBjb250ZW50LmZpbmQoJy4nICsgdGhpcy5zZXR0aW5ncy5uZXN0ZWRJdGVtU2VsZWN0b3IpO1xuICAgICAgICB9XG5cbiAgICAgICAgY29udGVudC5maWx0ZXIoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5ub2RlVHlwZSA9PT0gMTtcbiAgICAgICAgfSkuZWFjaCgkLnByb3h5KGZ1bmN0aW9uKGluZGV4LCBpdGVtKSB7XG4gICAgICAgICAgICBpdGVtID0gdGhpcy5wcmVwYXJlKGl0ZW0pO1xuICAgICAgICAgICAgdGhpcy4kc3RhZ2UuYXBwZW5kKGl0ZW0pO1xuICAgICAgICAgICAgdGhpcy5faXRlbXMucHVzaChpdGVtKTtcbiAgICAgICAgICAgIHRoaXMuX21lcmdlcnMucHVzaChpdGVtLmZpbmQoJ1tkYXRhLW1lcmdlXScpLmFkZEJhY2soJ1tkYXRhLW1lcmdlXScpLmF0dHIoJ2RhdGEtbWVyZ2UnKSAqIDEgfHwgMSk7XG4gICAgICAgIH0sIHRoaXMpKTtcblxuICAgICAgICB0aGlzLnJlc2V0KHRoaXMuaXNOdW1lcmljKHRoaXMuc2V0dGluZ3Muc3RhcnRQb3NpdGlvbikgPyB0aGlzLnNldHRpbmdzLnN0YXJ0UG9zaXRpb24gOiAwKTtcblxuICAgICAgICB0aGlzLmludmFsaWRhdGUoJ2l0ZW1zJyk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEFkZHMgYW4gaXRlbS5cbiAgICAgKiBAdG9kbyBVc2UgYGl0ZW1gIGluc3RlYWQgb2YgYGNvbnRlbnRgIGZvciB0aGUgZXZlbnQgYXJndW1lbnRzLlxuICAgICAqIEBwdWJsaWNcbiAgICAgKiBAcGFyYW0ge0hUTUxFbGVtZW50fGpRdWVyeXxTdHJpbmd9IGNvbnRlbnQgLSBUaGUgaXRlbSBjb250ZW50IHRvIGFkZC5cbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW3Bvc2l0aW9uXSAtIFRoZSByZWxhdGl2ZSBwb3NpdGlvbiBhdCB3aGljaCB0byBpbnNlcnQgdGhlIGl0ZW0gb3RoZXJ3aXNlIHRoZSBpdGVtIHdpbGwgYmUgYWRkZWQgdG8gdGhlIGVuZC5cbiAgICAgKi9cbiAgICBPd2wucHJvdG90eXBlLmFkZCA9IGZ1bmN0aW9uKGNvbnRlbnQsIHBvc2l0aW9uKSB7XG4gICAgICAgIHZhciBjdXJyZW50ID0gdGhpcy5yZWxhdGl2ZSh0aGlzLl9jdXJyZW50KTtcblxuICAgICAgICBwb3NpdGlvbiA9IHBvc2l0aW9uID09PSB1bmRlZmluZWQgPyB0aGlzLl9pdGVtcy5sZW5ndGggOiB0aGlzLm5vcm1hbGl6ZShwb3NpdGlvbiwgdHJ1ZSk7XG4gICAgICAgIGNvbnRlbnQgPSBjb250ZW50IGluc3RhbmNlb2YgalF1ZXJ5ID8gY29udGVudCA6ICQoY29udGVudCk7XG5cbiAgICAgICAgdGhpcy50cmlnZ2VyKCdhZGQnLCB7IGNvbnRlbnQ6IGNvbnRlbnQsIHBvc2l0aW9uOiBwb3NpdGlvbiB9KTtcblxuICAgICAgICBjb250ZW50ID0gdGhpcy5wcmVwYXJlKGNvbnRlbnQpO1xuXG4gICAgICAgIGlmICh0aGlzLl9pdGVtcy5sZW5ndGggPT09IDAgfHwgcG9zaXRpb24gPT09IHRoaXMuX2l0ZW1zLmxlbmd0aCkge1xuICAgICAgICAgICAgdGhpcy5faXRlbXMubGVuZ3RoID09PSAwICYmIHRoaXMuJHN0YWdlLmFwcGVuZChjb250ZW50KTtcbiAgICAgICAgICAgIHRoaXMuX2l0ZW1zLmxlbmd0aCAhPT0gMCAmJiB0aGlzLl9pdGVtc1twb3NpdGlvbiAtIDFdLmFmdGVyKGNvbnRlbnQpO1xuICAgICAgICAgICAgdGhpcy5faXRlbXMucHVzaChjb250ZW50KTtcbiAgICAgICAgICAgIHRoaXMuX21lcmdlcnMucHVzaChjb250ZW50LmZpbmQoJ1tkYXRhLW1lcmdlXScpLmFkZEJhY2soJ1tkYXRhLW1lcmdlXScpLmF0dHIoJ2RhdGEtbWVyZ2UnKSAqIDEgfHwgMSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLl9pdGVtc1twb3NpdGlvbl0uYmVmb3JlKGNvbnRlbnQpO1xuICAgICAgICAgICAgdGhpcy5faXRlbXMuc3BsaWNlKHBvc2l0aW9uLCAwLCBjb250ZW50KTtcbiAgICAgICAgICAgIHRoaXMuX21lcmdlcnMuc3BsaWNlKHBvc2l0aW9uLCAwLCBjb250ZW50LmZpbmQoJ1tkYXRhLW1lcmdlXScpLmFkZEJhY2soJ1tkYXRhLW1lcmdlXScpLmF0dHIoJ2RhdGEtbWVyZ2UnKSAqIDEgfHwgMSk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLl9pdGVtc1tjdXJyZW50XSAmJiB0aGlzLnJlc2V0KHRoaXMuX2l0ZW1zW2N1cnJlbnRdLmluZGV4KCkpO1xuXG4gICAgICAgIHRoaXMuaW52YWxpZGF0ZSgnaXRlbXMnKTtcblxuICAgICAgICB0aGlzLnRyaWdnZXIoJ2FkZGVkJywgeyBjb250ZW50OiBjb250ZW50LCBwb3NpdGlvbjogcG9zaXRpb24gfSk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgYW4gaXRlbSBieSBpdHMgcG9zaXRpb24uXG4gICAgICogQHRvZG8gVXNlIGBpdGVtYCBpbnN0ZWFkIG9mIGBjb250ZW50YCBmb3IgdGhlIGV2ZW50IGFyZ3VtZW50cy5cbiAgICAgKiBAcHVibGljXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IHBvc2l0aW9uIC0gVGhlIHJlbGF0aXZlIHBvc2l0aW9uIG9mIHRoZSBpdGVtIHRvIHJlbW92ZS5cbiAgICAgKi9cbiAgICBPd2wucHJvdG90eXBlLnJlbW92ZSA9IGZ1bmN0aW9uKHBvc2l0aW9uKSB7XG4gICAgICAgIHBvc2l0aW9uID0gdGhpcy5ub3JtYWxpemUocG9zaXRpb24sIHRydWUpO1xuXG4gICAgICAgIGlmIChwb3NpdGlvbiA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnRyaWdnZXIoJ3JlbW92ZScsIHsgY29udGVudDogdGhpcy5faXRlbXNbcG9zaXRpb25dLCBwb3NpdGlvbjogcG9zaXRpb24gfSk7XG5cbiAgICAgICAgdGhpcy5faXRlbXNbcG9zaXRpb25dLnJlbW92ZSgpO1xuICAgICAgICB0aGlzLl9pdGVtcy5zcGxpY2UocG9zaXRpb24sIDEpO1xuICAgICAgICB0aGlzLl9tZXJnZXJzLnNwbGljZShwb3NpdGlvbiwgMSk7XG5cbiAgICAgICAgdGhpcy5pbnZhbGlkYXRlKCdpdGVtcycpO1xuXG4gICAgICAgIHRoaXMudHJpZ2dlcigncmVtb3ZlZCcsIHsgY29udGVudDogbnVsbCwgcG9zaXRpb246IHBvc2l0aW9uIH0pO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBQcmVsb2FkcyBpbWFnZXMgd2l0aCBhdXRvIHdpZHRoLlxuICAgICAqIEB0b2RvIFJlcGxhY2UgYnkgYSBtb3JlIGdlbmVyaWMgYXBwcm9hY2hcbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICovXG4gICAgT3dsLnByb3RvdHlwZS5wcmVsb2FkQXV0b1dpZHRoSW1hZ2VzID0gZnVuY3Rpb24oaW1hZ2VzKSB7XG4gICAgICAgIGltYWdlcy5lYWNoKCQucHJveHkoZnVuY3Rpb24oaSwgZWxlbWVudCkge1xuICAgICAgICAgICAgdGhpcy5lbnRlcigncHJlLWxvYWRpbmcnKTtcbiAgICAgICAgICAgIGVsZW1lbnQgPSAkKGVsZW1lbnQpO1xuICAgICAgICAgICAgJChuZXcgSW1hZ2UoKSkub25lKCdsb2FkJywgJC5wcm94eShmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICAgICAgZWxlbWVudC5hdHRyKCdzcmMnLCBlLnRhcmdldC5zcmMpO1xuICAgICAgICAgICAgICAgIGVsZW1lbnQuY3NzKCdvcGFjaXR5JywgMSk7XG4gICAgICAgICAgICAgICAgdGhpcy5sZWF2ZSgncHJlLWxvYWRpbmcnKTtcbiAgICAgICAgICAgICAgICAhdGhpcy5pcygncHJlLWxvYWRpbmcnKSAmJiAhdGhpcy5pcygnaW5pdGlhbGl6aW5nJykgJiYgdGhpcy5yZWZyZXNoKCk7XG4gICAgICAgICAgICB9LCB0aGlzKSkuYXR0cignc3JjJywgZWxlbWVudC5hdHRyKCdzcmMnKSB8fCBlbGVtZW50LmF0dHIoJ2RhdGEtc3JjJykgfHwgZWxlbWVudC5hdHRyKCdkYXRhLXNyYy1yZXRpbmEnKSk7XG4gICAgICAgIH0sIHRoaXMpKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogRGVzdHJveXMgdGhlIGNhcm91c2VsLlxuICAgICAqIEBwdWJsaWNcbiAgICAgKi9cbiAgICBPd2wucHJvdG90eXBlLmRlc3Ryb3kgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICB0aGlzLiRlbGVtZW50Lm9mZignLm93bC5jb3JlJyk7XG4gICAgICAgIHRoaXMuJHN0YWdlLm9mZignLm93bC5jb3JlJyk7XG4gICAgICAgICQoZG9jdW1lbnQpLm9mZignLm93bC5jb3JlJyk7XG5cbiAgICAgICAgaWYgKHRoaXMuc2V0dGluZ3MucmVzcG9uc2l2ZSAhPT0gZmFsc2UpIHtcbiAgICAgICAgICAgIHdpbmRvdy5jbGVhclRpbWVvdXQodGhpcy5yZXNpemVUaW1lcik7XG4gICAgICAgICAgICB0aGlzLm9mZih3aW5kb3csICdyZXNpemUnLCB0aGlzLl9oYW5kbGVycy5vblRocm90dGxlZFJlc2l6ZSk7XG4gICAgICAgIH1cblxuICAgICAgICBmb3IgKHZhciBpIGluIHRoaXMuX3BsdWdpbnMpIHtcbiAgICAgICAgICAgIHRoaXMuX3BsdWdpbnNbaV0uZGVzdHJveSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy4kc3RhZ2UuY2hpbGRyZW4oJy5jbG9uZWQnKS5yZW1vdmUoKTtcblxuICAgICAgICB0aGlzLiRzdGFnZS51bndyYXAoKTtcbiAgICAgICAgdGhpcy4kc3RhZ2UuY2hpbGRyZW4oKS5jb250ZW50cygpLnVud3JhcCgpO1xuICAgICAgICB0aGlzLiRzdGFnZS5jaGlsZHJlbigpLnVud3JhcCgpO1xuXG4gICAgICAgIHRoaXMuJGVsZW1lbnRcbiAgICAgICAgICAgIC5yZW1vdmVDbGFzcyh0aGlzLm9wdGlvbnMucmVmcmVzaENsYXNzKVxuICAgICAgICAgICAgLnJlbW92ZUNsYXNzKHRoaXMub3B0aW9ucy5sb2FkaW5nQ2xhc3MpXG4gICAgICAgICAgICAucmVtb3ZlQ2xhc3ModGhpcy5vcHRpb25zLmxvYWRlZENsYXNzKVxuICAgICAgICAgICAgLnJlbW92ZUNsYXNzKHRoaXMub3B0aW9ucy5ydGxDbGFzcylcbiAgICAgICAgICAgIC5yZW1vdmVDbGFzcyh0aGlzLm9wdGlvbnMuZHJhZ0NsYXNzKVxuICAgICAgICAgICAgLnJlbW92ZUNsYXNzKHRoaXMub3B0aW9ucy5ncmFiQ2xhc3MpXG4gICAgICAgICAgICAuYXR0cignY2xhc3MnLCB0aGlzLiRlbGVtZW50LmF0dHIoJ2NsYXNzJykucmVwbGFjZShuZXcgUmVnRXhwKHRoaXMub3B0aW9ucy5yZXNwb25zaXZlQ2xhc3MgKyAnLVxcXFxTK1xcXFxzJywgJ2cnKSwgJycpKVxuICAgICAgICAgICAgLnJlbW92ZURhdGEoJ293bC5jYXJvdXNlbCcpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBPcGVyYXRvcnMgdG8gY2FsY3VsYXRlIHJpZ2h0LXRvLWxlZnQgYW5kIGxlZnQtdG8tcmlnaHQuXG4gICAgICogQHByb3RlY3RlZFxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbYV0gLSBUaGUgbGVmdCBzaWRlIG9wZXJhbmQuXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IFtvXSAtIFRoZSBvcGVyYXRvci5cbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2JdIC0gVGhlIHJpZ2h0IHNpZGUgb3BlcmFuZC5cbiAgICAgKi9cbiAgICBPd2wucHJvdG90eXBlLm9wID0gZnVuY3Rpb24oYSwgbywgYikge1xuICAgICAgICB2YXIgcnRsID0gdGhpcy5zZXR0aW5ncy5ydGw7XG4gICAgICAgIHN3aXRjaCAobykge1xuICAgICAgICAgICAgY2FzZSAnPCc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJ0bCA/IGEgPiBiIDogYSA8IGI7XG4gICAgICAgICAgICBjYXNlICc+JzpcbiAgICAgICAgICAgICAgICByZXR1cm4gcnRsID8gYSA8IGIgOiBhID4gYjtcbiAgICAgICAgICAgIGNhc2UgJz49JzpcbiAgICAgICAgICAgICAgICByZXR1cm4gcnRsID8gYSA8PSBiIDogYSA+PSBiO1xuICAgICAgICAgICAgY2FzZSAnPD0nOlxuICAgICAgICAgICAgICAgIHJldHVybiBydGwgPyBhID49IGIgOiBhIDw9IGI7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEF0dGFjaGVzIHRvIGFuIGludGVybmFsIGV2ZW50LlxuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBlbGVtZW50IC0gVGhlIGV2ZW50IHNvdXJjZS5cbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gZXZlbnQgLSBUaGUgZXZlbnQgbmFtZS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBsaXN0ZW5lciAtIFRoZSBldmVudCBoYW5kbGVyIHRvIGF0dGFjaC5cbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IGNhcHR1cmUgLSBXZXRoZXIgdGhlIGV2ZW50IHNob3VsZCBiZSBoYW5kbGVkIGF0IHRoZSBjYXB0dXJpbmcgcGhhc2Ugb3Igbm90LlxuICAgICAqL1xuICAgIE93bC5wcm90b3R5cGUub24gPSBmdW5jdGlvbihlbGVtZW50LCBldmVudCwgbGlzdGVuZXIsIGNhcHR1cmUpIHtcbiAgICAgICAgaWYgKGVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcikge1xuICAgICAgICAgICAgZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKGV2ZW50LCBsaXN0ZW5lciwgY2FwdHVyZSk7XG4gICAgICAgIH0gZWxzZSBpZiAoZWxlbWVudC5hdHRhY2hFdmVudCkge1xuICAgICAgICAgICAgZWxlbWVudC5hdHRhY2hFdmVudCgnb24nICsgZXZlbnQsIGxpc3RlbmVyKTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBEZXRhY2hlcyBmcm9tIGFuIGludGVybmFsIGV2ZW50LlxuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBlbGVtZW50IC0gVGhlIGV2ZW50IHNvdXJjZS5cbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gZXZlbnQgLSBUaGUgZXZlbnQgbmFtZS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBsaXN0ZW5lciAtIFRoZSBhdHRhY2hlZCBldmVudCBoYW5kbGVyIHRvIGRldGFjaC5cbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IGNhcHR1cmUgLSBXZXRoZXIgdGhlIGF0dGFjaGVkIGV2ZW50IGhhbmRsZXIgd2FzIHJlZ2lzdGVyZWQgYXMgYSBjYXB0dXJpbmcgbGlzdGVuZXIgb3Igbm90LlxuICAgICAqL1xuICAgIE93bC5wcm90b3R5cGUub2ZmID0gZnVuY3Rpb24oZWxlbWVudCwgZXZlbnQsIGxpc3RlbmVyLCBjYXB0dXJlKSB7XG4gICAgICAgIGlmIChlbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIpIHtcbiAgICAgICAgICAgIGVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihldmVudCwgbGlzdGVuZXIsIGNhcHR1cmUpO1xuICAgICAgICB9IGVsc2UgaWYgKGVsZW1lbnQuZGV0YWNoRXZlbnQpIHtcbiAgICAgICAgICAgIGVsZW1lbnQuZGV0YWNoRXZlbnQoJ29uJyArIGV2ZW50LCBsaXN0ZW5lcik7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogVHJpZ2dlcnMgYSBwdWJsaWMgZXZlbnQuXG4gICAgICogQHRvZG8gUmVtb3ZlIGBzdGF0dXNgLCBgcmVsYXRlZFRhcmdldGAgc2hvdWxkIGJlIHVzZWQgaW5zdGVhZC5cbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IG5hbWUgLSBUaGUgZXZlbnQgbmFtZS5cbiAgICAgKiBAcGFyYW0geyp9IFtkYXRhPW51bGxdIC0gVGhlIGV2ZW50IGRhdGEuXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IFtuYW1lc3BhY2U9Y2Fyb3VzZWxdIC0gVGhlIGV2ZW50IG5hbWVzcGFjZS5cbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gW3N0YXRlXSAtIFRoZSBzdGF0ZSB3aGljaCBpcyBhc3NvY2lhdGVkIHdpdGggdGhlIGV2ZW50LlxuICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gW2VudGVyPWZhbHNlXSAtIEluZGljYXRlcyBpZiB0aGUgY2FsbCBlbnRlcnMgdGhlIHNwZWNpZmllZCBzdGF0ZSBvciBub3QuXG4gICAgICogQHJldHVybnMge0V2ZW50fSAtIFRoZSBldmVudCBhcmd1bWVudHMuXG4gICAgICovXG4gICAgT3dsLnByb3RvdHlwZS50cmlnZ2VyID0gZnVuY3Rpb24obmFtZSwgZGF0YSwgbmFtZXNwYWNlLCBzdGF0ZSwgZW50ZXIpIHtcbiAgICAgICAgdmFyIHN0YXR1cyA9IHtcbiAgICAgICAgICAgIGl0ZW06IHsgY291bnQ6IHRoaXMuX2l0ZW1zLmxlbmd0aCwgaW5kZXg6IHRoaXMuY3VycmVudCgpIH1cbiAgICAgICAgfSwgaGFuZGxlciA9ICQuY2FtZWxDYXNlKFxuICAgICAgICAgICAgJC5ncmVwKFsgJ29uJywgbmFtZSwgbmFtZXNwYWNlIF0sIGZ1bmN0aW9uKHYpIHsgcmV0dXJuIHYgfSlcbiAgICAgICAgICAgICAgICAuam9pbignLScpLnRvTG93ZXJDYXNlKClcbiAgICAgICAgKSwgZXZlbnQgPSAkLkV2ZW50KFxuICAgICAgICAgICAgWyBuYW1lLCAnb3dsJywgbmFtZXNwYWNlIHx8ICdjYXJvdXNlbCcgXS5qb2luKCcuJykudG9Mb3dlckNhc2UoKSxcbiAgICAgICAgICAgICQuZXh0ZW5kKHsgcmVsYXRlZFRhcmdldDogdGhpcyB9LCBzdGF0dXMsIGRhdGEpXG4gICAgICAgICk7XG5cbiAgICAgICAgaWYgKCF0aGlzLl9zdXByZXNzW25hbWVdKSB7XG4gICAgICAgICAgICAkLmVhY2godGhpcy5fcGx1Z2lucywgZnVuY3Rpb24obmFtZSwgcGx1Z2luKSB7XG4gICAgICAgICAgICAgICAgaWYgKHBsdWdpbi5vblRyaWdnZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgcGx1Z2luLm9uVHJpZ2dlcihldmVudCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHRoaXMucmVnaXN0ZXIoeyB0eXBlOiBPd2wuVHlwZS5FdmVudCwgbmFtZTogbmFtZSB9KTtcbiAgICAgICAgICAgIHRoaXMuJGVsZW1lbnQudHJpZ2dlcihldmVudCk7XG5cbiAgICAgICAgICAgIGlmICh0aGlzLnNldHRpbmdzICYmIHR5cGVvZiB0aGlzLnNldHRpbmdzW2hhbmRsZXJdID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zZXR0aW5nc1toYW5kbGVyXS5jYWxsKHRoaXMsIGV2ZW50KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBldmVudDtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogRW50ZXJzIGEgc3RhdGUuXG4gICAgICogQHBhcmFtIG5hbWUgLSBUaGUgc3RhdGUgbmFtZS5cbiAgICAgKi9cbiAgICBPd2wucHJvdG90eXBlLmVudGVyID0gZnVuY3Rpb24obmFtZSkge1xuICAgICAgICAkLmVhY2goWyBuYW1lIF0uY29uY2F0KHRoaXMuX3N0YXRlcy50YWdzW25hbWVdIHx8IFtdKSwgJC5wcm94eShmdW5jdGlvbihpLCBuYW1lKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5fc3RhdGVzLmN1cnJlbnRbbmFtZV0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHRoaXMuX3N0YXRlcy5jdXJyZW50W25hbWVdID0gMDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhpcy5fc3RhdGVzLmN1cnJlbnRbbmFtZV0rKztcbiAgICAgICAgfSwgdGhpcykpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBMZWF2ZXMgYSBzdGF0ZS5cbiAgICAgKiBAcGFyYW0gbmFtZSAtIFRoZSBzdGF0ZSBuYW1lLlxuICAgICAqL1xuICAgIE93bC5wcm90b3R5cGUubGVhdmUgPSBmdW5jdGlvbihuYW1lKSB7XG4gICAgICAgICQuZWFjaChbIG5hbWUgXS5jb25jYXQodGhpcy5fc3RhdGVzLnRhZ3NbbmFtZV0gfHwgW10pLCAkLnByb3h5KGZ1bmN0aW9uKGksIG5hbWUpIHtcbiAgICAgICAgICAgIHRoaXMuX3N0YXRlcy5jdXJyZW50W25hbWVdLS07XG4gICAgICAgIH0sIHRoaXMpKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogUmVnaXN0ZXJzIGFuIGV2ZW50IG9yIHN0YXRlLlxuICAgICAqIEBwdWJsaWNcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IC0gVGhlIGV2ZW50IG9yIHN0YXRlIHRvIHJlZ2lzdGVyLlxuICAgICAqL1xuICAgIE93bC5wcm90b3R5cGUucmVnaXN0ZXIgPSBmdW5jdGlvbihvYmplY3QpIHtcbiAgICAgICAgaWYgKG9iamVjdC50eXBlID09PSBPd2wuVHlwZS5FdmVudCkge1xuICAgICAgICAgICAgaWYgKCEkLmV2ZW50LnNwZWNpYWxbb2JqZWN0Lm5hbWVdKSB7XG4gICAgICAgICAgICAgICAgJC5ldmVudC5zcGVjaWFsW29iamVjdC5uYW1lXSA9IHt9O1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoISQuZXZlbnQuc3BlY2lhbFtvYmplY3QubmFtZV0ub3dsKSB7XG4gICAgICAgICAgICAgICAgdmFyIF9kZWZhdWx0ID0gJC5ldmVudC5zcGVjaWFsW29iamVjdC5uYW1lXS5fZGVmYXVsdDtcbiAgICAgICAgICAgICAgICAkLmV2ZW50LnNwZWNpYWxbb2JqZWN0Lm5hbWVdLl9kZWZhdWx0ID0gZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoX2RlZmF1bHQgJiYgX2RlZmF1bHQuYXBwbHkgJiYgKCFlLm5hbWVzcGFjZSB8fCBlLm5hbWVzcGFjZS5pbmRleE9mKCdvd2wnKSA9PT0gLTEpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gX2RlZmF1bHQuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZS5uYW1lc3BhY2UgJiYgZS5uYW1lc3BhY2UuaW5kZXhPZignb3dsJykgPiAtMTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICQuZXZlbnQuc3BlY2lhbFtvYmplY3QubmFtZV0ub3dsID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmIChvYmplY3QudHlwZSA9PT0gT3dsLlR5cGUuU3RhdGUpIHtcbiAgICAgICAgICAgIGlmICghdGhpcy5fc3RhdGVzLnRhZ3Nbb2JqZWN0Lm5hbWVdKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fc3RhdGVzLnRhZ3Nbb2JqZWN0Lm5hbWVdID0gb2JqZWN0LnRhZ3M7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMuX3N0YXRlcy50YWdzW29iamVjdC5uYW1lXSA9IHRoaXMuX3N0YXRlcy50YWdzW29iamVjdC5uYW1lXS5jb25jYXQob2JqZWN0LnRhZ3MpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aGlzLl9zdGF0ZXMudGFnc1tvYmplY3QubmFtZV0gPSAkLmdyZXAodGhpcy5fc3RhdGVzLnRhZ3Nbb2JqZWN0Lm5hbWVdLCAkLnByb3h5KGZ1bmN0aW9uKHRhZywgaSkge1xuICAgICAgICAgICAgICAgIHJldHVybiAkLmluQXJyYXkodGFnLCB0aGlzLl9zdGF0ZXMudGFnc1tvYmplY3QubmFtZV0pID09PSBpO1xuICAgICAgICAgICAgfSwgdGhpcykpO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFN1cHByZXNzZXMgZXZlbnRzLlxuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKiBAcGFyYW0ge0FycmF5LjxTdHJpbmc+fSBldmVudHMgLSBUaGUgZXZlbnRzIHRvIHN1cHByZXNzLlxuICAgICAqL1xuICAgIE93bC5wcm90b3R5cGUuc3VwcHJlc3MgPSBmdW5jdGlvbihldmVudHMpIHtcbiAgICAgICAgJC5lYWNoKGV2ZW50cywgJC5wcm94eShmdW5jdGlvbihpbmRleCwgZXZlbnQpIHtcbiAgICAgICAgICAgIHRoaXMuX3N1cHJlc3NbZXZlbnRdID0gdHJ1ZTtcbiAgICAgICAgfSwgdGhpcykpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBSZWxlYXNlcyBzdXBwcmVzc2VkIGV2ZW50cy5cbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICogQHBhcmFtIHtBcnJheS48U3RyaW5nPn0gZXZlbnRzIC0gVGhlIGV2ZW50cyB0byByZWxlYXNlLlxuICAgICAqL1xuICAgIE93bC5wcm90b3R5cGUucmVsZWFzZSA9IGZ1bmN0aW9uKGV2ZW50cykge1xuICAgICAgICAkLmVhY2goZXZlbnRzLCAkLnByb3h5KGZ1bmN0aW9uKGluZGV4LCBldmVudCkge1xuICAgICAgICAgICAgZGVsZXRlIHRoaXMuX3N1cHJlc3NbZXZlbnRdO1xuICAgICAgICB9LCB0aGlzKSk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEdldHMgdW5pZmllZCBwb2ludGVyIGNvb3JkaW5hdGVzIGZyb20gZXZlbnQuXG4gICAgICogQHRvZG8gIzI2MVxuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKiBAcGFyYW0ge0V2ZW50fSAtIFRoZSBgbW91c2Vkb3duYCBvciBgdG91Y2hzdGFydGAgZXZlbnQuXG4gICAgICogQHJldHVybnMge09iamVjdH0gLSBDb250YWlucyBgeGAgYW5kIGB5YCBjb29yZGluYXRlcyBvZiBjdXJyZW50IHBvaW50ZXIgcG9zaXRpb24uXG4gICAgICovXG4gICAgT3dsLnByb3RvdHlwZS5wb2ludGVyID0gZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAgICAgdmFyIHJlc3VsdCA9IHsgeDogbnVsbCwgeTogbnVsbCB9O1xuXG4gICAgICAgIGV2ZW50ID0gZXZlbnQub3JpZ2luYWxFdmVudCB8fCBldmVudCB8fCB3aW5kb3cuZXZlbnQ7XG5cbiAgICAgICAgZXZlbnQgPSBldmVudC50b3VjaGVzICYmIGV2ZW50LnRvdWNoZXMubGVuZ3RoID9cbiAgICAgICAgICAgIGV2ZW50LnRvdWNoZXNbMF0gOiBldmVudC5jaGFuZ2VkVG91Y2hlcyAmJiBldmVudC5jaGFuZ2VkVG91Y2hlcy5sZW5ndGggP1xuICAgICAgICAgICAgICAgIGV2ZW50LmNoYW5nZWRUb3VjaGVzWzBdIDogZXZlbnQ7XG5cbiAgICAgICAgaWYgKGV2ZW50LnBhZ2VYKSB7XG4gICAgICAgICAgICByZXN1bHQueCA9IGV2ZW50LnBhZ2VYO1xuICAgICAgICAgICAgcmVzdWx0LnkgPSBldmVudC5wYWdlWTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJlc3VsdC54ID0gZXZlbnQuY2xpZW50WDtcbiAgICAgICAgICAgIHJlc3VsdC55ID0gZXZlbnQuY2xpZW50WTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIERldGVybWluZXMgaWYgdGhlIGlucHV0IGlzIGEgTnVtYmVyIG9yIHNvbWV0aGluZyB0aGF0IGNhbiBiZSBjb2VyY2VkIHRvIGEgTnVtYmVyXG4gICAgICogQHByb3RlY3RlZFxuICAgICAqIEBwYXJhbSB7TnVtYmVyfFN0cmluZ3xPYmplY3R8QXJyYXl8Qm9vbGVhbnxSZWdFeHB8RnVuY3Rpb258U3ltYm9sfSAtIFRoZSBpbnB1dCB0byBiZSB0ZXN0ZWRcbiAgICAgKiBAcmV0dXJucyB7Qm9vbGVhbn0gLSBBbiBpbmRpY2F0aW9uIGlmIHRoZSBpbnB1dCBpcyBhIE51bWJlciBvciBjYW4gYmUgY29lcmNlZCB0byBhIE51bWJlclxuICAgICAqL1xuICAgIE93bC5wcm90b3R5cGUuaXNOdW1lcmljID0gZnVuY3Rpb24obnVtYmVyKSB7XG4gICAgICAgIHJldHVybiAhaXNOYU4ocGFyc2VGbG9hdChudW1iZXIpKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgZGlmZmVyZW5jZSBvZiB0d28gdmVjdG9ycy5cbiAgICAgKiBAdG9kbyAjMjYxXG4gICAgICogQHByb3RlY3RlZFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSAtIFRoZSBmaXJzdCB2ZWN0b3IuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IC0gVGhlIHNlY29uZCB2ZWN0b3IuXG4gICAgICogQHJldHVybnMge09iamVjdH0gLSBUaGUgZGlmZmVyZW5jZS5cbiAgICAgKi9cbiAgICBPd2wucHJvdG90eXBlLmRpZmZlcmVuY2UgPSBmdW5jdGlvbihmaXJzdCwgc2Vjb25kKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB4OiBmaXJzdC54IC0gc2Vjb25kLngsXG4gICAgICAgICAgICB5OiBmaXJzdC55IC0gc2Vjb25kLnlcbiAgICAgICAgfTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogVGhlIGpRdWVyeSBQbHVnaW4gZm9yIHRoZSBPd2wgQ2Fyb3VzZWxcbiAgICAgKiBAdG9kbyBOYXZpZ2F0aW9uIHBsdWdpbiBgbmV4dGAgYW5kIGBwcmV2YFxuICAgICAqIEBwdWJsaWNcbiAgICAgKi9cbiAgICAkLmZuLm93bENhcm91c2VsID0gZnVuY3Rpb24ob3B0aW9uKSB7XG4gICAgICAgIHZhciBhcmdzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKTtcblxuICAgICAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdmFyICR0aGlzID0gJCh0aGlzKSxcbiAgICAgICAgICAgICAgICBkYXRhID0gJHRoaXMuZGF0YSgnb3dsLmNhcm91c2VsJyk7XG5cbiAgICAgICAgICAgIGlmICghZGF0YSkge1xuICAgICAgICAgICAgICAgIGRhdGEgPSBuZXcgT3dsKHRoaXMsIHR5cGVvZiBvcHRpb24gPT0gJ29iamVjdCcgJiYgb3B0aW9uKTtcbiAgICAgICAgICAgICAgICAkdGhpcy5kYXRhKCdvd2wuY2Fyb3VzZWwnLCBkYXRhKTtcblxuICAgICAgICAgICAgICAgICQuZWFjaChbXG4gICAgICAgICAgICAgICAgICAgICduZXh0JywgJ3ByZXYnLCAndG8nLCAnZGVzdHJveScsICdyZWZyZXNoJywgJ3JlcGxhY2UnLCAnYWRkJywgJ3JlbW92ZSdcbiAgICAgICAgICAgICAgICBdLCBmdW5jdGlvbihpLCBldmVudCkge1xuICAgICAgICAgICAgICAgICAgICBkYXRhLnJlZ2lzdGVyKHsgdHlwZTogT3dsLlR5cGUuRXZlbnQsIG5hbWU6IGV2ZW50IH0pO1xuICAgICAgICAgICAgICAgICAgICBkYXRhLiRlbGVtZW50Lm9uKGV2ZW50ICsgJy5vd2wuY2Fyb3VzZWwuY29yZScsICQucHJveHkoZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGUubmFtZXNwYWNlICYmIGUucmVsYXRlZFRhcmdldCAhPT0gdGhpcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc3VwcHJlc3MoWyBldmVudCBdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhW2V2ZW50XS5hcHBseSh0aGlzLCBbXS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucmVsZWFzZShbIGV2ZW50IF0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9LCBkYXRhKSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICh0eXBlb2Ygb3B0aW9uID09ICdzdHJpbmcnICYmIG9wdGlvbi5jaGFyQXQoMCkgIT09ICdfJykge1xuICAgICAgICAgICAgICAgIGRhdGFbb3B0aW9uXS5hcHBseShkYXRhLCBhcmdzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFRoZSBjb25zdHJ1Y3RvciBmb3IgdGhlIGpRdWVyeSBQbHVnaW5cbiAgICAgKiBAcHVibGljXG4gICAgICovXG4gICAgJC5mbi5vd2xDYXJvdXNlbC5Db25zdHJ1Y3RvciA9IE93bDtcblxufSkod2luZG93LlplcHRvIHx8IHdpbmRvdy5qUXVlcnksIHdpbmRvdywgZG9jdW1lbnQpO1xuXG4vKipcbiAqIEF1dG9SZWZyZXNoIFBsdWdpblxuICogQHZlcnNpb24gMi4xLjBcbiAqIEBhdXRob3IgQXJ0dXMgS29sYW5vd3NraVxuICogQGF1dGhvciBEYXZpZCBEZXV0c2NoXG4gKiBAbGljZW5zZSBUaGUgTUlUIExpY2Vuc2UgKE1JVClcbiAqL1xuOyhmdW5jdGlvbigkLCB3aW5kb3csIGRvY3VtZW50LCB1bmRlZmluZWQpIHtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgdGhlIGF1dG8gcmVmcmVzaCBwbHVnaW4uXG4gICAgICogQGNsYXNzIFRoZSBBdXRvIFJlZnJlc2ggUGx1Z2luXG4gICAgICogQHBhcmFtIHtPd2x9IGNhcm91c2VsIC0gVGhlIE93bCBDYXJvdXNlbFxuICAgICAqL1xuICAgIHZhciBBdXRvUmVmcmVzaCA9IGZ1bmN0aW9uKGNhcm91c2VsKSB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBSZWZlcmVuY2UgdG8gdGhlIGNvcmUuXG4gICAgICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgICAgICogQHR5cGUge093bH1cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuX2NvcmUgPSBjYXJvdXNlbDtcblxuICAgICAgICAvKipcbiAgICAgICAgICogUmVmcmVzaCBpbnRlcnZhbC5cbiAgICAgICAgICogQHByb3RlY3RlZFxuICAgICAgICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5faW50ZXJ2YWwgPSBudWxsO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBXaGV0aGVyIHRoZSBlbGVtZW50IGlzIGN1cnJlbnRseSB2aXNpYmxlIG9yIG5vdC5cbiAgICAgICAgICogQHByb3RlY3RlZFxuICAgICAgICAgKiBAdHlwZSB7Qm9vbGVhbn1cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuX3Zpc2libGUgPSBudWxsO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBBbGwgZXZlbnQgaGFuZGxlcnMuXG4gICAgICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgICAgICogQHR5cGUge09iamVjdH1cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuX2hhbmRsZXJzID0ge1xuICAgICAgICAgICAgJ2luaXRpYWxpemVkLm93bC5jYXJvdXNlbCc6ICQucHJveHkoZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgICAgIGlmIChlLm5hbWVzcGFjZSAmJiB0aGlzLl9jb3JlLnNldHRpbmdzLmF1dG9SZWZyZXNoKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMud2F0Y2goKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LCB0aGlzKVxuICAgICAgICB9O1xuXG4gICAgICAgIC8vIHNldCBkZWZhdWx0IG9wdGlvbnNcbiAgICAgICAgdGhpcy5fY29yZS5vcHRpb25zID0gJC5leHRlbmQoe30sIEF1dG9SZWZyZXNoLkRlZmF1bHRzLCB0aGlzLl9jb3JlLm9wdGlvbnMpO1xuXG4gICAgICAgIC8vIHJlZ2lzdGVyIGV2ZW50IGhhbmRsZXJzXG4gICAgICAgIHRoaXMuX2NvcmUuJGVsZW1lbnQub24odGhpcy5faGFuZGxlcnMpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBEZWZhdWx0IG9wdGlvbnMuXG4gICAgICogQHB1YmxpY1xuICAgICAqL1xuICAgIEF1dG9SZWZyZXNoLkRlZmF1bHRzID0ge1xuICAgICAgICBhdXRvUmVmcmVzaDogdHJ1ZSxcbiAgICAgICAgYXV0b1JlZnJlc2hJbnRlcnZhbDogNTAwXG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFdhdGNoZXMgdGhlIGVsZW1lbnQuXG4gICAgICovXG4gICAgQXV0b1JlZnJlc2gucHJvdG90eXBlLndhdGNoID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIGlmICh0aGlzLl9pbnRlcnZhbCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5fdmlzaWJsZSA9IHRoaXMuX2NvcmUuJGVsZW1lbnQuaXMoJzp2aXNpYmxlJyk7XG4gICAgICAgIHRoaXMuX2ludGVydmFsID0gd2luZG93LnNldEludGVydmFsKCQucHJveHkodGhpcy5yZWZyZXNoLCB0aGlzKSwgdGhpcy5fY29yZS5zZXR0aW5ncy5hdXRvUmVmcmVzaEludGVydmFsKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogUmVmcmVzaGVzIHRoZSBlbGVtZW50LlxuICAgICAqL1xuICAgIEF1dG9SZWZyZXNoLnByb3RvdHlwZS5yZWZyZXNoID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIGlmICh0aGlzLl9jb3JlLiRlbGVtZW50LmlzKCc6dmlzaWJsZScpID09PSB0aGlzLl92aXNpYmxlKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLl92aXNpYmxlID0gIXRoaXMuX3Zpc2libGU7XG5cbiAgICAgICAgdGhpcy5fY29yZS4kZWxlbWVudC50b2dnbGVDbGFzcygnb3dsLWhpZGRlbicsICF0aGlzLl92aXNpYmxlKTtcblxuICAgICAgICB0aGlzLl92aXNpYmxlICYmICh0aGlzLl9jb3JlLmludmFsaWRhdGUoJ3dpZHRoJykgJiYgdGhpcy5fY29yZS5yZWZyZXNoKCkpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBEZXN0cm95cyB0aGUgcGx1Z2luLlxuICAgICAqL1xuICAgIEF1dG9SZWZyZXNoLnByb3RvdHlwZS5kZXN0cm95ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBoYW5kbGVyLCBwcm9wZXJ0eTtcblxuICAgICAgICB3aW5kb3cuY2xlYXJJbnRlcnZhbCh0aGlzLl9pbnRlcnZhbCk7XG5cbiAgICAgICAgZm9yIChoYW5kbGVyIGluIHRoaXMuX2hhbmRsZXJzKSB7XG4gICAgICAgICAgICB0aGlzLl9jb3JlLiRlbGVtZW50Lm9mZihoYW5kbGVyLCB0aGlzLl9oYW5kbGVyc1toYW5kbGVyXSk7XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChwcm9wZXJ0eSBpbiBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh0aGlzKSkge1xuICAgICAgICAgICAgdHlwZW9mIHRoaXNbcHJvcGVydHldICE9ICdmdW5jdGlvbicgJiYgKHRoaXNbcHJvcGVydHldID0gbnVsbCk7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgJC5mbi5vd2xDYXJvdXNlbC5Db25zdHJ1Y3Rvci5QbHVnaW5zLkF1dG9SZWZyZXNoID0gQXV0b1JlZnJlc2g7XG5cbn0pKHdpbmRvdy5aZXB0byB8fCB3aW5kb3cualF1ZXJ5LCB3aW5kb3csIGRvY3VtZW50KTtcblxuLyoqXG4gKiBMYXp5IFBsdWdpblxuICogQHZlcnNpb24gMi4xLjBcbiAqIEBhdXRob3IgQmFydG9zeiBXb2pjaWVjaG93c2tpXG4gKiBAYXV0aG9yIERhdmlkIERldXRzY2hcbiAqIEBsaWNlbnNlIFRoZSBNSVQgTGljZW5zZSAoTUlUKVxuICovXG47KGZ1bmN0aW9uKCQsIHdpbmRvdywgZG9jdW1lbnQsIHVuZGVmaW5lZCkge1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyB0aGUgbGF6eSBwbHVnaW4uXG4gICAgICogQGNsYXNzIFRoZSBMYXp5IFBsdWdpblxuICAgICAqIEBwYXJhbSB7T3dsfSBjYXJvdXNlbCAtIFRoZSBPd2wgQ2Fyb3VzZWxcbiAgICAgKi9cbiAgICB2YXIgTGF6eSA9IGZ1bmN0aW9uKGNhcm91c2VsKSB7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFJlZmVyZW5jZSB0byB0aGUgY29yZS5cbiAgICAgICAgICogQHByb3RlY3RlZFxuICAgICAgICAgKiBAdHlwZSB7T3dsfVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5fY29yZSA9IGNhcm91c2VsO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBBbHJlYWR5IGxvYWRlZCBpdGVtcy5cbiAgICAgICAgICogQHByb3RlY3RlZFxuICAgICAgICAgKiBAdHlwZSB7QXJyYXkuPGpRdWVyeT59XG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLl9sb2FkZWQgPSBbXTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogRXZlbnQgaGFuZGxlcnMuXG4gICAgICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgICAgICogQHR5cGUge09iamVjdH1cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuX2hhbmRsZXJzID0ge1xuICAgICAgICAgICAgJ2luaXRpYWxpemVkLm93bC5jYXJvdXNlbCBjaGFuZ2Uub3dsLmNhcm91c2VsIHJlc2l6ZWQub3dsLmNhcm91c2VsJzogJC5wcm94eShmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFlLm5hbWVzcGFjZSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLl9jb3JlLnNldHRpbmdzIHx8ICF0aGlzLl9jb3JlLnNldHRpbmdzLmxhenlMb2FkKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAoKGUucHJvcGVydHkgJiYgZS5wcm9wZXJ0eS5uYW1lID09ICdwb3NpdGlvbicpIHx8IGUudHlwZSA9PSAnaW5pdGlhbGl6ZWQnKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBzZXR0aW5ncyA9IHRoaXMuX2NvcmUuc2V0dGluZ3MsXG4gICAgICAgICAgICAgICAgICAgICAgICBuID0gKHNldHRpbmdzLmNlbnRlciAmJiBNYXRoLmNlaWwoc2V0dGluZ3MuaXRlbXMgLyAyKSB8fCBzZXR0aW5ncy5pdGVtcyksXG4gICAgICAgICAgICAgICAgICAgICAgICBpID0gKChzZXR0aW5ncy5jZW50ZXIgJiYgbiAqIC0xKSB8fCAwKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uID0gKGUucHJvcGVydHkgJiYgZS5wcm9wZXJ0eS52YWx1ZSAhPT0gdW5kZWZpbmVkID8gZS5wcm9wZXJ0eS52YWx1ZSA6IHRoaXMuX2NvcmUuY3VycmVudCgpKSArIGksXG4gICAgICAgICAgICAgICAgICAgICAgICBjbG9uZXMgPSB0aGlzLl9jb3JlLmNsb25lcygpLmxlbmd0aCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGxvYWQgPSAkLnByb3h5KGZ1bmN0aW9uKGksIHYpIHsgdGhpcy5sb2FkKHYpIH0sIHRoaXMpO1xuXG4gICAgICAgICAgICAgICAgICAgIHdoaWxlIChpKysgPCBuKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmxvYWQoY2xvbmVzIC8gMiArIHRoaXMuX2NvcmUucmVsYXRpdmUocG9zaXRpb24pKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNsb25lcyAmJiAkLmVhY2godGhpcy5fY29yZS5jbG9uZXModGhpcy5fY29yZS5yZWxhdGl2ZShwb3NpdGlvbikpLCBsb2FkKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uKys7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LCB0aGlzKVxuICAgICAgICB9O1xuXG4gICAgICAgIC8vIHNldCB0aGUgZGVmYXVsdCBvcHRpb25zXG4gICAgICAgIHRoaXMuX2NvcmUub3B0aW9ucyA9ICQuZXh0ZW5kKHt9LCBMYXp5LkRlZmF1bHRzLCB0aGlzLl9jb3JlLm9wdGlvbnMpO1xuXG4gICAgICAgIC8vIHJlZ2lzdGVyIGV2ZW50IGhhbmRsZXJcbiAgICAgICAgdGhpcy5fY29yZS4kZWxlbWVudC5vbih0aGlzLl9oYW5kbGVycyk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIERlZmF1bHQgb3B0aW9ucy5cbiAgICAgKiBAcHVibGljXG4gICAgICovXG4gICAgTGF6eS5EZWZhdWx0cyA9IHtcbiAgICAgICAgbGF6eUxvYWQ6IGZhbHNlXG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIExvYWRzIGFsbCByZXNvdXJjZXMgb2YgYW4gaXRlbSBhdCB0aGUgc3BlY2lmaWVkIHBvc2l0aW9uLlxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBwb3NpdGlvbiAtIFRoZSBhYnNvbHV0ZSBwb3NpdGlvbiBvZiB0aGUgaXRlbS5cbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICovXG4gICAgTGF6eS5wcm90b3R5cGUubG9hZCA9IGZ1bmN0aW9uKHBvc2l0aW9uKSB7XG4gICAgICAgIHZhciAkaXRlbSA9IHRoaXMuX2NvcmUuJHN0YWdlLmNoaWxkcmVuKCkuZXEocG9zaXRpb24pLFxuICAgICAgICAgICAgJGVsZW1lbnRzID0gJGl0ZW0gJiYgJGl0ZW0uZmluZCgnLm93bC1sYXp5Jyk7XG5cbiAgICAgICAgaWYgKCEkZWxlbWVudHMgfHwgJC5pbkFycmF5KCRpdGVtLmdldCgwKSwgdGhpcy5fbG9hZGVkKSA+IC0xKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICAkZWxlbWVudHMuZWFjaCgkLnByb3h5KGZ1bmN0aW9uKGluZGV4LCBlbGVtZW50KSB7XG4gICAgICAgICAgICB2YXIgJGVsZW1lbnQgPSAkKGVsZW1lbnQpLCBpbWFnZSxcbiAgICAgICAgICAgICAgICB1cmwgPSAod2luZG93LmRldmljZVBpeGVsUmF0aW8gPiAxICYmICRlbGVtZW50LmF0dHIoJ2RhdGEtc3JjLXJldGluYScpKSB8fCAkZWxlbWVudC5hdHRyKCdkYXRhLXNyYycpO1xuXG4gICAgICAgICAgICB0aGlzLl9jb3JlLnRyaWdnZXIoJ2xvYWQnLCB7IGVsZW1lbnQ6ICRlbGVtZW50LCB1cmw6IHVybCB9LCAnbGF6eScpO1xuXG4gICAgICAgICAgICBpZiAoJGVsZW1lbnQuaXMoJ2ltZycpKSB7XG4gICAgICAgICAgICAgICAgJGVsZW1lbnQub25lKCdsb2FkLm93bC5sYXp5JywgJC5wcm94eShmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgJGVsZW1lbnQuY3NzKCdvcGFjaXR5JywgMSk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2NvcmUudHJpZ2dlcignbG9hZGVkJywgeyBlbGVtZW50OiAkZWxlbWVudCwgdXJsOiB1cmwgfSwgJ2xhenknKTtcbiAgICAgICAgICAgICAgICB9LCB0aGlzKSkuYXR0cignc3JjJywgdXJsKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgaW1hZ2UgPSBuZXcgSW1hZ2UoKTtcbiAgICAgICAgICAgICAgICBpbWFnZS5vbmxvYWQgPSAkLnByb3h5KGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAkZWxlbWVudC5jc3Moe1xuICAgICAgICAgICAgICAgICAgICAgICAgJ2JhY2tncm91bmQtaW1hZ2UnOiAndXJsKFwiJyArIHVybCArICdcIiknLFxuICAgICAgICAgICAgICAgICAgICAgICAgJ29wYWNpdHknOiAnMSdcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2NvcmUudHJpZ2dlcignbG9hZGVkJywgeyBlbGVtZW50OiAkZWxlbWVudCwgdXJsOiB1cmwgfSwgJ2xhenknKTtcbiAgICAgICAgICAgICAgICB9LCB0aGlzKTtcbiAgICAgICAgICAgICAgICBpbWFnZS5zcmMgPSB1cmw7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sIHRoaXMpKTtcblxuICAgICAgICB0aGlzLl9sb2FkZWQucHVzaCgkaXRlbS5nZXQoMCkpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBEZXN0cm95cyB0aGUgcGx1Z2luLlxuICAgICAqIEBwdWJsaWNcbiAgICAgKi9cbiAgICBMYXp5LnByb3RvdHlwZS5kZXN0cm95ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBoYW5kbGVyLCBwcm9wZXJ0eTtcblxuICAgICAgICBmb3IgKGhhbmRsZXIgaW4gdGhpcy5oYW5kbGVycykge1xuICAgICAgICAgICAgdGhpcy5fY29yZS4kZWxlbWVudC5vZmYoaGFuZGxlciwgdGhpcy5oYW5kbGVyc1toYW5kbGVyXSk7XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChwcm9wZXJ0eSBpbiBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh0aGlzKSkge1xuICAgICAgICAgICAgdHlwZW9mIHRoaXNbcHJvcGVydHldICE9ICdmdW5jdGlvbicgJiYgKHRoaXNbcHJvcGVydHldID0gbnVsbCk7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgJC5mbi5vd2xDYXJvdXNlbC5Db25zdHJ1Y3Rvci5QbHVnaW5zLkxhenkgPSBMYXp5O1xuXG59KSh3aW5kb3cuWmVwdG8gfHwgd2luZG93LmpRdWVyeSwgd2luZG93LCBkb2N1bWVudCk7XG5cbi8qKlxuICogQXV0b0hlaWdodCBQbHVnaW5cbiAqIEB2ZXJzaW9uIDIuMS4wXG4gKiBAYXV0aG9yIEJhcnRvc3ogV29qY2llY2hvd3NraVxuICogQGF1dGhvciBEYXZpZCBEZXV0c2NoXG4gKiBAbGljZW5zZSBUaGUgTUlUIExpY2Vuc2UgKE1JVClcbiAqL1xuOyhmdW5jdGlvbigkLCB3aW5kb3csIGRvY3VtZW50LCB1bmRlZmluZWQpIHtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgdGhlIGF1dG8gaGVpZ2h0IHBsdWdpbi5cbiAgICAgKiBAY2xhc3MgVGhlIEF1dG8gSGVpZ2h0IFBsdWdpblxuICAgICAqIEBwYXJhbSB7T3dsfSBjYXJvdXNlbCAtIFRoZSBPd2wgQ2Fyb3VzZWxcbiAgICAgKi9cbiAgICB2YXIgQXV0b0hlaWdodCA9IGZ1bmN0aW9uKGNhcm91c2VsKSB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBSZWZlcmVuY2UgdG8gdGhlIGNvcmUuXG4gICAgICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgICAgICogQHR5cGUge093bH1cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuX2NvcmUgPSBjYXJvdXNlbDtcblxuICAgICAgICAvKipcbiAgICAgICAgICogQWxsIGV2ZW50IGhhbmRsZXJzLlxuICAgICAgICAgKiBAcHJvdGVjdGVkXG4gICAgICAgICAqIEB0eXBlIHtPYmplY3R9XG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLl9oYW5kbGVycyA9IHtcbiAgICAgICAgICAgICdpbml0aWFsaXplZC5vd2wuY2Fyb3VzZWwgcmVmcmVzaGVkLm93bC5jYXJvdXNlbCc6ICQucHJveHkoZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgICAgIGlmIChlLm5hbWVzcGFjZSAmJiB0aGlzLl9jb3JlLnNldHRpbmdzLmF1dG9IZWlnaHQpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy51cGRhdGUoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LCB0aGlzKSxcbiAgICAgICAgICAgICdjaGFuZ2VkLm93bC5jYXJvdXNlbCc6ICQucHJveHkoZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgICAgIGlmIChlLm5hbWVzcGFjZSAmJiB0aGlzLl9jb3JlLnNldHRpbmdzLmF1dG9IZWlnaHQgJiYgZS5wcm9wZXJ0eS5uYW1lID09ICdwb3NpdGlvbicpe1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnVwZGF0ZSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sIHRoaXMpLFxuICAgICAgICAgICAgJ2xvYWRlZC5vd2wubGF6eSc6ICQucHJveHkoZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgICAgIGlmIChlLm5hbWVzcGFjZSAmJiB0aGlzLl9jb3JlLnNldHRpbmdzLmF1dG9IZWlnaHRcbiAgICAgICAgICAgICAgICAgICAgJiYgZS5lbGVtZW50LmNsb3Nlc3QoJy4nICsgdGhpcy5fY29yZS5zZXR0aW5ncy5pdGVtQ2xhc3MpLmluZGV4KCkgPT09IHRoaXMuX2NvcmUuY3VycmVudCgpKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMudXBkYXRlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSwgdGhpcylcbiAgICAgICAgfTtcblxuICAgICAgICAvLyBzZXQgZGVmYXVsdCBvcHRpb25zXG4gICAgICAgIHRoaXMuX2NvcmUub3B0aW9ucyA9ICQuZXh0ZW5kKHt9LCBBdXRvSGVpZ2h0LkRlZmF1bHRzLCB0aGlzLl9jb3JlLm9wdGlvbnMpO1xuXG4gICAgICAgIC8vIHJlZ2lzdGVyIGV2ZW50IGhhbmRsZXJzXG4gICAgICAgIHRoaXMuX2NvcmUuJGVsZW1lbnQub24odGhpcy5faGFuZGxlcnMpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBEZWZhdWx0IG9wdGlvbnMuXG4gICAgICogQHB1YmxpY1xuICAgICAqL1xuICAgIEF1dG9IZWlnaHQuRGVmYXVsdHMgPSB7XG4gICAgICAgIGF1dG9IZWlnaHQ6IGZhbHNlLFxuICAgICAgICBhdXRvSGVpZ2h0Q2xhc3M6ICdvd2wtaGVpZ2h0J1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBVcGRhdGVzIHRoZSB2aWV3LlxuICAgICAqL1xuICAgIEF1dG9IZWlnaHQucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgc3RhcnQgPSB0aGlzLl9jb3JlLl9jdXJyZW50LFxuICAgICAgICAgICAgZW5kID0gc3RhcnQgKyB0aGlzLl9jb3JlLnNldHRpbmdzLml0ZW1zLFxuICAgICAgICAgICAgdmlzaWJsZSA9IHRoaXMuX2NvcmUuJHN0YWdlLmNoaWxkcmVuKCkudG9BcnJheSgpLnNsaWNlKHN0YXJ0LCBlbmQpLFxuICAgICAgICAgICAgaGVpZ2h0cyA9IFtdLFxuICAgICAgICAgICAgbWF4aGVpZ2h0ID0gMDtcblxuICAgICAgICAkLmVhY2godmlzaWJsZSwgZnVuY3Rpb24oaW5kZXgsIGl0ZW0pIHtcbiAgICAgICAgICAgIGhlaWdodHMucHVzaCgkKGl0ZW0pLmhlaWdodCgpKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgbWF4aGVpZ2h0ID0gTWF0aC5tYXguYXBwbHkobnVsbCwgaGVpZ2h0cyk7XG5cbiAgICAgICAgdGhpcy5fY29yZS4kc3RhZ2UucGFyZW50KClcbiAgICAgICAgICAgIC5oZWlnaHQobWF4aGVpZ2h0KVxuICAgICAgICAgICAgLmFkZENsYXNzKHRoaXMuX2NvcmUuc2V0dGluZ3MuYXV0b0hlaWdodENsYXNzKTtcbiAgICB9O1xuXG4gICAgQXV0b0hlaWdodC5wcm90b3R5cGUuZGVzdHJveSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgaGFuZGxlciwgcHJvcGVydHk7XG5cbiAgICAgICAgZm9yIChoYW5kbGVyIGluIHRoaXMuX2hhbmRsZXJzKSB7XG4gICAgICAgICAgICB0aGlzLl9jb3JlLiRlbGVtZW50Lm9mZihoYW5kbGVyLCB0aGlzLl9oYW5kbGVyc1toYW5kbGVyXSk7XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChwcm9wZXJ0eSBpbiBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh0aGlzKSkge1xuICAgICAgICAgICAgdHlwZW9mIHRoaXNbcHJvcGVydHldICE9ICdmdW5jdGlvbicgJiYgKHRoaXNbcHJvcGVydHldID0gbnVsbCk7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgJC5mbi5vd2xDYXJvdXNlbC5Db25zdHJ1Y3Rvci5QbHVnaW5zLkF1dG9IZWlnaHQgPSBBdXRvSGVpZ2h0O1xuXG59KSh3aW5kb3cuWmVwdG8gfHwgd2luZG93LmpRdWVyeSwgd2luZG93LCBkb2N1bWVudCk7XG5cbi8qKlxuICogVmlkZW8gUGx1Z2luXG4gKiBAdmVyc2lvbiAyLjEuMFxuICogQGF1dGhvciBCYXJ0b3N6IFdvamNpZWNob3dza2lcbiAqIEBhdXRob3IgRGF2aWQgRGV1dHNjaFxuICogQGxpY2Vuc2UgVGhlIE1JVCBMaWNlbnNlIChNSVQpXG4gKi9cbjsoZnVuY3Rpb24oJCwgd2luZG93LCBkb2N1bWVudCwgdW5kZWZpbmVkKSB7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIHRoZSB2aWRlbyBwbHVnaW4uXG4gICAgICogQGNsYXNzIFRoZSBWaWRlbyBQbHVnaW5cbiAgICAgKiBAcGFyYW0ge093bH0gY2Fyb3VzZWwgLSBUaGUgT3dsIENhcm91c2VsXG4gICAgICovXG4gICAgdmFyIFZpZGVvID0gZnVuY3Rpb24oY2Fyb3VzZWwpIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFJlZmVyZW5jZSB0byB0aGUgY29yZS5cbiAgICAgICAgICogQHByb3RlY3RlZFxuICAgICAgICAgKiBAdHlwZSB7T3dsfVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5fY29yZSA9IGNhcm91c2VsO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDYWNoZSBhbGwgdmlkZW8gVVJMcy5cbiAgICAgICAgICogQHByb3RlY3RlZFxuICAgICAgICAgKiBAdHlwZSB7T2JqZWN0fVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5fdmlkZW9zID0ge307XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEN1cnJlbnQgcGxheWluZyBpdGVtLlxuICAgICAgICAgKiBAcHJvdGVjdGVkXG4gICAgICAgICAqIEB0eXBlIHtqUXVlcnl9XG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLl9wbGF5aW5nID0gbnVsbDtcblxuICAgICAgICAvKipcbiAgICAgICAgICogQWxsIGV2ZW50IGhhbmRsZXJzLlxuICAgICAgICAgKiBAdG9kbyBUaGUgY2xvbmVkIGNvbnRlbnQgcmVtb3ZhbGUgaXMgdG9vIGxhdGVcbiAgICAgICAgICogQHByb3RlY3RlZFxuICAgICAgICAgKiBAdHlwZSB7T2JqZWN0fVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5faGFuZGxlcnMgPSB7XG4gICAgICAgICAgICAnaW5pdGlhbGl6ZWQub3dsLmNhcm91c2VsJzogJC5wcm94eShmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICAgICAgaWYgKGUubmFtZXNwYWNlKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2NvcmUucmVnaXN0ZXIoeyB0eXBlOiAnc3RhdGUnLCBuYW1lOiAncGxheWluZycsIHRhZ3M6IFsgJ2ludGVyYWN0aW5nJyBdIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sIHRoaXMpLFxuICAgICAgICAgICAgJ3Jlc2l6ZS5vd2wuY2Fyb3VzZWwnOiAkLnByb3h5KGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgICAgICBpZiAoZS5uYW1lc3BhY2UgJiYgdGhpcy5fY29yZS5zZXR0aW5ncy52aWRlbyAmJiB0aGlzLmlzSW5GdWxsU2NyZWVuKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sIHRoaXMpLFxuICAgICAgICAgICAgJ3JlZnJlc2hlZC5vd2wuY2Fyb3VzZWwnOiAkLnByb3h5KGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgICAgICBpZiAoZS5uYW1lc3BhY2UgJiYgdGhpcy5fY29yZS5pcygncmVzaXppbmcnKSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9jb3JlLiRzdGFnZS5maW5kKCcuY2xvbmVkIC5vd2wtdmlkZW8tZnJhbWUnKS5yZW1vdmUoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LCB0aGlzKSxcbiAgICAgICAgICAgICdjaGFuZ2VkLm93bC5jYXJvdXNlbCc6ICQucHJveHkoZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgICAgIGlmIChlLm5hbWVzcGFjZSAmJiBlLnByb3BlcnR5Lm5hbWUgPT09ICdwb3NpdGlvbicgJiYgdGhpcy5fcGxheWluZykge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnN0b3AoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LCB0aGlzKSxcbiAgICAgICAgICAgICdwcmVwYXJlZC5vd2wuY2Fyb3VzZWwnOiAkLnByb3h5KGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgICAgICBpZiAoIWUubmFtZXNwYWNlKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB2YXIgJGVsZW1lbnQgPSAkKGUuY29udGVudCkuZmluZCgnLm93bC12aWRlbycpO1xuXG4gICAgICAgICAgICAgICAgaWYgKCRlbGVtZW50Lmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICAkZWxlbWVudC5jc3MoJ2Rpc3BsYXknLCAnbm9uZScpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmZldGNoKCRlbGVtZW50LCAkKGUuY29udGVudCkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sIHRoaXMpXG4gICAgICAgIH07XG5cbiAgICAgICAgLy8gc2V0IGRlZmF1bHQgb3B0aW9uc1xuICAgICAgICB0aGlzLl9jb3JlLm9wdGlvbnMgPSAkLmV4dGVuZCh7fSwgVmlkZW8uRGVmYXVsdHMsIHRoaXMuX2NvcmUub3B0aW9ucyk7XG5cbiAgICAgICAgLy8gcmVnaXN0ZXIgZXZlbnQgaGFuZGxlcnNcbiAgICAgICAgdGhpcy5fY29yZS4kZWxlbWVudC5vbih0aGlzLl9oYW5kbGVycyk7XG5cbiAgICAgICAgdGhpcy5fY29yZS4kZWxlbWVudC5vbignY2xpY2sub3dsLnZpZGVvJywgJy5vd2wtdmlkZW8tcGxheS1pY29uJywgJC5wcm94eShmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICB0aGlzLnBsYXkoZSk7XG4gICAgICAgIH0sIHRoaXMpKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogRGVmYXVsdCBvcHRpb25zLlxuICAgICAqIEBwdWJsaWNcbiAgICAgKi9cbiAgICBWaWRlby5EZWZhdWx0cyA9IHtcbiAgICAgICAgdmlkZW86IGZhbHNlLFxuICAgICAgICB2aWRlb0hlaWdodDogZmFsc2UsXG4gICAgICAgIHZpZGVvV2lkdGg6IGZhbHNlXG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIHZpZGVvIElEIGFuZCB0aGUgdHlwZSAoWW91VHViZS9WaW1lby92emFhciBvbmx5KS5cbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICogQHBhcmFtIHtqUXVlcnl9IHRhcmdldCAtIFRoZSB0YXJnZXQgY29udGFpbmluZyB0aGUgdmlkZW8gZGF0YS5cbiAgICAgKiBAcGFyYW0ge2pRdWVyeX0gaXRlbSAtIFRoZSBpdGVtIGNvbnRhaW5pbmcgdGhlIHZpZGVvLlxuICAgICAqL1xuICAgIFZpZGVvLnByb3RvdHlwZS5mZXRjaCA9IGZ1bmN0aW9uKHRhcmdldCwgaXRlbSkge1xuICAgICAgICB2YXIgdHlwZSA9IChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICBpZiAodGFyZ2V0LmF0dHIoJ2RhdGEtdmltZW8taWQnKSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ3ZpbWVvJztcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHRhcmdldC5hdHRyKCdkYXRhLXZ6YWFyLWlkJykpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICd2emFhcidcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ3lvdXR1YmUnO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pKCksXG4gICAgICAgICAgICBpZCA9IHRhcmdldC5hdHRyKCdkYXRhLXZpbWVvLWlkJykgfHwgdGFyZ2V0LmF0dHIoJ2RhdGEteW91dHViZS1pZCcpIHx8IHRhcmdldC5hdHRyKCdkYXRhLXZ6YWFyLWlkJyksXG4gICAgICAgICAgICB3aWR0aCA9IHRhcmdldC5hdHRyKCdkYXRhLXdpZHRoJykgfHwgdGhpcy5fY29yZS5zZXR0aW5ncy52aWRlb1dpZHRoLFxuICAgICAgICAgICAgaGVpZ2h0ID0gdGFyZ2V0LmF0dHIoJ2RhdGEtaGVpZ2h0JykgfHwgdGhpcy5fY29yZS5zZXR0aW5ncy52aWRlb0hlaWdodCxcbiAgICAgICAgICAgIHVybCA9IHRhcmdldC5hdHRyKCdocmVmJyk7XG5cbiAgICAgICAgaWYgKHVybCkge1xuXG4gICAgICAgICAgICAvKlxuICAgICAgICAgICAgICAgICAgICBQYXJzZXMgdGhlIGlkJ3Mgb3V0IG9mIHRoZSBmb2xsb3dpbmcgdXJscyAoYW5kIHByb2JhYmx5IG1vcmUpOlxuICAgICAgICAgICAgICAgICAgICBodHRwczovL3d3dy55b3V0dWJlLmNvbS93YXRjaD92PTppZFxuICAgICAgICAgICAgICAgICAgICBodHRwczovL3lvdXR1LmJlLzppZFxuICAgICAgICAgICAgICAgICAgICBodHRwczovL3ZpbWVvLmNvbS86aWRcbiAgICAgICAgICAgICAgICAgICAgaHR0cHM6Ly92aW1lby5jb20vY2hhbm5lbHMvOmNoYW5uZWwvOmlkXG4gICAgICAgICAgICAgICAgICAgIGh0dHBzOi8vdmltZW8uY29tL2dyb3Vwcy86Z3JvdXAvdmlkZW9zLzppZFxuICAgICAgICAgICAgICAgICAgICBodHRwczovL2FwcC52emFhci5jb20vdmlkZW9zLzppZFxuICAgICAgICAgICAgICAgICAgICBWaXN1YWwgZXhhbXBsZTogaHR0cHM6Ly9yZWdleHBlci5jb20vIyhodHRwJTNBJTdDaHR0cHMlM0ElN0MpJTVDJTJGJTVDJTJGKHBsYXllci4lN0N3d3cuJTdDYXBwLiklM0YodmltZW8lNUMuY29tJTdDeW91dHUoYmUlNUMuY29tJTdDJTVDLmJlJTdDYmUlNUMuZ29vZ2xlYXBpcyU1Qy5jb20pJTdDdnphYXIlNUMuY29tKSU1QyUyRih2aWRlbyU1QyUyRiU3Q3ZpZGVvcyU1QyUyRiU3Q2VtYmVkJTVDJTJGJTdDY2hhbm5lbHMlNUMlMkYuJTJCJTVDJTJGJTdDZ3JvdXBzJTVDJTJGLiUyQiU1QyUyRiU3Q3dhdGNoJTVDJTNGdiUzRCU3Q3YlNUMlMkYpJTNGKCU1QkEtWmEtejAtOS5fJTI1LSU1RCopKCU1QyUyNiU1Q1MlMkIpJTNGXG4gICAgICAgICAgICAqL1xuXG4gICAgICAgICAgICBpZCA9IHVybC5tYXRjaCgvKGh0dHA6fGh0dHBzOnwpXFwvXFwvKHBsYXllci58d3d3LnxhcHAuKT8odmltZW9cXC5jb218eW91dHUoYmVcXC5jb218XFwuYmV8YmVcXC5nb29nbGVhcGlzXFwuY29tKXx2emFhclxcLmNvbSlcXC8odmlkZW9cXC98dmlkZW9zXFwvfGVtYmVkXFwvfGNoYW5uZWxzXFwvLitcXC98Z3JvdXBzXFwvLitcXC98d2F0Y2hcXD92PXx2XFwvKT8oW0EtWmEtejAtOS5fJS1dKikoXFwmXFxTKyk/Lyk7XG5cbiAgICAgICAgICAgIGlmIChpZFszXS5pbmRleE9mKCd5b3V0dScpID4gLTEpIHtcbiAgICAgICAgICAgICAgICB0eXBlID0gJ3lvdXR1YmUnO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChpZFszXS5pbmRleE9mKCd2aW1lbycpID4gLTEpIHtcbiAgICAgICAgICAgICAgICB0eXBlID0gJ3ZpbWVvJztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaWRbM10uaW5kZXhPZigndnphYXInKSA+IC0xKSB7XG4gICAgICAgICAgICAgICAgdHlwZSA9ICd2emFhcic7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignVmlkZW8gVVJMIG5vdCBzdXBwb3J0ZWQuJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZCA9IGlkWzZdO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdNaXNzaW5nIHZpZGVvIFVSTC4nKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuX3ZpZGVvc1t1cmxdID0ge1xuICAgICAgICAgICAgdHlwZTogdHlwZSxcbiAgICAgICAgICAgIGlkOiBpZCxcbiAgICAgICAgICAgIHdpZHRoOiB3aWR0aCxcbiAgICAgICAgICAgIGhlaWdodDogaGVpZ2h0XG4gICAgICAgIH07XG5cbiAgICAgICAgaXRlbS5hdHRyKCdkYXRhLXZpZGVvJywgdXJsKTtcblxuICAgICAgICB0aGlzLnRodW1ibmFpbCh0YXJnZXQsIHRoaXMuX3ZpZGVvc1t1cmxdKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyB2aWRlbyB0aHVtYm5haWwuXG4gICAgICogQHByb3RlY3RlZFxuICAgICAqIEBwYXJhbSB7alF1ZXJ5fSB0YXJnZXQgLSBUaGUgdGFyZ2V0IGNvbnRhaW5pbmcgdGhlIHZpZGVvIGRhdGEuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IGluZm8gLSBUaGUgdmlkZW8gaW5mbyBvYmplY3QuXG4gICAgICogQHNlZSBgZmV0Y2hgXG4gICAgICovXG4gICAgVmlkZW8ucHJvdG90eXBlLnRodW1ibmFpbCA9IGZ1bmN0aW9uKHRhcmdldCwgdmlkZW8pIHtcbiAgICAgICAgdmFyIHRuTGluayxcbiAgICAgICAgICAgIGljb24sXG4gICAgICAgICAgICBwYXRoLFxuICAgICAgICAgICAgZGltZW5zaW9ucyA9IHZpZGVvLndpZHRoICYmIHZpZGVvLmhlaWdodCA/ICdzdHlsZT1cIndpZHRoOicgKyB2aWRlby53aWR0aCArICdweDtoZWlnaHQ6JyArIHZpZGVvLmhlaWdodCArICdweDtcIicgOiAnJyxcbiAgICAgICAgICAgIGN1c3RvbVRuID0gdGFyZ2V0LmZpbmQoJ2ltZycpLFxuICAgICAgICAgICAgc3JjVHlwZSA9ICdzcmMnLFxuICAgICAgICAgICAgbGF6eUNsYXNzID0gJycsXG4gICAgICAgICAgICBzZXR0aW5ncyA9IHRoaXMuX2NvcmUuc2V0dGluZ3MsXG4gICAgICAgICAgICBjcmVhdGUgPSBmdW5jdGlvbihwYXRoKSB7XG4gICAgICAgICAgICAgICAgaWNvbiA9ICc8ZGl2IGNsYXNzPVwib3dsLXZpZGVvLXBsYXktaWNvblwiPjwvZGl2Pic7XG5cbiAgICAgICAgICAgICAgICBpZiAoc2V0dGluZ3MubGF6eUxvYWQpIHtcbiAgICAgICAgICAgICAgICAgICAgdG5MaW5rID0gJzxkaXYgY2xhc3M9XCJvd2wtdmlkZW8tdG4gJyArIGxhenlDbGFzcyArICdcIiAnICsgc3JjVHlwZSArICc9XCInICsgcGF0aCArICdcIj48L2Rpdj4nO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRuTGluayA9ICc8ZGl2IGNsYXNzPVwib3dsLXZpZGVvLXRuXCIgc3R5bGU9XCJvcGFjaXR5OjE7YmFja2dyb3VuZC1pbWFnZTp1cmwoJyArIHBhdGggKyAnKVwiPjwvZGl2Pic7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRhcmdldC5hZnRlcih0bkxpbmspO1xuICAgICAgICAgICAgICAgIHRhcmdldC5hZnRlcihpY29uKTtcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgLy8gd3JhcCB2aWRlbyBjb250ZW50IGludG8gb3dsLXZpZGVvLXdyYXBwZXIgZGl2XG4gICAgICAgIHRhcmdldC53cmFwKCc8ZGl2IGNsYXNzPVwib3dsLXZpZGVvLXdyYXBwZXJcIicgKyBkaW1lbnNpb25zICsgJz48L2Rpdj4nKTtcblxuICAgICAgICBpZiAodGhpcy5fY29yZS5zZXR0aW5ncy5sYXp5TG9hZCkge1xuICAgICAgICAgICAgc3JjVHlwZSA9ICdkYXRhLXNyYyc7XG4gICAgICAgICAgICBsYXp5Q2xhc3MgPSAnb3dsLWxhenknO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gY3VzdG9tIHRodW1ibmFpbFxuICAgICAgICBpZiAoY3VzdG9tVG4ubGVuZ3RoKSB7XG4gICAgICAgICAgICBjcmVhdGUoY3VzdG9tVG4uYXR0cihzcmNUeXBlKSk7XG4gICAgICAgICAgICBjdXN0b21Ubi5yZW1vdmUoKTtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh2aWRlby50eXBlID09PSAneW91dHViZScpIHtcbiAgICAgICAgICAgIHBhdGggPSBcIi8vaW1nLnlvdXR1YmUuY29tL3ZpL1wiICsgdmlkZW8uaWQgKyBcIi9ocWRlZmF1bHQuanBnXCI7XG4gICAgICAgICAgICBjcmVhdGUocGF0aCk7XG4gICAgICAgIH0gZWxzZSBpZiAodmlkZW8udHlwZSA9PT0gJ3ZpbWVvJykge1xuICAgICAgICAgICAgJC5hamF4KHtcbiAgICAgICAgICAgICAgICB0eXBlOiAnR0VUJyxcbiAgICAgICAgICAgICAgICB1cmw6ICcvL3ZpbWVvLmNvbS9hcGkvdjIvdmlkZW8vJyArIHZpZGVvLmlkICsgJy5qc29uJyxcbiAgICAgICAgICAgICAgICBqc29ucDogJ2NhbGxiYWNrJyxcbiAgICAgICAgICAgICAgICBkYXRhVHlwZTogJ2pzb25wJyxcbiAgICAgICAgICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbihkYXRhKSB7XG4gICAgICAgICAgICAgICAgICAgIHBhdGggPSBkYXRhWzBdLnRodW1ibmFpbF9sYXJnZTtcbiAgICAgICAgICAgICAgICAgICAgY3JlYXRlKHBhdGgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2UgaWYgKHZpZGVvLnR5cGUgPT09ICd2emFhcicpIHtcbiAgICAgICAgICAgICQuYWpheCh7XG4gICAgICAgICAgICAgICAgdHlwZTogJ0dFVCcsXG4gICAgICAgICAgICAgICAgdXJsOiAnLy92emFhci5jb20vYXBpL3ZpZGVvcy8nICsgdmlkZW8uaWQgKyAnLmpzb24nLFxuICAgICAgICAgICAgICAgIGpzb25wOiAnY2FsbGJhY2snLFxuICAgICAgICAgICAgICAgIGRhdGFUeXBlOiAnanNvbnAnLFxuICAgICAgICAgICAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgcGF0aCA9IGRhdGEuZnJhbWVncmFiX3VybDtcbiAgICAgICAgICAgICAgICAgICAgY3JlYXRlKHBhdGgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFN0b3BzIHRoZSBjdXJyZW50IHZpZGVvLlxuICAgICAqIEBwdWJsaWNcbiAgICAgKi9cbiAgICBWaWRlby5wcm90b3R5cGUuc3RvcCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB0aGlzLl9jb3JlLnRyaWdnZXIoJ3N0b3AnLCBudWxsLCAndmlkZW8nKTtcbiAgICAgICAgdGhpcy5fcGxheWluZy5maW5kKCcub3dsLXZpZGVvLWZyYW1lJykucmVtb3ZlKCk7XG4gICAgICAgIHRoaXMuX3BsYXlpbmcucmVtb3ZlQ2xhc3MoJ293bC12aWRlby1wbGF5aW5nJyk7XG4gICAgICAgIHRoaXMuX3BsYXlpbmcgPSBudWxsO1xuICAgICAgICB0aGlzLl9jb3JlLmxlYXZlKCdwbGF5aW5nJyk7XG4gICAgICAgIHRoaXMuX2NvcmUudHJpZ2dlcignc3RvcHBlZCcsIG51bGwsICd2aWRlbycpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBTdGFydHMgdGhlIGN1cnJlbnQgdmlkZW8uXG4gICAgICogQHB1YmxpY1xuICAgICAqIEBwYXJhbSB7RXZlbnR9IGV2ZW50IC0gVGhlIGV2ZW50IGFyZ3VtZW50cy5cbiAgICAgKi9cbiAgICBWaWRlby5wcm90b3R5cGUucGxheSA9IGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICAgIHZhciB0YXJnZXQgPSAkKGV2ZW50LnRhcmdldCksXG4gICAgICAgICAgICBpdGVtID0gdGFyZ2V0LmNsb3Nlc3QoJy4nICsgdGhpcy5fY29yZS5zZXR0aW5ncy5pdGVtQ2xhc3MpLFxuICAgICAgICAgICAgdmlkZW8gPSB0aGlzLl92aWRlb3NbaXRlbS5hdHRyKCdkYXRhLXZpZGVvJyldLFxuICAgICAgICAgICAgd2lkdGggPSB2aWRlby53aWR0aCB8fCAnMTAwJScsXG4gICAgICAgICAgICBoZWlnaHQgPSB2aWRlby5oZWlnaHQgfHwgdGhpcy5fY29yZS4kc3RhZ2UuaGVpZ2h0KCksXG4gICAgICAgICAgICBodG1sO1xuXG4gICAgICAgIGlmICh0aGlzLl9wbGF5aW5nKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLl9jb3JlLmVudGVyKCdwbGF5aW5nJyk7XG4gICAgICAgIHRoaXMuX2NvcmUudHJpZ2dlcigncGxheScsIG51bGwsICd2aWRlbycpO1xuXG4gICAgICAgIGl0ZW0gPSB0aGlzLl9jb3JlLml0ZW1zKHRoaXMuX2NvcmUucmVsYXRpdmUoaXRlbS5pbmRleCgpKSk7XG5cbiAgICAgICAgdGhpcy5fY29yZS5yZXNldChpdGVtLmluZGV4KCkpO1xuXG4gICAgICAgIGlmICh2aWRlby50eXBlID09PSAneW91dHViZScpIHtcbiAgICAgICAgICAgIGh0bWwgPSAnPGlmcmFtZSB3aWR0aD1cIicgKyB3aWR0aCArICdcIiBoZWlnaHQ9XCInICsgaGVpZ2h0ICsgJ1wiIHNyYz1cIi8vd3d3LnlvdXR1YmUuY29tL2VtYmVkLycgK1xuICAgICAgICAgICAgICAgIHZpZGVvLmlkICsgJz9hdXRvcGxheT0xJnJlbD0wJnY9JyArIHZpZGVvLmlkICsgJ1wiIGZyYW1lYm9yZGVyPVwiMFwiIGFsbG93ZnVsbHNjcmVlbj48L2lmcmFtZT4nO1xuICAgICAgICB9IGVsc2UgaWYgKHZpZGVvLnR5cGUgPT09ICd2aW1lbycpIHtcbiAgICAgICAgICAgIGh0bWwgPSAnPGlmcmFtZSBzcmM9XCIvL3BsYXllci52aW1lby5jb20vdmlkZW8vJyArIHZpZGVvLmlkICtcbiAgICAgICAgICAgICAgICAnP2F1dG9wbGF5PTFcIiB3aWR0aD1cIicgKyB3aWR0aCArICdcIiBoZWlnaHQ9XCInICsgaGVpZ2h0ICtcbiAgICAgICAgICAgICAgICAnXCIgZnJhbWVib3JkZXI9XCIwXCIgd2Via2l0YWxsb3dmdWxsc2NyZWVuIG1vemFsbG93ZnVsbHNjcmVlbiBhbGxvd2Z1bGxzY3JlZW4+PC9pZnJhbWU+JztcbiAgICAgICAgfSBlbHNlIGlmICh2aWRlby50eXBlID09PSAndnphYXInKSB7XG4gICAgICAgICAgICBodG1sID0gJzxpZnJhbWUgZnJhbWVib3JkZXI9XCIwXCInICsgJ2hlaWdodD1cIicgKyBoZWlnaHQgKyAnXCInICsgJ3dpZHRoPVwiJyArIHdpZHRoICtcbiAgICAgICAgICAgICAgICAnXCIgYWxsb3dmdWxsc2NyZWVuIG1vemFsbG93ZnVsbHNjcmVlbiB3ZWJraXRBbGxvd0Z1bGxTY3JlZW4gJyArXG4gICAgICAgICAgICAgICAgJ3NyYz1cIi8vdmlldy52emFhci5jb20vJyArIHZpZGVvLmlkICsgJy9wbGF5ZXI/YXV0b3BsYXk9dHJ1ZVwiPjwvaWZyYW1lPic7XG4gICAgICAgIH1cblxuICAgICAgICAkKCc8ZGl2IGNsYXNzPVwib3dsLXZpZGVvLWZyYW1lXCI+JyArIGh0bWwgKyAnPC9kaXY+JykuaW5zZXJ0QWZ0ZXIoaXRlbS5maW5kKCcub3dsLXZpZGVvJykpO1xuXG4gICAgICAgIHRoaXMuX3BsYXlpbmcgPSBpdGVtLmFkZENsYXNzKCdvd2wtdmlkZW8tcGxheWluZycpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3Mgd2hldGhlciBhbiB2aWRlbyBpcyBjdXJyZW50bHkgaW4gZnVsbCBzY3JlZW4gbW9kZSBvciBub3QuXG4gICAgICogQHRvZG8gQmFkIHN0eWxlIGJlY2F1c2UgbG9va3MgbGlrZSBhIHJlYWRvbmx5IG1ldGhvZCBidXQgY2hhbmdlcyBtZW1iZXJzLlxuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKiBAcmV0dXJucyB7Qm9vbGVhbn1cbiAgICAgKi9cbiAgICBWaWRlby5wcm90b3R5cGUuaXNJbkZ1bGxTY3JlZW4gPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIGVsZW1lbnQgPSBkb2N1bWVudC5mdWxsc2NyZWVuRWxlbWVudCB8fCBkb2N1bWVudC5tb3pGdWxsU2NyZWVuRWxlbWVudCB8fFxuICAgICAgICAgICAgZG9jdW1lbnQud2Via2l0RnVsbHNjcmVlbkVsZW1lbnQ7XG5cbiAgICAgICAgcmV0dXJuIGVsZW1lbnQgJiYgJChlbGVtZW50KS5wYXJlbnQoKS5oYXNDbGFzcygnb3dsLXZpZGVvLWZyYW1lJyk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIERlc3Ryb3lzIHRoZSBwbHVnaW4uXG4gICAgICovXG4gICAgVmlkZW8ucHJvdG90eXBlLmRlc3Ryb3kgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIGhhbmRsZXIsIHByb3BlcnR5O1xuXG4gICAgICAgIHRoaXMuX2NvcmUuJGVsZW1lbnQub2ZmKCdjbGljay5vd2wudmlkZW8nKTtcblxuICAgICAgICBmb3IgKGhhbmRsZXIgaW4gdGhpcy5faGFuZGxlcnMpIHtcbiAgICAgICAgICAgIHRoaXMuX2NvcmUuJGVsZW1lbnQub2ZmKGhhbmRsZXIsIHRoaXMuX2hhbmRsZXJzW2hhbmRsZXJdKTtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKHByb3BlcnR5IGluIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHRoaXMpKSB7XG4gICAgICAgICAgICB0eXBlb2YgdGhpc1twcm9wZXJ0eV0gIT0gJ2Z1bmN0aW9uJyAmJiAodGhpc1twcm9wZXJ0eV0gPSBudWxsKTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICAkLmZuLm93bENhcm91c2VsLkNvbnN0cnVjdG9yLlBsdWdpbnMuVmlkZW8gPSBWaWRlbztcblxufSkod2luZG93LlplcHRvIHx8IHdpbmRvdy5qUXVlcnksIHdpbmRvdywgZG9jdW1lbnQpO1xuXG4vKipcbiAqIEFuaW1hdGUgUGx1Z2luXG4gKiBAdmVyc2lvbiAyLjEuMFxuICogQGF1dGhvciBCYXJ0b3N6IFdvamNpZWNob3dza2lcbiAqIEBhdXRob3IgRGF2aWQgRGV1dHNjaFxuICogQGxpY2Vuc2UgVGhlIE1JVCBMaWNlbnNlIChNSVQpXG4gKi9cbjsoZnVuY3Rpb24oJCwgd2luZG93LCBkb2N1bWVudCwgdW5kZWZpbmVkKSB7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIHRoZSBhbmltYXRlIHBsdWdpbi5cbiAgICAgKiBAY2xhc3MgVGhlIE5hdmlnYXRpb24gUGx1Z2luXG4gICAgICogQHBhcmFtIHtPd2x9IHNjb3BlIC0gVGhlIE93bCBDYXJvdXNlbFxuICAgICAqL1xuICAgIHZhciBBbmltYXRlID0gZnVuY3Rpb24oc2NvcGUpIHtcbiAgICAgICAgdGhpcy5jb3JlID0gc2NvcGU7XG4gICAgICAgIHRoaXMuY29yZS5vcHRpb25zID0gJC5leHRlbmQoe30sIEFuaW1hdGUuRGVmYXVsdHMsIHRoaXMuY29yZS5vcHRpb25zKTtcbiAgICAgICAgdGhpcy5zd2FwcGluZyA9IHRydWU7XG4gICAgICAgIHRoaXMucHJldmlvdXMgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMubmV4dCA9IHVuZGVmaW5lZDtcblxuICAgICAgICB0aGlzLmhhbmRsZXJzID0ge1xuICAgICAgICAgICAgJ2NoYW5nZS5vd2wuY2Fyb3VzZWwnOiAkLnByb3h5KGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgICAgICBpZiAoZS5uYW1lc3BhY2UgJiYgZS5wcm9wZXJ0eS5uYW1lID09ICdwb3NpdGlvbicpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wcmV2aW91cyA9IHRoaXMuY29yZS5jdXJyZW50KCk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMubmV4dCA9IGUucHJvcGVydHkudmFsdWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSwgdGhpcyksXG4gICAgICAgICAgICAnZHJhZy5vd2wuY2Fyb3VzZWwgZHJhZ2dlZC5vd2wuY2Fyb3VzZWwgdHJhbnNsYXRlZC5vd2wuY2Fyb3VzZWwnOiAkLnByb3h5KGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgICAgICBpZiAoZS5uYW1lc3BhY2UpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zd2FwcGluZyA9IGUudHlwZSA9PSAndHJhbnNsYXRlZCc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSwgdGhpcyksXG4gICAgICAgICAgICAndHJhbnNsYXRlLm93bC5jYXJvdXNlbCc6ICQucHJveHkoZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgICAgIGlmIChlLm5hbWVzcGFjZSAmJiB0aGlzLnN3YXBwaW5nICYmICh0aGlzLmNvcmUub3B0aW9ucy5hbmltYXRlT3V0IHx8IHRoaXMuY29yZS5vcHRpb25zLmFuaW1hdGVJbikpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zd2FwKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSwgdGhpcylcbiAgICAgICAgfTtcblxuICAgICAgICB0aGlzLmNvcmUuJGVsZW1lbnQub24odGhpcy5oYW5kbGVycyk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIERlZmF1bHQgb3B0aW9ucy5cbiAgICAgKiBAcHVibGljXG4gICAgICovXG4gICAgQW5pbWF0ZS5EZWZhdWx0cyA9IHtcbiAgICAgICAgYW5pbWF0ZU91dDogZmFsc2UsXG4gICAgICAgIGFuaW1hdGVJbjogZmFsc2VcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogVG9nZ2xlcyB0aGUgYW5pbWF0aW9uIGNsYXNzZXMgd2hlbmV2ZXIgYW4gdHJhbnNsYXRpb25zIHN0YXJ0cy5cbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICogQHJldHVybnMge0Jvb2xlYW58dW5kZWZpbmVkfVxuICAgICAqL1xuICAgIEFuaW1hdGUucHJvdG90eXBlLnN3YXAgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICBpZiAodGhpcy5jb3JlLnNldHRpbmdzLml0ZW1zICE9PSAxKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoISQuc3VwcG9ydC5hbmltYXRpb24gfHwgISQuc3VwcG9ydC50cmFuc2l0aW9uKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmNvcmUuc3BlZWQoMCk7XG5cbiAgICAgICAgdmFyIGxlZnQsXG4gICAgICAgICAgICBjbGVhciA9ICQucHJveHkodGhpcy5jbGVhciwgdGhpcyksXG4gICAgICAgICAgICBwcmV2aW91cyA9IHRoaXMuY29yZS4kc3RhZ2UuY2hpbGRyZW4oKS5lcSh0aGlzLnByZXZpb3VzKSxcbiAgICAgICAgICAgIG5leHQgPSB0aGlzLmNvcmUuJHN0YWdlLmNoaWxkcmVuKCkuZXEodGhpcy5uZXh0KSxcbiAgICAgICAgICAgIGluY29taW5nID0gdGhpcy5jb3JlLnNldHRpbmdzLmFuaW1hdGVJbixcbiAgICAgICAgICAgIG91dGdvaW5nID0gdGhpcy5jb3JlLnNldHRpbmdzLmFuaW1hdGVPdXQ7XG5cbiAgICAgICAgaWYgKHRoaXMuY29yZS5jdXJyZW50KCkgPT09IHRoaXMucHJldmlvdXMpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChvdXRnb2luZykge1xuICAgICAgICAgICAgbGVmdCA9IHRoaXMuY29yZS5jb29yZGluYXRlcyh0aGlzLnByZXZpb3VzKSAtIHRoaXMuY29yZS5jb29yZGluYXRlcyh0aGlzLm5leHQpO1xuICAgICAgICAgICAgcHJldmlvdXMub25lKCQuc3VwcG9ydC5hbmltYXRpb24uZW5kLCBjbGVhcilcbiAgICAgICAgICAgICAgICAuY3NzKCB7ICdsZWZ0JzogbGVmdCArICdweCcgfSApXG4gICAgICAgICAgICAgICAgLmFkZENsYXNzKCdhbmltYXRlZCBvd2wtYW5pbWF0ZWQtb3V0JylcbiAgICAgICAgICAgICAgICAuYWRkQ2xhc3Mob3V0Z29pbmcpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGluY29taW5nKSB7XG4gICAgICAgICAgICBuZXh0Lm9uZSgkLnN1cHBvcnQuYW5pbWF0aW9uLmVuZCwgY2xlYXIpXG4gICAgICAgICAgICAgICAgLmFkZENsYXNzKCdhbmltYXRlZCBvd2wtYW5pbWF0ZWQtaW4nKVxuICAgICAgICAgICAgICAgIC5hZGRDbGFzcyhpbmNvbWluZyk7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgQW5pbWF0ZS5wcm90b3R5cGUuY2xlYXIgPSBmdW5jdGlvbihlKSB7XG4gICAgICAgICQoZS50YXJnZXQpLmNzcyggeyAnbGVmdCc6ICcnIH0gKVxuICAgICAgICAgICAgLnJlbW92ZUNsYXNzKCdhbmltYXRlZCBvd2wtYW5pbWF0ZWQtb3V0IG93bC1hbmltYXRlZC1pbicpXG4gICAgICAgICAgICAucmVtb3ZlQ2xhc3ModGhpcy5jb3JlLnNldHRpbmdzLmFuaW1hdGVJbilcbiAgICAgICAgICAgIC5yZW1vdmVDbGFzcyh0aGlzLmNvcmUuc2V0dGluZ3MuYW5pbWF0ZU91dCk7XG4gICAgICAgIHRoaXMuY29yZS5vblRyYW5zaXRpb25FbmQoKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogRGVzdHJveXMgdGhlIHBsdWdpbi5cbiAgICAgKiBAcHVibGljXG4gICAgICovXG4gICAgQW5pbWF0ZS5wcm90b3R5cGUuZGVzdHJveSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgaGFuZGxlciwgcHJvcGVydHk7XG5cbiAgICAgICAgZm9yIChoYW5kbGVyIGluIHRoaXMuaGFuZGxlcnMpIHtcbiAgICAgICAgICAgIHRoaXMuY29yZS4kZWxlbWVudC5vZmYoaGFuZGxlciwgdGhpcy5oYW5kbGVyc1toYW5kbGVyXSk7XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChwcm9wZXJ0eSBpbiBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh0aGlzKSkge1xuICAgICAgICAgICAgdHlwZW9mIHRoaXNbcHJvcGVydHldICE9ICdmdW5jdGlvbicgJiYgKHRoaXNbcHJvcGVydHldID0gbnVsbCk7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgJC5mbi5vd2xDYXJvdXNlbC5Db25zdHJ1Y3Rvci5QbHVnaW5zLkFuaW1hdGUgPSBBbmltYXRlO1xuXG59KSh3aW5kb3cuWmVwdG8gfHwgd2luZG93LmpRdWVyeSwgd2luZG93LCBkb2N1bWVudCk7XG5cbi8qKlxuICogQXV0b3BsYXkgUGx1Z2luXG4gKiBAdmVyc2lvbiAyLjEuMFxuICogQGF1dGhvciBCYXJ0b3N6IFdvamNpZWNob3dza2lcbiAqIEBhdXRob3IgQXJ0dXMgS29sYW5vd3NraVxuICogQGF1dGhvciBEYXZpZCBEZXV0c2NoXG4gKiBAbGljZW5zZSBUaGUgTUlUIExpY2Vuc2UgKE1JVClcbiAqL1xuOyhmdW5jdGlvbigkLCB3aW5kb3csIGRvY3VtZW50LCB1bmRlZmluZWQpIHtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgdGhlIGF1dG9wbGF5IHBsdWdpbi5cbiAgICAgKiBAY2xhc3MgVGhlIEF1dG9wbGF5IFBsdWdpblxuICAgICAqIEBwYXJhbSB7T3dsfSBzY29wZSAtIFRoZSBPd2wgQ2Fyb3VzZWxcbiAgICAgKi9cbiAgICB2YXIgQXV0b3BsYXkgPSBmdW5jdGlvbihjYXJvdXNlbCkge1xuICAgICAgICAvKipcbiAgICAgICAgICogUmVmZXJlbmNlIHRvIHRoZSBjb3JlLlxuICAgICAgICAgKiBAcHJvdGVjdGVkXG4gICAgICAgICAqIEB0eXBlIHtPd2x9XG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLl9jb3JlID0gY2Fyb3VzZWw7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRoZSBhdXRvcGxheSB0aW1lb3V0LlxuICAgICAgICAgKiBAdHlwZSB7VGltZW91dH1cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuX3RpbWVvdXQgPSBudWxsO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBJbmRpY2F0ZXMgd2hlbmV2ZXIgdGhlIGF1dG9wbGF5IGlzIHBhdXNlZC5cbiAgICAgICAgICogQHR5cGUge0Jvb2xlYW59XG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLl9wYXVzZWQgPSBmYWxzZTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogQWxsIGV2ZW50IGhhbmRsZXJzLlxuICAgICAgICAgKiBAcHJvdGVjdGVkXG4gICAgICAgICAqIEB0eXBlIHtPYmplY3R9XG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLl9oYW5kbGVycyA9IHtcbiAgICAgICAgICAgICdjaGFuZ2VkLm93bC5jYXJvdXNlbCc6ICQucHJveHkoZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgICAgIGlmIChlLm5hbWVzcGFjZSAmJiBlLnByb3BlcnR5Lm5hbWUgPT09ICdzZXR0aW5ncycpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuX2NvcmUuc2V0dGluZ3MuYXV0b3BsYXkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucGxheSgpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zdG9wKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGUubmFtZXNwYWNlICYmIGUucHJvcGVydHkubmFtZSA9PT0gJ3Bvc2l0aW9uJykge1xuICAgICAgICAgICAgICAgICAgICAvL2NvbnNvbGUubG9nKCdwbGF5PycsIGUpO1xuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5fY29yZS5zZXR0aW5ncy5hdXRvcGxheSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fc2V0QXV0b1BsYXlJbnRlcnZhbCgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSwgdGhpcyksXG4gICAgICAgICAgICAnaW5pdGlhbGl6ZWQub3dsLmNhcm91c2VsJzogJC5wcm94eShmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICAgICAgaWYgKGUubmFtZXNwYWNlICYmIHRoaXMuX2NvcmUuc2V0dGluZ3MuYXV0b3BsYXkpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wbGF5KCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSwgdGhpcyksXG4gICAgICAgICAgICAncGxheS5vd2wuYXV0b3BsYXknOiAkLnByb3h5KGZ1bmN0aW9uKGUsIHQsIHMpIHtcbiAgICAgICAgICAgICAgICBpZiAoZS5uYW1lc3BhY2UpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wbGF5KHQsIHMpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sIHRoaXMpLFxuICAgICAgICAgICAgJ3N0b3Aub3dsLmF1dG9wbGF5JzogJC5wcm94eShmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICAgICAgaWYgKGUubmFtZXNwYWNlKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc3RvcCgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sIHRoaXMpLFxuICAgICAgICAgICAgJ21vdXNlb3Zlci5vd2wuYXV0b3BsYXknOiAkLnByb3h5KGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLl9jb3JlLnNldHRpbmdzLmF1dG9wbGF5SG92ZXJQYXVzZSAmJiB0aGlzLl9jb3JlLmlzKCdyb3RhdGluZycpKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucGF1c2UoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LCB0aGlzKSxcbiAgICAgICAgICAgICdtb3VzZWxlYXZlLm93bC5hdXRvcGxheSc6ICQucHJveHkoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuX2NvcmUuc2V0dGluZ3MuYXV0b3BsYXlIb3ZlclBhdXNlICYmIHRoaXMuX2NvcmUuaXMoJ3JvdGF0aW5nJykpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wbGF5KCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSwgdGhpcyksXG4gICAgICAgICAgICAndG91Y2hzdGFydC5vd2wuY29yZSc6ICQucHJveHkoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuX2NvcmUuc2V0dGluZ3MuYXV0b3BsYXlIb3ZlclBhdXNlICYmIHRoaXMuX2NvcmUuaXMoJ3JvdGF0aW5nJykpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wYXVzZSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sIHRoaXMpLFxuICAgICAgICAgICAgJ3RvdWNoZW5kLm93bC5jb3JlJzogJC5wcm94eShmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5fY29yZS5zZXR0aW5ncy5hdXRvcGxheUhvdmVyUGF1c2UpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wbGF5KCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSwgdGhpcylcbiAgICAgICAgfTtcblxuICAgICAgICAvLyByZWdpc3RlciBldmVudCBoYW5kbGVyc1xuICAgICAgICB0aGlzLl9jb3JlLiRlbGVtZW50Lm9uKHRoaXMuX2hhbmRsZXJzKTtcblxuICAgICAgICAvLyBzZXQgZGVmYXVsdCBvcHRpb25zXG4gICAgICAgIHRoaXMuX2NvcmUub3B0aW9ucyA9ICQuZXh0ZW5kKHt9LCBBdXRvcGxheS5EZWZhdWx0cywgdGhpcy5fY29yZS5vcHRpb25zKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogRGVmYXVsdCBvcHRpb25zLlxuICAgICAqIEBwdWJsaWNcbiAgICAgKi9cbiAgICBBdXRvcGxheS5EZWZhdWx0cyA9IHtcbiAgICAgICAgYXV0b3BsYXk6IGZhbHNlLFxuICAgICAgICBhdXRvcGxheVRpbWVvdXQ6IDUwMDAsXG4gICAgICAgIGF1dG9wbGF5SG92ZXJQYXVzZTogZmFsc2UsXG4gICAgICAgIGF1dG9wbGF5U3BlZWQ6IGZhbHNlXG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFN0YXJ0cyB0aGUgYXV0b3BsYXkuXG4gICAgICogQHB1YmxpY1xuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbdGltZW91dF0gLSBUaGUgaW50ZXJ2YWwgYmVmb3JlIHRoZSBuZXh0IGFuaW1hdGlvbiBzdGFydHMuXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtzcGVlZF0gLSBUaGUgYW5pbWF0aW9uIHNwZWVkIGZvciB0aGUgYW5pbWF0aW9ucy5cbiAgICAgKi9cbiAgICBBdXRvcGxheS5wcm90b3R5cGUucGxheSA9IGZ1bmN0aW9uKHRpbWVvdXQsIHNwZWVkKSB7XG4gICAgICAgIHRoaXMuX3BhdXNlZCA9IGZhbHNlO1xuXG4gICAgICAgIGlmICh0aGlzLl9jb3JlLmlzKCdyb3RhdGluZycpKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLl9jb3JlLmVudGVyKCdyb3RhdGluZycpO1xuXG4gICAgICAgIHRoaXMuX3NldEF1dG9QbGF5SW50ZXJ2YWwoKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogR2V0cyBhIG5ldyB0aW1lb3V0XG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW3RpbWVvdXRdIC0gVGhlIGludGVydmFsIGJlZm9yZSB0aGUgbmV4dCBhbmltYXRpb24gc3RhcnRzLlxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbc3BlZWRdIC0gVGhlIGFuaW1hdGlvbiBzcGVlZCBmb3IgdGhlIGFuaW1hdGlvbnMuXG4gICAgICogQHJldHVybiB7VGltZW91dH1cbiAgICAgKi9cbiAgICBBdXRvcGxheS5wcm90b3R5cGUuX2dldE5leHRUaW1lb3V0ID0gZnVuY3Rpb24odGltZW91dCwgc3BlZWQpIHtcbiAgICAgICAgaWYgKCB0aGlzLl90aW1lb3V0ICkge1xuICAgICAgICAgICAgd2luZG93LmNsZWFyVGltZW91dCh0aGlzLl90aW1lb3V0KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gd2luZG93LnNldFRpbWVvdXQoJC5wcm94eShmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLl9wYXVzZWQgfHwgdGhpcy5fY29yZS5pcygnYnVzeScpIHx8IHRoaXMuX2NvcmUuaXMoJ2ludGVyYWN0aW5nJykgfHwgZG9jdW1lbnQuaGlkZGVuKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5fY29yZS5uZXh0KHNwZWVkIHx8IHRoaXMuX2NvcmUuc2V0dGluZ3MuYXV0b3BsYXlTcGVlZCk7XG4gICAgICAgIH0sIHRoaXMpLCB0aW1lb3V0IHx8IHRoaXMuX2NvcmUuc2V0dGluZ3MuYXV0b3BsYXlUaW1lb3V0KTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogU2V0cyBhdXRvcGxheSBpbiBtb3Rpb24uXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBBdXRvcGxheS5wcm90b3R5cGUuX3NldEF1dG9QbGF5SW50ZXJ2YWwgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdGhpcy5fdGltZW91dCA9IHRoaXMuX2dldE5leHRUaW1lb3V0KCk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFN0b3BzIHRoZSBhdXRvcGxheS5cbiAgICAgKiBAcHVibGljXG4gICAgICovXG4gICAgQXV0b3BsYXkucHJvdG90eXBlLnN0b3AgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgaWYgKCF0aGlzLl9jb3JlLmlzKCdyb3RhdGluZycpKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB3aW5kb3cuY2xlYXJUaW1lb3V0KHRoaXMuX3RpbWVvdXQpO1xuICAgICAgICB0aGlzLl9jb3JlLmxlYXZlKCdyb3RhdGluZycpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBTdG9wcyB0aGUgYXV0b3BsYXkuXG4gICAgICogQHB1YmxpY1xuICAgICAqL1xuICAgIEF1dG9wbGF5LnByb3RvdHlwZS5wYXVzZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICBpZiAoIXRoaXMuX2NvcmUuaXMoJ3JvdGF0aW5nJykpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuX3BhdXNlZCA9IHRydWU7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIERlc3Ryb3lzIHRoZSBwbHVnaW4uXG4gICAgICovXG4gICAgQXV0b3BsYXkucHJvdG90eXBlLmRlc3Ryb3kgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIGhhbmRsZXIsIHByb3BlcnR5O1xuXG4gICAgICAgIHRoaXMuc3RvcCgpO1xuXG4gICAgICAgIGZvciAoaGFuZGxlciBpbiB0aGlzLl9oYW5kbGVycykge1xuICAgICAgICAgICAgdGhpcy5fY29yZS4kZWxlbWVudC5vZmYoaGFuZGxlciwgdGhpcy5faGFuZGxlcnNbaGFuZGxlcl0pO1xuICAgICAgICB9XG4gICAgICAgIGZvciAocHJvcGVydHkgaW4gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModGhpcykpIHtcbiAgICAgICAgICAgIHR5cGVvZiB0aGlzW3Byb3BlcnR5XSAhPSAnZnVuY3Rpb24nICYmICh0aGlzW3Byb3BlcnR5XSA9IG51bGwpO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgICQuZm4ub3dsQ2Fyb3VzZWwuQ29uc3RydWN0b3IuUGx1Z2lucy5hdXRvcGxheSA9IEF1dG9wbGF5O1xuXG59KSh3aW5kb3cuWmVwdG8gfHwgd2luZG93LmpRdWVyeSwgd2luZG93LCBkb2N1bWVudCk7XG5cbi8qKlxuICogTmF2aWdhdGlvbiBQbHVnaW5cbiAqIEB2ZXJzaW9uIDIuMS4wXG4gKiBAYXV0aG9yIEFydHVzIEtvbGFub3dza2lcbiAqIEBhdXRob3IgRGF2aWQgRGV1dHNjaFxuICogQGxpY2Vuc2UgVGhlIE1JVCBMaWNlbnNlIChNSVQpXG4gKi9cbjsoZnVuY3Rpb24oJCwgd2luZG93LCBkb2N1bWVudCwgdW5kZWZpbmVkKSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyB0aGUgbmF2aWdhdGlvbiBwbHVnaW4uXG4gICAgICogQGNsYXNzIFRoZSBOYXZpZ2F0aW9uIFBsdWdpblxuICAgICAqIEBwYXJhbSB7T3dsfSBjYXJvdXNlbCAtIFRoZSBPd2wgQ2Fyb3VzZWwuXG4gICAgICovXG4gICAgdmFyIE5hdmlnYXRpb24gPSBmdW5jdGlvbihjYXJvdXNlbCkge1xuICAgICAgICAvKipcbiAgICAgICAgICogUmVmZXJlbmNlIHRvIHRoZSBjb3JlLlxuICAgICAgICAgKiBAcHJvdGVjdGVkXG4gICAgICAgICAqIEB0eXBlIHtPd2x9XG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLl9jb3JlID0gY2Fyb3VzZWw7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEluZGljYXRlcyB3aGV0aGVyIHRoZSBwbHVnaW4gaXMgaW5pdGlhbGl6ZWQgb3Igbm90LlxuICAgICAgICAgKiBAcHJvdGVjdGVkXG4gICAgICAgICAqIEB0eXBlIHtCb29sZWFufVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5faW5pdGlhbGl6ZWQgPSBmYWxzZTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogVGhlIGN1cnJlbnQgcGFnaW5nIGluZGV4ZXMuXG4gICAgICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgICAgICogQHR5cGUge0FycmF5fVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5fcGFnZXMgPSBbXTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogQWxsIERPTSBlbGVtZW50cyBvZiB0aGUgdXNlciBpbnRlcmZhY2UuXG4gICAgICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgICAgICogQHR5cGUge09iamVjdH1cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuX2NvbnRyb2xzID0ge307XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIE1hcmt1cCBmb3IgYW4gaW5kaWNhdG9yLlxuICAgICAgICAgKiBAcHJvdGVjdGVkXG4gICAgICAgICAqIEB0eXBlIHtBcnJheS48U3RyaW5nPn1cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuX3RlbXBsYXRlcyA9IFtdO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUaGUgY2Fyb3VzZWwgZWxlbWVudC5cbiAgICAgICAgICogQHR5cGUge2pRdWVyeX1cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuJGVsZW1lbnQgPSB0aGlzLl9jb3JlLiRlbGVtZW50O1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBPdmVycmlkZGVuIG1ldGhvZHMgb2YgdGhlIGNhcm91c2VsLlxuICAgICAgICAgKiBAcHJvdGVjdGVkXG4gICAgICAgICAqIEB0eXBlIHtPYmplY3R9XG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLl9vdmVycmlkZXMgPSB7XG4gICAgICAgICAgICBuZXh0OiB0aGlzLl9jb3JlLm5leHQsXG4gICAgICAgICAgICBwcmV2OiB0aGlzLl9jb3JlLnByZXYsXG4gICAgICAgICAgICB0bzogdGhpcy5fY29yZS50b1xuICAgICAgICB9O1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBBbGwgZXZlbnQgaGFuZGxlcnMuXG4gICAgICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgICAgICogQHR5cGUge09iamVjdH1cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuX2hhbmRsZXJzID0ge1xuICAgICAgICAgICAgJ3ByZXBhcmVkLm93bC5jYXJvdXNlbCc6ICQucHJveHkoZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgICAgIGlmIChlLm5hbWVzcGFjZSAmJiB0aGlzLl9jb3JlLnNldHRpbmdzLmRvdHNEYXRhKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3RlbXBsYXRlcy5wdXNoKCc8ZGl2IGNsYXNzPVwiJyArIHRoaXMuX2NvcmUuc2V0dGluZ3MuZG90Q2xhc3MgKyAnXCI+JyArXG4gICAgICAgICAgICAgICAgICAgICAgICAkKGUuY29udGVudCkuZmluZCgnW2RhdGEtZG90XScpLmFkZEJhY2soJ1tkYXRhLWRvdF0nKS5hdHRyKCdkYXRhLWRvdCcpICsgJzwvZGl2PicpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sIHRoaXMpLFxuICAgICAgICAgICAgJ2FkZGVkLm93bC5jYXJvdXNlbCc6ICQucHJveHkoZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgICAgIGlmIChlLm5hbWVzcGFjZSAmJiB0aGlzLl9jb3JlLnNldHRpbmdzLmRvdHNEYXRhKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3RlbXBsYXRlcy5zcGxpY2UoZS5wb3NpdGlvbiwgMCwgdGhpcy5fdGVtcGxhdGVzLnBvcCgpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LCB0aGlzKSxcbiAgICAgICAgICAgICdyZW1vdmUub3dsLmNhcm91c2VsJzogJC5wcm94eShmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICAgICAgaWYgKGUubmFtZXNwYWNlICYmIHRoaXMuX2NvcmUuc2V0dGluZ3MuZG90c0RhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fdGVtcGxhdGVzLnNwbGljZShlLnBvc2l0aW9uLCAxKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LCB0aGlzKSxcbiAgICAgICAgICAgICdjaGFuZ2VkLm93bC5jYXJvdXNlbCc6ICQucHJveHkoZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgICAgIGlmIChlLm5hbWVzcGFjZSAmJiBlLnByb3BlcnR5Lm5hbWUgPT0gJ3Bvc2l0aW9uJykge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmRyYXcoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LCB0aGlzKSxcbiAgICAgICAgICAgICdpbml0aWFsaXplZC5vd2wuY2Fyb3VzZWwnOiAkLnByb3h5KGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgICAgICBpZiAoZS5uYW1lc3BhY2UgJiYgIXRoaXMuX2luaXRpYWxpemVkKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2NvcmUudHJpZ2dlcignaW5pdGlhbGl6ZScsIG51bGwsICduYXZpZ2F0aW9uJyk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaW5pdGlhbGl6ZSgpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnVwZGF0ZSgpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmRyYXcoKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5faW5pdGlhbGl6ZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9jb3JlLnRyaWdnZXIoJ2luaXRpYWxpemVkJywgbnVsbCwgJ25hdmlnYXRpb24nKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LCB0aGlzKSxcbiAgICAgICAgICAgICdyZWZyZXNoZWQub3dsLmNhcm91c2VsJzogJC5wcm94eShmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICAgICAgaWYgKGUubmFtZXNwYWNlICYmIHRoaXMuX2luaXRpYWxpemVkKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2NvcmUudHJpZ2dlcigncmVmcmVzaCcsIG51bGwsICduYXZpZ2F0aW9uJyk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMudXBkYXRlKCk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZHJhdygpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9jb3JlLnRyaWdnZXIoJ3JlZnJlc2hlZCcsIG51bGwsICduYXZpZ2F0aW9uJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSwgdGhpcylcbiAgICAgICAgfTtcblxuICAgICAgICAvLyBzZXQgZGVmYXVsdCBvcHRpb25zXG4gICAgICAgIHRoaXMuX2NvcmUub3B0aW9ucyA9ICQuZXh0ZW5kKHt9LCBOYXZpZ2F0aW9uLkRlZmF1bHRzLCB0aGlzLl9jb3JlLm9wdGlvbnMpO1xuXG4gICAgICAgIC8vIHJlZ2lzdGVyIGV2ZW50IGhhbmRsZXJzXG4gICAgICAgIHRoaXMuJGVsZW1lbnQub24odGhpcy5faGFuZGxlcnMpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBEZWZhdWx0IG9wdGlvbnMuXG4gICAgICogQHB1YmxpY1xuICAgICAqIEB0b2RvIFJlbmFtZSBgc2xpZGVCeWAgdG8gYG5hdkJ5YFxuICAgICAqL1xuICAgIE5hdmlnYXRpb24uRGVmYXVsdHMgPSB7XG4gICAgICAgIG5hdjogZmFsc2UsXG4gICAgICAgIG5hdlRleHQ6IFsgJycsICcnIF0sXG4gICAgICAgIG5hdlNwZWVkOiBmYWxzZSxcbiAgICAgICAgbmF2RWxlbWVudDogJ2RpdicsXG4gICAgICAgIG5hdkNvbnRhaW5lcjogZmFsc2UsXG4gICAgICAgIG5hdkNvbnRhaW5lckNsYXNzOiAnb3dsLW5hdicsXG4gICAgICAgIG5hdkNsYXNzOiBbICdvd2wtcHJldicsICdvd2wtbmV4dCcgXSxcbiAgICAgICAgc2xpZGVCeTogMSxcbiAgICAgICAgZG90Q2xhc3M6ICdvd2wtZG90JyxcbiAgICAgICAgZG90c0NsYXNzOiAnb3dsLWRvdHMnLFxuICAgICAgICBkb3RzOiB0cnVlLFxuICAgICAgICBkb3RzRWFjaDogZmFsc2UsXG4gICAgICAgIGRvdHNEYXRhOiBmYWxzZSxcbiAgICAgICAgZG90c1NwZWVkOiBmYWxzZSxcbiAgICAgICAgZG90c0NvbnRhaW5lcjogZmFsc2VcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogSW5pdGlhbGl6ZXMgdGhlIGxheW91dCBvZiB0aGUgcGx1Z2luIGFuZCBleHRlbmRzIHRoZSBjYXJvdXNlbC5cbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICovXG4gICAgTmF2aWdhdGlvbi5wcm90b3R5cGUuaW5pdGlhbGl6ZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgb3ZlcnJpZGUsXG4gICAgICAgICAgICBzZXR0aW5ncyA9IHRoaXMuX2NvcmUuc2V0dGluZ3M7XG5cbiAgICAgICAgLy8gY3JlYXRlIERPTSBzdHJ1Y3R1cmUgZm9yIHJlbGF0aXZlIG5hdmlnYXRpb25cbiAgICAgICAgdGhpcy5fY29udHJvbHMuJHJlbGF0aXZlID0gKHNldHRpbmdzLm5hdkNvbnRhaW5lciA/ICQoc2V0dGluZ3MubmF2Q29udGFpbmVyKVxuICAgICAgICAgICAgOiAkKCc8ZGl2PicpLmFkZENsYXNzKHNldHRpbmdzLm5hdkNvbnRhaW5lckNsYXNzKS5hcHBlbmRUbyh0aGlzLiRlbGVtZW50KSkuYWRkQ2xhc3MoJ2Rpc2FibGVkJyk7XG5cbiAgICAgICAgdGhpcy5fY29udHJvbHMuJHByZXZpb3VzID0gJCgnPCcgKyBzZXR0aW5ncy5uYXZFbGVtZW50ICsgJz4nKVxuICAgICAgICAgICAgLmFkZENsYXNzKHNldHRpbmdzLm5hdkNsYXNzWzBdKVxuICAgICAgICAgICAgLmh0bWwoc2V0dGluZ3MubmF2VGV4dFswXSlcbiAgICAgICAgICAgIC5wcmVwZW5kVG8odGhpcy5fY29udHJvbHMuJHJlbGF0aXZlKVxuICAgICAgICAgICAgLm9uKCdjbGljaycsICQucHJveHkoZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgICAgIHRoaXMucHJldihzZXR0aW5ncy5uYXZTcGVlZCk7XG4gICAgICAgICAgICB9LCB0aGlzKSk7XG4gICAgICAgIHRoaXMuX2NvbnRyb2xzLiRuZXh0ID0gJCgnPCcgKyBzZXR0aW5ncy5uYXZFbGVtZW50ICsgJz4nKVxuICAgICAgICAgICAgLmFkZENsYXNzKHNldHRpbmdzLm5hdkNsYXNzWzFdKVxuICAgICAgICAgICAgLmh0bWwoc2V0dGluZ3MubmF2VGV4dFsxXSlcbiAgICAgICAgICAgIC5hcHBlbmRUbyh0aGlzLl9jb250cm9scy4kcmVsYXRpdmUpXG4gICAgICAgICAgICAub24oJ2NsaWNrJywgJC5wcm94eShmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5uZXh0KHNldHRpbmdzLm5hdlNwZWVkKTtcbiAgICAgICAgICAgIH0sIHRoaXMpKTtcblxuICAgICAgICAvLyBjcmVhdGUgRE9NIHN0cnVjdHVyZSBmb3IgYWJzb2x1dGUgbmF2aWdhdGlvblxuICAgICAgICBpZiAoIXNldHRpbmdzLmRvdHNEYXRhKSB7XG4gICAgICAgICAgICB0aGlzLl90ZW1wbGF0ZXMgPSBbICQoJzxkaXY+JylcbiAgICAgICAgICAgICAgICAuYWRkQ2xhc3Moc2V0dGluZ3MuZG90Q2xhc3MpXG4gICAgICAgICAgICAgICAgLmFwcGVuZCgkKCc8c3Bhbj4nKSlcbiAgICAgICAgICAgICAgICAucHJvcCgnb3V0ZXJIVE1MJykgXTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuX2NvbnRyb2xzLiRhYnNvbHV0ZSA9IChzZXR0aW5ncy5kb3RzQ29udGFpbmVyID8gJChzZXR0aW5ncy5kb3RzQ29udGFpbmVyKVxuICAgICAgICAgICAgOiAkKCc8ZGl2PicpLmFkZENsYXNzKHNldHRpbmdzLmRvdHNDbGFzcykuYXBwZW5kVG8odGhpcy4kZWxlbWVudCkpLmFkZENsYXNzKCdkaXNhYmxlZCcpO1xuXG4gICAgICAgIHRoaXMuX2NvbnRyb2xzLiRhYnNvbHV0ZS5vbignY2xpY2snLCAnZGl2JywgJC5wcm94eShmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICB2YXIgaW5kZXggPSAkKGUudGFyZ2V0KS5wYXJlbnQoKS5pcyh0aGlzLl9jb250cm9scy4kYWJzb2x1dGUpXG4gICAgICAgICAgICAgICAgPyAkKGUudGFyZ2V0KS5pbmRleCgpIDogJChlLnRhcmdldCkucGFyZW50KCkuaW5kZXgoKTtcblxuICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gICAgICAgICAgICB0aGlzLnRvKGluZGV4LCBzZXR0aW5ncy5kb3RzU3BlZWQpO1xuICAgICAgICB9LCB0aGlzKSk7XG5cbiAgICAgICAgLy8gb3ZlcnJpZGUgcHVibGljIG1ldGhvZHMgb2YgdGhlIGNhcm91c2VsXG4gICAgICAgIGZvciAob3ZlcnJpZGUgaW4gdGhpcy5fb3ZlcnJpZGVzKSB7XG4gICAgICAgICAgICB0aGlzLl9jb3JlW292ZXJyaWRlXSA9ICQucHJveHkodGhpc1tvdmVycmlkZV0sIHRoaXMpO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIERlc3Ryb3lzIHRoZSBwbHVnaW4uXG4gICAgICogQHByb3RlY3RlZFxuICAgICAqL1xuICAgIE5hdmlnYXRpb24ucHJvdG90eXBlLmRlc3Ryb3kgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIGhhbmRsZXIsIGNvbnRyb2wsIHByb3BlcnR5LCBvdmVycmlkZTtcblxuICAgICAgICBmb3IgKGhhbmRsZXIgaW4gdGhpcy5faGFuZGxlcnMpIHtcbiAgICAgICAgICAgIHRoaXMuJGVsZW1lbnQub2ZmKGhhbmRsZXIsIHRoaXMuX2hhbmRsZXJzW2hhbmRsZXJdKTtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKGNvbnRyb2wgaW4gdGhpcy5fY29udHJvbHMpIHtcbiAgICAgICAgICAgIHRoaXMuX2NvbnRyb2xzW2NvbnRyb2xdLnJlbW92ZSgpO1xuICAgICAgICB9XG4gICAgICAgIGZvciAob3ZlcnJpZGUgaW4gdGhpcy5vdmVyaWRlcykge1xuICAgICAgICAgICAgdGhpcy5fY29yZVtvdmVycmlkZV0gPSB0aGlzLl9vdmVycmlkZXNbb3ZlcnJpZGVdO1xuICAgICAgICB9XG4gICAgICAgIGZvciAocHJvcGVydHkgaW4gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModGhpcykpIHtcbiAgICAgICAgICAgIHR5cGVvZiB0aGlzW3Byb3BlcnR5XSAhPSAnZnVuY3Rpb24nICYmICh0aGlzW3Byb3BlcnR5XSA9IG51bGwpO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFVwZGF0ZXMgdGhlIGludGVybmFsIHN0YXRlLlxuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKi9cbiAgICBOYXZpZ2F0aW9uLnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIGksIGosIGssXG4gICAgICAgICAgICBsb3dlciA9IHRoaXMuX2NvcmUuY2xvbmVzKCkubGVuZ3RoIC8gMixcbiAgICAgICAgICAgIHVwcGVyID0gbG93ZXIgKyB0aGlzLl9jb3JlLml0ZW1zKCkubGVuZ3RoLFxuICAgICAgICAgICAgbWF4aW11bSA9IHRoaXMuX2NvcmUubWF4aW11bSh0cnVlKSxcbiAgICAgICAgICAgIHNldHRpbmdzID0gdGhpcy5fY29yZS5zZXR0aW5ncyxcbiAgICAgICAgICAgIHNpemUgPSBzZXR0aW5ncy5jZW50ZXIgfHwgc2V0dGluZ3MuYXV0b1dpZHRoIHx8IHNldHRpbmdzLmRvdHNEYXRhXG4gICAgICAgICAgICAgICAgPyAxIDogc2V0dGluZ3MuZG90c0VhY2ggfHwgc2V0dGluZ3MuaXRlbXM7XG5cbiAgICAgICAgaWYgKHNldHRpbmdzLnNsaWRlQnkgIT09ICdwYWdlJykge1xuICAgICAgICAgICAgc2V0dGluZ3Muc2xpZGVCeSA9IE1hdGgubWluKHNldHRpbmdzLnNsaWRlQnksIHNldHRpbmdzLml0ZW1zKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChzZXR0aW5ncy5kb3RzIHx8IHNldHRpbmdzLnNsaWRlQnkgPT0gJ3BhZ2UnKSB7XG4gICAgICAgICAgICB0aGlzLl9wYWdlcyA9IFtdO1xuXG4gICAgICAgICAgICBmb3IgKGkgPSBsb3dlciwgaiA9IDAsIGsgPSAwOyBpIDwgdXBwZXI7IGkrKykge1xuICAgICAgICAgICAgICAgIGlmIChqID49IHNpemUgfHwgaiA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9wYWdlcy5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXJ0OiBNYXRoLm1pbihtYXhpbXVtLCBpIC0gbG93ZXIpLFxuICAgICAgICAgICAgICAgICAgICAgICAgZW5kOiBpIC0gbG93ZXIgKyBzaXplIC0gMVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKE1hdGgubWluKG1heGltdW0sIGkgLSBsb3dlcikgPT09IG1heGltdW0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGogPSAwLCArK2s7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGogKz0gdGhpcy5fY29yZS5tZXJnZXJzKHRoaXMuX2NvcmUucmVsYXRpdmUoaSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIERyYXdzIHRoZSB1c2VyIGludGVyZmFjZS5cbiAgICAgKiBAdG9kbyBUaGUgb3B0aW9uIGBkb3RzRGF0YWAgd29udCB3b3JrLlxuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKi9cbiAgICBOYXZpZ2F0aW9uLnByb3RvdHlwZS5kcmF3ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBkaWZmZXJlbmNlLFxuICAgICAgICAgICAgc2V0dGluZ3MgPSB0aGlzLl9jb3JlLnNldHRpbmdzLFxuICAgICAgICAgICAgZGlzYWJsZWQgPSB0aGlzLl9jb3JlLml0ZW1zKCkubGVuZ3RoIDw9IHNldHRpbmdzLml0ZW1zLFxuICAgICAgICAgICAgaW5kZXggPSB0aGlzLl9jb3JlLnJlbGF0aXZlKHRoaXMuX2NvcmUuY3VycmVudCgpKSxcbiAgICAgICAgICAgIGxvb3AgPSBzZXR0aW5ncy5sb29wIHx8IHNldHRpbmdzLnJld2luZDtcblxuICAgICAgICB0aGlzLl9jb250cm9scy4kcmVsYXRpdmUudG9nZ2xlQ2xhc3MoJ2Rpc2FibGVkJywgIXNldHRpbmdzLm5hdiB8fCBkaXNhYmxlZCk7XG5cbiAgICAgICAgaWYgKHNldHRpbmdzLm5hdikge1xuICAgICAgICAgICAgdGhpcy5fY29udHJvbHMuJHByZXZpb3VzLnRvZ2dsZUNsYXNzKCdkaXNhYmxlZCcsICFsb29wICYmIGluZGV4IDw9IHRoaXMuX2NvcmUubWluaW11bSh0cnVlKSk7XG4gICAgICAgICAgICB0aGlzLl9jb250cm9scy4kbmV4dC50b2dnbGVDbGFzcygnZGlzYWJsZWQnLCAhbG9vcCAmJiBpbmRleCA+PSB0aGlzLl9jb3JlLm1heGltdW0odHJ1ZSkpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5fY29udHJvbHMuJGFic29sdXRlLnRvZ2dsZUNsYXNzKCdkaXNhYmxlZCcsICFzZXR0aW5ncy5kb3RzIHx8IGRpc2FibGVkKTtcblxuICAgICAgICBpZiAoc2V0dGluZ3MuZG90cykge1xuICAgICAgICAgICAgZGlmZmVyZW5jZSA9IHRoaXMuX3BhZ2VzLmxlbmd0aCAtIHRoaXMuX2NvbnRyb2xzLiRhYnNvbHV0ZS5jaGlsZHJlbigpLmxlbmd0aDtcblxuICAgICAgICAgICAgaWYgKHNldHRpbmdzLmRvdHNEYXRhICYmIGRpZmZlcmVuY2UgIT09IDApIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9jb250cm9scy4kYWJzb2x1dGUuaHRtbCh0aGlzLl90ZW1wbGF0ZXMuam9pbignJykpO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChkaWZmZXJlbmNlID4gMCkge1xuICAgICAgICAgICAgICAgIHRoaXMuX2NvbnRyb2xzLiRhYnNvbHV0ZS5hcHBlbmQobmV3IEFycmF5KGRpZmZlcmVuY2UgKyAxKS5qb2luKHRoaXMuX3RlbXBsYXRlc1swXSkpO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChkaWZmZXJlbmNlIDwgMCkge1xuICAgICAgICAgICAgICAgIHRoaXMuX2NvbnRyb2xzLiRhYnNvbHV0ZS5jaGlsZHJlbigpLnNsaWNlKGRpZmZlcmVuY2UpLnJlbW92ZSgpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aGlzLl9jb250cm9scy4kYWJzb2x1dGUuZmluZCgnLmFjdGl2ZScpLnJlbW92ZUNsYXNzKCdhY3RpdmUnKTtcbiAgICAgICAgICAgIHRoaXMuX2NvbnRyb2xzLiRhYnNvbHV0ZS5jaGlsZHJlbigpLmVxKCQuaW5BcnJheSh0aGlzLmN1cnJlbnQoKSwgdGhpcy5fcGFnZXMpKS5hZGRDbGFzcygnYWN0aXZlJyk7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogRXh0ZW5kcyBldmVudCBkYXRhLlxuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKiBAcGFyYW0ge0V2ZW50fSBldmVudCAtIFRoZSBldmVudCBvYmplY3Qgd2hpY2ggZ2V0cyB0aHJvd24uXG4gICAgICovXG4gICAgTmF2aWdhdGlvbi5wcm90b3R5cGUub25UcmlnZ2VyID0gZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAgICAgdmFyIHNldHRpbmdzID0gdGhpcy5fY29yZS5zZXR0aW5ncztcblxuICAgICAgICBldmVudC5wYWdlID0ge1xuICAgICAgICAgICAgaW5kZXg6ICQuaW5BcnJheSh0aGlzLmN1cnJlbnQoKSwgdGhpcy5fcGFnZXMpLFxuICAgICAgICAgICAgY291bnQ6IHRoaXMuX3BhZ2VzLmxlbmd0aCxcbiAgICAgICAgICAgIHNpemU6IHNldHRpbmdzICYmIChzZXR0aW5ncy5jZW50ZXIgfHwgc2V0dGluZ3MuYXV0b1dpZHRoIHx8IHNldHRpbmdzLmRvdHNEYXRhXG4gICAgICAgICAgICAgICAgPyAxIDogc2V0dGluZ3MuZG90c0VhY2ggfHwgc2V0dGluZ3MuaXRlbXMpXG4gICAgICAgIH07XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIGN1cnJlbnQgcGFnZSBwb3NpdGlvbiBvZiB0aGUgY2Fyb3VzZWwuXG4gICAgICogQHByb3RlY3RlZFxuICAgICAqIEByZXR1cm5zIHtOdW1iZXJ9XG4gICAgICovXG4gICAgTmF2aWdhdGlvbi5wcm90b3R5cGUuY3VycmVudCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgY3VycmVudCA9IHRoaXMuX2NvcmUucmVsYXRpdmUodGhpcy5fY29yZS5jdXJyZW50KCkpO1xuICAgICAgICByZXR1cm4gJC5ncmVwKHRoaXMuX3BhZ2VzLCAkLnByb3h5KGZ1bmN0aW9uKHBhZ2UsIGluZGV4KSB7XG4gICAgICAgICAgICByZXR1cm4gcGFnZS5zdGFydCA8PSBjdXJyZW50ICYmIHBhZ2UuZW5kID49IGN1cnJlbnQ7XG4gICAgICAgIH0sIHRoaXMpKS5wb3AoKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgY3VycmVudCBzdWNjZXNvci9wcmVkZWNlc3NvciBwb3NpdGlvbi5cbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICogQHJldHVybnMge051bWJlcn1cbiAgICAgKi9cbiAgICBOYXZpZ2F0aW9uLnByb3RvdHlwZS5nZXRQb3NpdGlvbiA9IGZ1bmN0aW9uKHN1Y2Nlc3Nvcikge1xuICAgICAgICB2YXIgcG9zaXRpb24sIGxlbmd0aCxcbiAgICAgICAgICAgIHNldHRpbmdzID0gdGhpcy5fY29yZS5zZXR0aW5ncztcblxuICAgICAgICBpZiAoc2V0dGluZ3Muc2xpZGVCeSA9PSAncGFnZScpIHtcbiAgICAgICAgICAgIHBvc2l0aW9uID0gJC5pbkFycmF5KHRoaXMuY3VycmVudCgpLCB0aGlzLl9wYWdlcyk7XG4gICAgICAgICAgICBsZW5ndGggPSB0aGlzLl9wYWdlcy5sZW5ndGg7XG4gICAgICAgICAgICBzdWNjZXNzb3IgPyArK3Bvc2l0aW9uIDogLS1wb3NpdGlvbjtcbiAgICAgICAgICAgIHBvc2l0aW9uID0gdGhpcy5fcGFnZXNbKChwb3NpdGlvbiAlIGxlbmd0aCkgKyBsZW5ndGgpICUgbGVuZ3RoXS5zdGFydDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHBvc2l0aW9uID0gdGhpcy5fY29yZS5yZWxhdGl2ZSh0aGlzLl9jb3JlLmN1cnJlbnQoKSk7XG4gICAgICAgICAgICBsZW5ndGggPSB0aGlzLl9jb3JlLml0ZW1zKCkubGVuZ3RoO1xuICAgICAgICAgICAgc3VjY2Vzc29yID8gcG9zaXRpb24gKz0gc2V0dGluZ3Muc2xpZGVCeSA6IHBvc2l0aW9uIC09IHNldHRpbmdzLnNsaWRlQnk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcG9zaXRpb247XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFNsaWRlcyB0byB0aGUgbmV4dCBpdGVtIG9yIHBhZ2UuXG4gICAgICogQHB1YmxpY1xuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbc3BlZWQ9ZmFsc2VdIC0gVGhlIHRpbWUgaW4gbWlsbGlzZWNvbmRzIGZvciB0aGUgdHJhbnNpdGlvbi5cbiAgICAgKi9cbiAgICBOYXZpZ2F0aW9uLnByb3RvdHlwZS5uZXh0ID0gZnVuY3Rpb24oc3BlZWQpIHtcbiAgICAgICAgJC5wcm94eSh0aGlzLl9vdmVycmlkZXMudG8sIHRoaXMuX2NvcmUpKHRoaXMuZ2V0UG9zaXRpb24odHJ1ZSksIHNwZWVkKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogU2xpZGVzIHRvIHRoZSBwcmV2aW91cyBpdGVtIG9yIHBhZ2UuXG4gICAgICogQHB1YmxpY1xuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbc3BlZWQ9ZmFsc2VdIC0gVGhlIHRpbWUgaW4gbWlsbGlzZWNvbmRzIGZvciB0aGUgdHJhbnNpdGlvbi5cbiAgICAgKi9cbiAgICBOYXZpZ2F0aW9uLnByb3RvdHlwZS5wcmV2ID0gZnVuY3Rpb24oc3BlZWQpIHtcbiAgICAgICAgJC5wcm94eSh0aGlzLl9vdmVycmlkZXMudG8sIHRoaXMuX2NvcmUpKHRoaXMuZ2V0UG9zaXRpb24oZmFsc2UpLCBzcGVlZCk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFNsaWRlcyB0byB0aGUgc3BlY2lmaWVkIGl0ZW0gb3IgcGFnZS5cbiAgICAgKiBAcHVibGljXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IHBvc2l0aW9uIC0gVGhlIHBvc2l0aW9uIG9mIHRoZSBpdGVtIG9yIHBhZ2UuXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtzcGVlZF0gLSBUaGUgdGltZSBpbiBtaWxsaXNlY29uZHMgZm9yIHRoZSB0cmFuc2l0aW9uLlxuICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gW3N0YW5kYXJkPWZhbHNlXSAtIFdoZXRoZXIgdG8gdXNlIHRoZSBzdGFuZGFyZCBiZWhhdmlvdXIgb3Igbm90LlxuICAgICAqL1xuICAgIE5hdmlnYXRpb24ucHJvdG90eXBlLnRvID0gZnVuY3Rpb24ocG9zaXRpb24sIHNwZWVkLCBzdGFuZGFyZCkge1xuICAgICAgICB2YXIgbGVuZ3RoO1xuXG4gICAgICAgIGlmICghc3RhbmRhcmQgJiYgdGhpcy5fcGFnZXMubGVuZ3RoKSB7XG4gICAgICAgICAgICBsZW5ndGggPSB0aGlzLl9wYWdlcy5sZW5ndGg7XG4gICAgICAgICAgICAkLnByb3h5KHRoaXMuX292ZXJyaWRlcy50bywgdGhpcy5fY29yZSkodGhpcy5fcGFnZXNbKChwb3NpdGlvbiAlIGxlbmd0aCkgKyBsZW5ndGgpICUgbGVuZ3RoXS5zdGFydCwgc3BlZWQpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgJC5wcm94eSh0aGlzLl9vdmVycmlkZXMudG8sIHRoaXMuX2NvcmUpKHBvc2l0aW9uLCBzcGVlZCk7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgJC5mbi5vd2xDYXJvdXNlbC5Db25zdHJ1Y3Rvci5QbHVnaW5zLk5hdmlnYXRpb24gPSBOYXZpZ2F0aW9uO1xuXG59KSh3aW5kb3cuWmVwdG8gfHwgd2luZG93LmpRdWVyeSwgd2luZG93LCBkb2N1bWVudCk7XG5cbi8qKlxuICogSGFzaCBQbHVnaW5cbiAqIEB2ZXJzaW9uIDIuMS4wXG4gKiBAYXV0aG9yIEFydHVzIEtvbGFub3dza2lcbiAqIEBhdXRob3IgRGF2aWQgRGV1dHNjaFxuICogQGxpY2Vuc2UgVGhlIE1JVCBMaWNlbnNlIChNSVQpXG4gKi9cbjsoZnVuY3Rpb24oJCwgd2luZG93LCBkb2N1bWVudCwgdW5kZWZpbmVkKSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyB0aGUgaGFzaCBwbHVnaW4uXG4gICAgICogQGNsYXNzIFRoZSBIYXNoIFBsdWdpblxuICAgICAqIEBwYXJhbSB7T3dsfSBjYXJvdXNlbCAtIFRoZSBPd2wgQ2Fyb3VzZWxcbiAgICAgKi9cbiAgICB2YXIgSGFzaCA9IGZ1bmN0aW9uKGNhcm91c2VsKSB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBSZWZlcmVuY2UgdG8gdGhlIGNvcmUuXG4gICAgICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgICAgICogQHR5cGUge093bH1cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuX2NvcmUgPSBjYXJvdXNlbDtcblxuICAgICAgICAvKipcbiAgICAgICAgICogSGFzaCBtYWluLXBhZ2UtcGFnZSBmb3IgdGhlIGl0ZW1zLlxuICAgICAgICAgKiBAcHJvdGVjdGVkXG4gICAgICAgICAqIEB0eXBlIHtPYmplY3R9XG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLl9oYXNoZXMgPSB7fTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogVGhlIGNhcm91c2VsIGVsZW1lbnQuXG4gICAgICAgICAqIEB0eXBlIHtqUXVlcnl9XG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLiRlbGVtZW50ID0gdGhpcy5fY29yZS4kZWxlbWVudDtcblxuICAgICAgICAvKipcbiAgICAgICAgICogQWxsIGV2ZW50IGhhbmRsZXJzLlxuICAgICAgICAgKiBAcHJvdGVjdGVkXG4gICAgICAgICAqIEB0eXBlIHtPYmplY3R9XG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLl9oYW5kbGVycyA9IHtcbiAgICAgICAgICAgICdpbml0aWFsaXplZC5vd2wuY2Fyb3VzZWwnOiAkLnByb3h5KGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgICAgICBpZiAoZS5uYW1lc3BhY2UgJiYgdGhpcy5fY29yZS5zZXR0aW5ncy5zdGFydFBvc2l0aW9uID09PSAnVVJMSGFzaCcpIHtcbiAgICAgICAgICAgICAgICAgICAgJCh3aW5kb3cpLnRyaWdnZXIoJ2hhc2hjaGFuZ2Uub3dsLm5hdmlnYXRpb24nKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LCB0aGlzKSxcbiAgICAgICAgICAgICdwcmVwYXJlZC5vd2wuY2Fyb3VzZWwnOiAkLnByb3h5KGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgICAgICBpZiAoZS5uYW1lc3BhY2UpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGhhc2ggPSAkKGUuY29udGVudCkuZmluZCgnW2RhdGEtaGFzaF0nKS5hZGRCYWNrKCdbZGF0YS1oYXNoXScpLmF0dHIoJ2RhdGEtaGFzaCcpO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmICghaGFzaCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgdGhpcy5faGFzaGVzW2hhc2hdID0gZS5jb250ZW50O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sIHRoaXMpLFxuICAgICAgICAgICAgJ2NoYW5nZWQub3dsLmNhcm91c2VsJzogJC5wcm94eShmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICAgICAgaWYgKGUubmFtZXNwYWNlICYmIGUucHJvcGVydHkubmFtZSA9PT0gJ3Bvc2l0aW9uJykge1xuICAgICAgICAgICAgICAgICAgICB2YXIgY3VycmVudCA9IHRoaXMuX2NvcmUuaXRlbXModGhpcy5fY29yZS5yZWxhdGl2ZSh0aGlzLl9jb3JlLmN1cnJlbnQoKSkpLFxuICAgICAgICAgICAgICAgICAgICAgICAgaGFzaCA9ICQubWFwKHRoaXMuX2hhc2hlcywgZnVuY3Rpb24oaXRlbSwgaGFzaCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBpdGVtID09PSBjdXJyZW50ID8gaGFzaCA6IG51bGw7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KS5qb2luKCk7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKCFoYXNoIHx8IHdpbmRvdy5sb2NhdGlvbi5oYXNoLnNsaWNlKDEpID09PSBoYXNoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICB3aW5kb3cubG9jYXRpb24uaGFzaCA9IGhhc2g7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSwgdGhpcylcbiAgICAgICAgfTtcblxuICAgICAgICAvLyBzZXQgZGVmYXVsdCBvcHRpb25zXG4gICAgICAgIHRoaXMuX2NvcmUub3B0aW9ucyA9ICQuZXh0ZW5kKHt9LCBIYXNoLkRlZmF1bHRzLCB0aGlzLl9jb3JlLm9wdGlvbnMpO1xuXG4gICAgICAgIC8vIHJlZ2lzdGVyIHRoZSBldmVudCBoYW5kbGVyc1xuICAgICAgICB0aGlzLiRlbGVtZW50Lm9uKHRoaXMuX2hhbmRsZXJzKTtcblxuICAgICAgICAvLyByZWdpc3RlciBldmVudCBsaXN0ZW5lciBmb3IgaGFzaCBuYXZpZ2F0aW9uXG4gICAgICAgICQod2luZG93KS5vbignaGFzaGNoYW5nZS5vd2wubmF2aWdhdGlvbicsICQucHJveHkoZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgdmFyIGhhc2ggPSB3aW5kb3cubG9jYXRpb24uaGFzaC5zdWJzdHJpbmcoMSksXG4gICAgICAgICAgICAgICAgaXRlbXMgPSB0aGlzLl9jb3JlLiRzdGFnZS5jaGlsZHJlbigpLFxuICAgICAgICAgICAgICAgIHBvc2l0aW9uID0gdGhpcy5faGFzaGVzW2hhc2hdICYmIGl0ZW1zLmluZGV4KHRoaXMuX2hhc2hlc1toYXNoXSk7XG5cbiAgICAgICAgICAgIGlmIChwb3NpdGlvbiA9PT0gdW5kZWZpbmVkIHx8IHBvc2l0aW9uID09PSB0aGlzLl9jb3JlLmN1cnJlbnQoKSkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhpcy5fY29yZS50byh0aGlzLl9jb3JlLnJlbGF0aXZlKHBvc2l0aW9uKSwgZmFsc2UsIHRydWUpO1xuICAgICAgICB9LCB0aGlzKSk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIERlZmF1bHQgb3B0aW9ucy5cbiAgICAgKiBAcHVibGljXG4gICAgICovXG4gICAgSGFzaC5EZWZhdWx0cyA9IHtcbiAgICAgICAgVVJMaGFzaExpc3RlbmVyOiBmYWxzZVxuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBEZXN0cm95cyB0aGUgcGx1Z2luLlxuICAgICAqIEBwdWJsaWNcbiAgICAgKi9cbiAgICBIYXNoLnByb3RvdHlwZS5kZXN0cm95ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBoYW5kbGVyLCBwcm9wZXJ0eTtcblxuICAgICAgICAkKHdpbmRvdykub2ZmKCdoYXNoY2hhbmdlLm93bC5uYXZpZ2F0aW9uJyk7XG5cbiAgICAgICAgZm9yIChoYW5kbGVyIGluIHRoaXMuX2hhbmRsZXJzKSB7XG4gICAgICAgICAgICB0aGlzLl9jb3JlLiRlbGVtZW50Lm9mZihoYW5kbGVyLCB0aGlzLl9oYW5kbGVyc1toYW5kbGVyXSk7XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChwcm9wZXJ0eSBpbiBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh0aGlzKSkge1xuICAgICAgICAgICAgdHlwZW9mIHRoaXNbcHJvcGVydHldICE9ICdmdW5jdGlvbicgJiYgKHRoaXNbcHJvcGVydHldID0gbnVsbCk7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgJC5mbi5vd2xDYXJvdXNlbC5Db25zdHJ1Y3Rvci5QbHVnaW5zLkhhc2ggPSBIYXNoO1xuXG59KSh3aW5kb3cuWmVwdG8gfHwgd2luZG93LmpRdWVyeSwgd2luZG93LCBkb2N1bWVudCk7XG5cbi8qKlxuICogU3VwcG9ydCBQbHVnaW5cbiAqXG4gKiBAdmVyc2lvbiAyLjEuMFxuICogQGF1dGhvciBWaXZpZCBQbGFuZXQgU29mdHdhcmUgR21iSFxuICogQGF1dGhvciBBcnR1cyBLb2xhbm93c2tpXG4gKiBAYXV0aG9yIERhdmlkIERldXRzY2hcbiAqIEBsaWNlbnNlIFRoZSBNSVQgTGljZW5zZSAoTUlUKVxuICovXG47KGZ1bmN0aW9uKCQsIHdpbmRvdywgZG9jdW1lbnQsIHVuZGVmaW5lZCkge1xuXG4gICAgdmFyIHN0eWxlID0gJCgnPHN1cHBvcnQ+JykuZ2V0KDApLnN0eWxlLFxuICAgICAgICBwcmVmaXhlcyA9ICdXZWJraXQgTW96IE8gbXMnLnNwbGl0KCcgJyksXG4gICAgICAgIGV2ZW50cyA9IHtcbiAgICAgICAgICAgIHRyYW5zaXRpb246IHtcbiAgICAgICAgICAgICAgICBlbmQ6IHtcbiAgICAgICAgICAgICAgICAgICAgV2Via2l0VHJhbnNpdGlvbjogJ3dlYmtpdFRyYW5zaXRpb25FbmQnLFxuICAgICAgICAgICAgICAgICAgICBNb3pUcmFuc2l0aW9uOiAndHJhbnNpdGlvbmVuZCcsXG4gICAgICAgICAgICAgICAgICAgIE9UcmFuc2l0aW9uOiAnb1RyYW5zaXRpb25FbmQnLFxuICAgICAgICAgICAgICAgICAgICB0cmFuc2l0aW9uOiAndHJhbnNpdGlvbmVuZCdcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgYW5pbWF0aW9uOiB7XG4gICAgICAgICAgICAgICAgZW5kOiB7XG4gICAgICAgICAgICAgICAgICAgIFdlYmtpdEFuaW1hdGlvbjogJ3dlYmtpdEFuaW1hdGlvbkVuZCcsXG4gICAgICAgICAgICAgICAgICAgIE1vekFuaW1hdGlvbjogJ2FuaW1hdGlvbmVuZCcsXG4gICAgICAgICAgICAgICAgICAgIE9BbmltYXRpb246ICdvQW5pbWF0aW9uRW5kJyxcbiAgICAgICAgICAgICAgICAgICAgYW5pbWF0aW9uOiAnYW5pbWF0aW9uZW5kJ1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgdGVzdHMgPSB7XG4gICAgICAgICAgICBjc3N0cmFuc2Zvcm1zOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gISF0ZXN0KCd0cmFuc2Zvcm0nKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBjc3N0cmFuc2Zvcm1zM2Q6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAhIXRlc3QoJ3BlcnNwZWN0aXZlJyk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgY3NzdHJhbnNpdGlvbnM6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAhIXRlc3QoJ3RyYW5zaXRpb24nKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBjc3NhbmltYXRpb25zOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gISF0ZXN0KCdhbmltYXRpb24nKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgIGZ1bmN0aW9uIHRlc3QocHJvcGVydHksIHByZWZpeGVkKSB7XG4gICAgICAgIHZhciByZXN1bHQgPSBmYWxzZSxcbiAgICAgICAgICAgIHVwcGVyID0gcHJvcGVydHkuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyBwcm9wZXJ0eS5zbGljZSgxKTtcblxuICAgICAgICAkLmVhY2goKHByb3BlcnR5ICsgJyAnICsgcHJlZml4ZXMuam9pbih1cHBlciArICcgJykgKyB1cHBlcikuc3BsaXQoJyAnKSwgZnVuY3Rpb24oaSwgcHJvcGVydHkpIHtcbiAgICAgICAgICAgIGlmIChzdHlsZVtwcm9wZXJ0eV0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHJlc3VsdCA9IHByZWZpeGVkID8gcHJvcGVydHkgOiB0cnVlO1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBwcmVmaXhlZChwcm9wZXJ0eSkge1xuICAgICAgICByZXR1cm4gdGVzdChwcm9wZXJ0eSwgdHJ1ZSk7XG4gICAgfVxuXG4gICAgaWYgKHRlc3RzLmNzc3RyYW5zaXRpb25zKCkpIHtcbiAgICAgICAgLyoganNoaW50IC1XMDUzICovXG4gICAgICAgICQuc3VwcG9ydC50cmFuc2l0aW9uID0gbmV3IFN0cmluZyhwcmVmaXhlZCgndHJhbnNpdGlvbicpKVxuICAgICAgICAkLnN1cHBvcnQudHJhbnNpdGlvbi5lbmQgPSBldmVudHMudHJhbnNpdGlvbi5lbmRbICQuc3VwcG9ydC50cmFuc2l0aW9uIF07XG4gICAgfVxuXG4gICAgaWYgKHRlc3RzLmNzc2FuaW1hdGlvbnMoKSkge1xuICAgICAgICAvKiBqc2hpbnQgLVcwNTMgKi9cbiAgICAgICAgJC5zdXBwb3J0LmFuaW1hdGlvbiA9IG5ldyBTdHJpbmcocHJlZml4ZWQoJ2FuaW1hdGlvbicpKVxuICAgICAgICAkLnN1cHBvcnQuYW5pbWF0aW9uLmVuZCA9IGV2ZW50cy5hbmltYXRpb24uZW5kWyAkLnN1cHBvcnQuYW5pbWF0aW9uIF07XG4gICAgfVxuXG4gICAgaWYgKHRlc3RzLmNzc3RyYW5zZm9ybXMoKSkge1xuICAgICAgICAvKiBqc2hpbnQgLVcwNTMgKi9cbiAgICAgICAgJC5zdXBwb3J0LnRyYW5zZm9ybSA9IG5ldyBTdHJpbmcocHJlZml4ZWQoJ3RyYW5zZm9ybScpKTtcbiAgICAgICAgJC5zdXBwb3J0LnRyYW5zZm9ybTNkID0gdGVzdHMuY3NzdHJhbnNmb3JtczNkKCk7XG4gICAgfVxuXG59KSh3aW5kb3cuWmVwdG8gfHwgd2luZG93LmpRdWVyeSwgd2luZG93LCBkb2N1bWVudCk7XG4kKGRvY3VtZW50KS5yZWFkeShmdW5jdGlvbigpIHtcbiAgICAvLyBUZXN0IGZvciBwbGFjZWhvbGRlciBzdXBwb3J0XG4gICAgJC5zdXBwb3J0LnBsYWNlaG9sZGVyID0gKGZ1bmN0aW9uKCl7XG4gICAgICAgIHZhciBpID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaW5wdXQnKTtcbiAgICAgICAgcmV0dXJuICdwbGFjZWhvbGRlcicgaW4gaTtcbiAgICB9KSgpO1xuXG4gICAgLy8gSGlkZSBsYWJlbHMgYnkgZGVmYXVsdCBpZiBwbGFjZWhvbGRlcnMgYXJlIHN1cHBvcnRlZFxuICAgIGlmKCQuc3VwcG9ydC5wbGFjZWhvbGRlcikge1xuICAgICAgICAkKCcuZm9ybS1sYWJlbCcpLmVhY2goZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICQodGhpcykuYWRkQ2xhc3MoJ2pzLWhpZGUtbGFiZWwnKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gQ29kZSBmb3IgYWRkaW5nL3JlbW92aW5nIGNsYXNzZXMgaGVyZVxuICAgICAgICAkKCcuZm9ybS1ncm91cCcpLmZpbmQoJ2lucHV0LCB0ZXh0YXJlYScpLm9uKCdrZXl1cCBibHVyIGZvY3VzJywgZnVuY3Rpb24oZSl7XG5cbiAgICAgICAgICAgIC8vIENhY2hlIG91ciBzZWxlY3RvcnNcbiAgICAgICAgICAgIHZhciAkdGhpcyA9ICQodGhpcyksXG4gICAgICAgICAgICAgICAgJHBhcmVudCA9ICR0aGlzLnBhcmVudCgpLmZpbmQoXCJsYWJlbFwiKTtcblxuICAgICAgICAgICAgaWYgKGUudHlwZSA9PSAna2V5dXAnKSB7XG4gICAgICAgICAgICAgICAgaWYoICR0aGlzLnZhbCgpID09ICcnICkge1xuICAgICAgICAgICAgICAgICAgICAkcGFyZW50LmFkZENsYXNzKCdqcy1oaWRlLWxhYmVsJyk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgJHBhcmVudC5yZW1vdmVDbGFzcygnanMtaGlkZS1sYWJlbCcpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGUudHlwZSA9PSAnYmx1cicpIHtcbiAgICAgICAgICAgICAgICBpZiggJHRoaXMudmFsKCkgPT0gJycgKSB7XG4gICAgICAgICAgICAgICAgICAgICRwYXJlbnQuYWRkQ2xhc3MoJ2pzLWhpZGUtbGFiZWwnKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICRwYXJlbnQucmVtb3ZlQ2xhc3MoJ2pzLWhpZGUtbGFiZWwnKS5hZGRDbGFzcygnanMtdW5oaWdobGlnaHQtbGFiZWwnKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChlLnR5cGUgPT0gJ2ZvY3VzJykge1xuICAgICAgICAgICAgICAgIGlmKCAkdGhpcy52YWwoKSAhPT0gJycgKSB7XG4gICAgICAgICAgICAgICAgICAgICRwYXJlbnQucmVtb3ZlQ2xhc3MoJ2pzLXVuaGlnaGxpZ2h0LWxhYmVsJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG59KTtcblxuLyo9PT09PT09PT09PT09PT09PT09PT1NQVA9PT09PT09PT09PT09PT09PT09PSovXG5cbmZ1bmN0aW9uIG15TWFwKClcbntcbiAgICBteUNlbnRlcj1uZXcgZ29vZ2xlLm1hcHMuTGF0TG5nKDQxLjg3ODExNCwgLTg3LjYyOTc5OCk7XG4gICAgdmFyIG1hcE9wdGlvbnM9IHtcbiAgICAgICAgY2VudGVyOm15Q2VudGVyLFxuICAgICAgICB6b29tOjEyLCBzY3JvbGx3aGVlbDogZmFsc2UsIGRyYWdnYWJsZTogZmFsc2UsXG4gICAgICAgIG1hcFR5cGVJZDpnb29nbGUubWFwcy5NYXBUeXBlSWQuUk9BRE1BUFxuICAgIH07XG4gICAgdmFyIG1hcD1uZXcgZ29vZ2xlLm1hcHMuTWFwKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiZ29vZ2xlTWFwXCIpLG1hcE9wdGlvbnMpO1xuXG4gICAgdmFyIG1hcmtlciA9IG5ldyBnb29nbGUubWFwcy5NYXJrZXIoe1xuICAgICAgICBwb3NpdGlvbjogbXlDZW50ZXIsXG4gICAgfSk7XG4gICAgbWFya2VyLnNldE1hcChtYXApO1xufVxuXG4vKj09PT09PT09PT09PT09PT09PT09PWZvcm09PT09PT09PT0qL1xuJCgnLnRvZ2dsZScpLm9uKCdjbGljaycsIGZ1bmN0aW9uKCkge1xuICAgICQoJy5jb250YWluZXInKS5zdG9wKCkuYWRkQ2xhc3MoJ2FjdGl2ZScpO1xufSk7XG5cbiQoJy5jbG9zZScpLm9uKCdjbGljaycsIGZ1bmN0aW9uKCkge1xuICAgICQoJy5jb250YWluZXInKS5zdG9wKCkucmVtb3ZlQ2xhc3MoJ2FjdGl2ZScpO1xufSk7XG4kKGRvY3VtZW50KS5yZWFkeShmdW5jdGlvbiAoKXtcbiAgICB2YXIgb3dsID0gJCgnLm93bC1jYXJvdXNlbCcpO1xuICAgIG93bC5vd2xDYXJvdXNlbCh7XG4gICAgICAgIGxvb3A6dHJ1ZSxcbiAgICAgICAgbWFyZ2luOjAsXG4gICAgICAgIG5hdlNwZWVkOjUwMCxcbiAgICAgICAgbmF2OnRydWUsXG4gICAgICAgIGl0ZW1zOjFcbiAgICB9KTtcblxuXG5cbn0pO1xuXG5cbihmdW5jdGlvbigpIHtcblxuICAgIHZhciAkJCA9IGZ1bmN0aW9uKHNlbGVjdG9yLCBjb250ZXh0KSB7XG4gICAgICAgIHZhciBjb250ZXh0ID0gY29udGV4dCB8fCBkb2N1bWVudDtcbiAgICAgICAgdmFyIGVsZW1lbnRzID0gY29udGV4dC5xdWVyeVNlbGVjdG9yQWxsKHNlbGVjdG9yKTtcbiAgICAgICAgcmV0dXJuIFtdLnNsaWNlLmNhbGwoZWxlbWVudHMpO1xuICAgIH07XG5cbiAgICBmdW5jdGlvbiBfZm5jU2xpZGVySW5pdCgkc2xpZGVyLCBvcHRpb25zKSB7XG4gICAgICAgIHZhciBwcmVmaXggPSBcIi5mbmMtXCI7XG5cbiAgICAgICAgdmFyICRzbGlkZXIgPSAkc2xpZGVyO1xuICAgICAgICB2YXIgJHNsaWRlc0NvbnQgPSAkc2xpZGVyLnF1ZXJ5U2VsZWN0b3IocHJlZml4ICsgXCJzbGlkZXJfX3NsaWRlc1wiKTtcbiAgICAgICAgdmFyICRzbGlkZXMgPSAkJChwcmVmaXggKyBcInNsaWRlXCIsICRzbGlkZXIpO1xuICAgICAgICB2YXIgJGNvbnRyb2xzID0gJCQocHJlZml4ICsgXCJuYXZfX2NvbnRyb2xcIiwgJHNsaWRlcik7XG4gICAgICAgIHZhciAkY29udHJvbHNCZ3MgPSAkJChwcmVmaXggKyBcIm5hdl9fYmdcIiwgJHNsaWRlcik7XG4gICAgICAgIHZhciAkcHJvZ3Jlc3NBUyA9ICQkKHByZWZpeCArIFwibmF2X19jb250cm9sLXByb2dyZXNzXCIsICRzbGlkZXIpO1xuXG4gICAgICAgIHZhciBudW1PZlNsaWRlcyA9ICRzbGlkZXMubGVuZ3RoO1xuICAgICAgICB2YXIgY3VyU2xpZGUgPSAxO1xuICAgICAgICB2YXIgc2xpZGluZyA9IGZhbHNlO1xuICAgICAgICB2YXIgc2xpZGluZ0FUID0gK3BhcnNlRmxvYXQoZ2V0Q29tcHV0ZWRTdHlsZSgkc2xpZGVzQ29udClbXCJ0cmFuc2l0aW9uLWR1cmF0aW9uXCJdKSAqIDEwMDA7XG4gICAgICAgIHZhciBzbGlkaW5nRGVsYXkgPSArcGFyc2VGbG9hdChnZXRDb21wdXRlZFN0eWxlKCRzbGlkZXNDb250KVtcInRyYW5zaXRpb24tZGVsYXlcIl0pICogMTAwMDtcblxuICAgICAgICB2YXIgYXV0b1NsaWRpbmdBY3RpdmUgPSBmYWxzZTtcbiAgICAgICAgdmFyIGF1dG9TbGlkaW5nVE87XG4gICAgICAgIHZhciBhdXRvU2xpZGluZ0RlbGF5ID0gNTAwMDsgLy8gZGVmYXVsdCBhdXRvc2xpZGluZyBkZWxheSB2YWx1ZVxuICAgICAgICB2YXIgYXV0b1NsaWRpbmdCbG9ja2VkID0gZmFsc2U7XG5cbiAgICAgICAgdmFyICRhY3RpdmVTbGlkZTtcbiAgICAgICAgdmFyICRhY3RpdmVDb250cm9sc0JnO1xuICAgICAgICB2YXIgJHByZXZDb250cm9sO1xuXG4gICAgICAgIGZ1bmN0aW9uIHNldElEcygpIHtcbiAgICAgICAgICAgICRzbGlkZXMuZm9yRWFjaChmdW5jdGlvbigkc2xpZGUsIGluZGV4KSB7XG4gICAgICAgICAgICAgICAgJHNsaWRlLmNsYXNzTGlzdC5hZGQoXCJmbmMtc2xpZGUtXCIgKyAoaW5kZXggKyAxKSk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgJGNvbnRyb2xzLmZvckVhY2goZnVuY3Rpb24oJGNvbnRyb2wsIGluZGV4KSB7XG4gICAgICAgICAgICAgICAgJGNvbnRyb2wuc2V0QXR0cmlidXRlKFwiZGF0YS1zbGlkZVwiLCBpbmRleCArIDEpO1xuICAgICAgICAgICAgICAgICRjb250cm9sLmNsYXNzTGlzdC5hZGQoXCJmbmMtbmF2X19jb250cm9sLVwiICsgKGluZGV4ICsgMSkpO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICRjb250cm9sc0Jncy5mb3JFYWNoKGZ1bmN0aW9uKCRiZywgaW5kZXgpIHtcbiAgICAgICAgICAgICAgICAkYmcuY2xhc3NMaXN0LmFkZChcImZuYy1uYXZfX2JnLVwiICsgKGluZGV4ICsgMSkpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH07XG5cbiAgICAgICAgc2V0SURzKCk7XG5cbiAgICAgICAgZnVuY3Rpb24gYWZ0ZXJTbGlkaW5nSGFuZGxlcigpIHtcbiAgICAgICAgICAgICRzbGlkZXIucXVlcnlTZWxlY3RvcihcIi5tLS1wcmV2aW91cy1zbGlkZVwiKS5jbGFzc0xpc3QucmVtb3ZlKFwibS0tYWN0aXZlLXNsaWRlXCIsIFwibS0tcHJldmlvdXMtc2xpZGVcIik7XG4gICAgICAgICAgICAkc2xpZGVyLnF1ZXJ5U2VsZWN0b3IoXCIubS0tcHJldmlvdXMtbmF2LWJnXCIpLmNsYXNzTGlzdC5yZW1vdmUoXCJtLS1hY3RpdmUtbmF2LWJnXCIsIFwibS0tcHJldmlvdXMtbmF2LWJnXCIpO1xuXG4gICAgICAgICAgICAkYWN0aXZlU2xpZGUuY2xhc3NMaXN0LnJlbW92ZShcIm0tLWJlZm9yZS1zbGlkaW5nXCIpO1xuICAgICAgICAgICAgJGFjdGl2ZUNvbnRyb2xzQmcuY2xhc3NMaXN0LnJlbW92ZShcIm0tLW5hdi1iZy1iZWZvcmVcIik7XG4gICAgICAgICAgICAkcHJldkNvbnRyb2wuY2xhc3NMaXN0LnJlbW92ZShcIm0tLXByZXYtY29udHJvbFwiKTtcbiAgICAgICAgICAgICRwcmV2Q29udHJvbC5jbGFzc0xpc3QuYWRkKFwibS0tcmVzZXQtcHJvZ3Jlc3NcIik7XG4gICAgICAgICAgICB2YXIgdHJpZ2dlckxheW91dCA9ICRwcmV2Q29udHJvbC5vZmZzZXRUb3A7XG4gICAgICAgICAgICAkcHJldkNvbnRyb2wuY2xhc3NMaXN0LnJlbW92ZShcIm0tLXJlc2V0LXByb2dyZXNzXCIpO1xuXG4gICAgICAgICAgICBzbGlkaW5nID0gZmFsc2U7XG4gICAgICAgICAgICB2YXIgbGF5b3V0VHJpZ2dlciA9ICRzbGlkZXIub2Zmc2V0VG9wO1xuXG4gICAgICAgICAgICBpZiAoYXV0b1NsaWRpbmdBY3RpdmUgJiYgIWF1dG9TbGlkaW5nQmxvY2tlZCkge1xuICAgICAgICAgICAgICAgIHNldEF1dG9zbGlkaW5nVE8oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICBmdW5jdGlvbiBwZXJmb3JtU2xpZGluZyhzbGlkZUlEKSB7XG4gICAgICAgICAgICBpZiAoc2xpZGluZykgcmV0dXJuO1xuICAgICAgICAgICAgc2xpZGluZyA9IHRydWU7XG4gICAgICAgICAgICB3aW5kb3cuY2xlYXJUaW1lb3V0KGF1dG9TbGlkaW5nVE8pO1xuICAgICAgICAgICAgY3VyU2xpZGUgPSBzbGlkZUlEO1xuXG4gICAgICAgICAgICAkcHJldkNvbnRyb2wgPSAkc2xpZGVyLnF1ZXJ5U2VsZWN0b3IoXCIubS0tYWN0aXZlLWNvbnRyb2xcIik7XG4gICAgICAgICAgICAkcHJldkNvbnRyb2wuY2xhc3NMaXN0LnJlbW92ZShcIm0tLWFjdGl2ZS1jb250cm9sXCIpO1xuICAgICAgICAgICAgJHByZXZDb250cm9sLmNsYXNzTGlzdC5hZGQoXCJtLS1wcmV2LWNvbnRyb2xcIik7XG4gICAgICAgICAgICAkc2xpZGVyLnF1ZXJ5U2VsZWN0b3IocHJlZml4ICsgXCJuYXZfX2NvbnRyb2wtXCIgKyBzbGlkZUlEKS5jbGFzc0xpc3QuYWRkKFwibS0tYWN0aXZlLWNvbnRyb2xcIik7XG5cbiAgICAgICAgICAgICRhY3RpdmVTbGlkZSA9ICRzbGlkZXIucXVlcnlTZWxlY3RvcihwcmVmaXggKyBcInNsaWRlLVwiICsgc2xpZGVJRCk7XG4gICAgICAgICAgICAkYWN0aXZlQ29udHJvbHNCZyA9ICRzbGlkZXIucXVlcnlTZWxlY3RvcihwcmVmaXggKyBcIm5hdl9fYmctXCIgKyBzbGlkZUlEKTtcblxuICAgICAgICAgICAgJHNsaWRlci5xdWVyeVNlbGVjdG9yKFwiLm0tLWFjdGl2ZS1zbGlkZVwiKS5jbGFzc0xpc3QuYWRkKFwibS0tcHJldmlvdXMtc2xpZGVcIik7XG4gICAgICAgICAgICAkc2xpZGVyLnF1ZXJ5U2VsZWN0b3IoXCIubS0tYWN0aXZlLW5hdi1iZ1wiKS5jbGFzc0xpc3QuYWRkKFwibS0tcHJldmlvdXMtbmF2LWJnXCIpO1xuXG4gICAgICAgICAgICAkYWN0aXZlU2xpZGUuY2xhc3NMaXN0LmFkZChcIm0tLWJlZm9yZS1zbGlkaW5nXCIpO1xuICAgICAgICAgICAgJGFjdGl2ZUNvbnRyb2xzQmcuY2xhc3NMaXN0LmFkZChcIm0tLW5hdi1iZy1iZWZvcmVcIik7XG5cbiAgICAgICAgICAgIHZhciBsYXlvdXRUcmlnZ2VyID0gJGFjdGl2ZVNsaWRlLm9mZnNldFRvcDtcblxuICAgICAgICAgICAgJGFjdGl2ZVNsaWRlLmNsYXNzTGlzdC5hZGQoXCJtLS1hY3RpdmUtc2xpZGVcIik7XG4gICAgICAgICAgICAkYWN0aXZlQ29udHJvbHNCZy5jbGFzc0xpc3QuYWRkKFwibS0tYWN0aXZlLW5hdi1iZ1wiKTtcblxuICAgICAgICAgICAgc2V0VGltZW91dChhZnRlclNsaWRpbmdIYW5kbGVyLCBzbGlkaW5nQVQgKyBzbGlkaW5nRGVsYXkpO1xuICAgICAgICB9O1xuXG5cblxuICAgICAgICBmdW5jdGlvbiBjb250cm9sQ2xpY2tIYW5kbGVyKCkge1xuICAgICAgICAgICAgaWYgKHNsaWRpbmcpIHJldHVybjtcbiAgICAgICAgICAgIGlmICh0aGlzLmNsYXNzTGlzdC5jb250YWlucyhcIm0tLWFjdGl2ZS1jb250cm9sXCIpKSByZXR1cm47XG4gICAgICAgICAgICBpZiAob3B0aW9ucy5ibG9ja0FTYWZ0ZXJDbGljaykge1xuICAgICAgICAgICAgICAgIGF1dG9TbGlkaW5nQmxvY2tlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgJHNsaWRlci5jbGFzc0xpc3QuYWRkKFwibS0tYXV0b3NsaWRpbmctYmxvY2tlZFwiKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdmFyIHNsaWRlSUQgPSArdGhpcy5nZXRBdHRyaWJ1dGUoXCJkYXRhLXNsaWRlXCIpO1xuXG4gICAgICAgICAgICBwZXJmb3JtU2xpZGluZyhzbGlkZUlEKTtcbiAgICAgICAgfTtcblxuICAgICAgICAkY29udHJvbHMuZm9yRWFjaChmdW5jdGlvbigkY29udHJvbCkge1xuICAgICAgICAgICAgJGNvbnRyb2wuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGNvbnRyb2xDbGlja0hhbmRsZXIpO1xuICAgICAgICB9KTtcblxuICAgICAgICBmdW5jdGlvbiBzZXRBdXRvc2xpZGluZ1RPKCkge1xuICAgICAgICAgICAgd2luZG93LmNsZWFyVGltZW91dChhdXRvU2xpZGluZ1RPKTtcbiAgICAgICAgICAgIHZhciBkZWxheSA9ICtvcHRpb25zLmF1dG9TbGlkaW5nRGVsYXkgfHwgYXV0b1NsaWRpbmdEZWxheTtcbiAgICAgICAgICAgIGN1clNsaWRlKys7XG4gICAgICAgICAgICBpZiAoY3VyU2xpZGUgPiBudW1PZlNsaWRlcykgY3VyU2xpZGUgPSAxO1xuXG4gICAgICAgICAgICBhdXRvU2xpZGluZ1RPID0gc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICBwZXJmb3JtU2xpZGluZyhjdXJTbGlkZSk7XG4gICAgICAgICAgICB9LCBkZWxheSk7XG4gICAgICAgIH07XG5cbiAgICAgICAgaWYgKG9wdGlvbnMuYXV0b1NsaWRpbmcgfHwgK29wdGlvbnMuYXV0b1NsaWRpbmdEZWxheSA+IDApIHtcbiAgICAgICAgICAgIGlmIChvcHRpb25zLmF1dG9TbGlkaW5nID09PSBmYWxzZSkgcmV0dXJuO1xuXG4gICAgICAgICAgICBhdXRvU2xpZGluZ0FjdGl2ZSA9IHRydWU7XG4gICAgICAgICAgICBzZXRBdXRvc2xpZGluZ1RPKCk7XG5cbiAgICAgICAgICAgICRzbGlkZXIuY2xhc3NMaXN0LmFkZChcIm0tLXdpdGgtYXV0b3NsaWRpbmdcIik7XG4gICAgICAgICAgICB2YXIgdHJpZ2dlckxheW91dCA9ICRzbGlkZXIub2Zmc2V0VG9wO1xuXG4gICAgICAgICAgICB2YXIgZGVsYXkgPSArb3B0aW9ucy5hdXRvU2xpZGluZ0RlbGF5IHx8IGF1dG9TbGlkaW5nRGVsYXk7XG4gICAgICAgICAgICBkZWxheSArPSBzbGlkaW5nRGVsYXkgKyBzbGlkaW5nQVQ7XG5cbiAgICAgICAgICAgICRwcm9ncmVzc0FTLmZvckVhY2goZnVuY3Rpb24oJHByb2dyZXNzKSB7XG4gICAgICAgICAgICAgICAgJHByb2dyZXNzLnN0eWxlLnRyYW5zaXRpb24gPSBcInRyYW5zZm9ybSBcIiArIChkZWxheSAvIDEwMDApICsgXCJzXCI7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgICRzbGlkZXIucXVlcnlTZWxlY3RvcihcIi5mbmMtbmF2X19jb250cm9sOmZpcnN0LWNoaWxkXCIpLmNsYXNzTGlzdC5hZGQoXCJtLS1hY3RpdmUtY29udHJvbFwiKTtcblxuICAgIH07XG5cbiAgICB2YXIgZm5jU2xpZGVyID0gZnVuY3Rpb24oc2xpZGVyU2VsZWN0b3IsIG9wdGlvbnMpIHtcbiAgICAgICAgdmFyICRzbGlkZXJzID0gJCQoc2xpZGVyU2VsZWN0b3IpO1xuXG4gICAgICAgICRzbGlkZXJzLmZvckVhY2goZnVuY3Rpb24oJHNsaWRlcikge1xuICAgICAgICAgICAgX2ZuY1NsaWRlckluaXQoJHNsaWRlciwgb3B0aW9ucyk7XG4gICAgICAgIH0pO1xuICAgIH07XG5cbiAgICB3aW5kb3cuZm5jU2xpZGVyID0gZm5jU2xpZGVyO1xufSgpKTtcblxuLyogbm90IHBhcnQgb2YgdGhlIHNsaWRlciBzY3JpcHRzICovXG5cbi8qIFNsaWRlciBpbml0aWFsaXphdGlvblxub3B0aW9uczpcbmF1dG9TbGlkaW5nIC0gYm9vbGVhblxuYXV0b1NsaWRpbmdEZWxheSAtIGRlbGF5IGluIG1zLiBJZiBhdWRvU2xpZGluZyBpcyBvbiBhbmQgbm8gdmFsdWUgcHJvdmlkZWQsIGRlZmF1bHQgdmFsdWUgaXMgNTAwMFxuYmxvY2tBU2FmdGVyQ2xpY2sgLSBib29sZWFuLiBJZiB1c2VyIGNsaWNrZWQgYW55IHNsaWRpbmcgY29udHJvbCwgYXV0b3NsaWRpbmcgd29uJ3Qgc3RhcnQgYWdhaW5cbiovXG5mbmNTbGlkZXIoXCIuZXhhbXBsZS1zbGlkZXJcIiwge2F1dG9TbGlkaW5nRGVsYXk6IDQwMDB9KTtcblxudmFyICRkZW1vQ29udCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuZGVtby1jb250XCIpO1xuXG5bXS5zbGljZS5jYWxsKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCIuZm5jLXNsaWRlX19hY3Rpb24tYnRuXCIpKS5mb3JFYWNoKGZ1bmN0aW9uKCRidG4pIHtcbiAgICAkYnRuLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBmdW5jdGlvbigpIHtcbiAgICAgICAgJGRlbW9Db250LmNsYXNzTGlzdC50b2dnbGUoXCJjcmVkaXRzLWFjdGl2ZVwiKTtcbiAgICB9KTtcbn0pO1xuXG5kb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLmRlbW8tY29udF9fY3JlZGl0cy1jbG9zZVwiKS5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgZnVuY3Rpb24oKSB7XG4gICAgJGRlbW9Db250LmNsYXNzTGlzdC5yZW1vdmUoXCJjcmVkaXRzLWFjdGl2ZVwiKTtcbn0pO1xuXG5kb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLmpzLWFjdGl2YXRlLWdsb2JhbC1ibGVuZGluZ1wiKS5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgZnVuY3Rpb24oKSB7XG4gICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5leGFtcGxlLXNsaWRlclwiKS5jbGFzc0xpc3QudG9nZ2xlKFwibS0tZ2xvYmFsLWJsZW5kaW5nLWFjdGl2ZVwiKTtcbn0pOyJdfQ==
